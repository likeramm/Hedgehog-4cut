{"version":3,"file":"static/js/502.d33a6a4e.chunk.js","mappings":"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","sources":["../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-C4OEIS7N.mjs","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-7PKI6E2E.mjs","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/lodash-es/flatMap.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-2O5ZK7RR.mjs","../node_modules/lodash-es/_baseExtremum.js","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/lodash-es/clone.js","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-2NYFTIL2.mjs","../node_modules/lodash-es/isString.js","../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/lodash-es/last.js","../node_modules/langium/src/utils/stream.ts","../node_modules/langium/src/parser/value-converter.ts","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/defaults.js","../node_modules/langium/src/syntax-tree.ts","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/lodash-es/_baseLt.js","../node_modules/langium/src/dependency-injection.ts","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/toInteger.js","../node_modules/langium/src/utils/errors.ts","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-ROXG7S4E.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-V4Q32G6S.mjs","../node_modules/lodash-es/map.js","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/lodash-es/min.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-EXZZNE6F.mjs","../node_modules/langium/src/parser/token-builder.ts"],"sourcesContent":["import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","/******************************************************************************\r\n * This file was generated by langium-cli 3.3.0.\r\n * DO NOT EDIT MANUALLY!\r\n ******************************************************************************/\r\n\r\n/* eslint-disable */\r\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\r\nimport { AbstractAstReflection } from '../../syntax-tree.js';\r\n\r\nexport const LangiumGrammarTerminals = {\r\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\r\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\r\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\r\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\r\n    WS: /\\s+/,\r\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\r\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\r\n};\r\n\r\nexport type LangiumGrammarTerminalNames = keyof typeof LangiumGrammarTerminals;\r\n\r\nexport type LangiumGrammarKeywordNames = \r\n    | \"!\"\r\n    | \"&\"\r\n    | \"(\"\r\n    | \")\"\r\n    | \"*\"\r\n    | \"+\"\r\n    | \"+=\"\r\n    | \",\"\r\n    | \"->\"\r\n    | \".\"\r\n    | \"..\"\r\n    | \":\"\r\n    | \";\"\r\n    | \"<\"\r\n    | \"=\"\r\n    | \"=>\"\r\n    | \">\"\r\n    | \"?\"\r\n    | \"?!\"\r\n    | \"?<!\"\r\n    | \"?<=\"\r\n    | \"?=\"\r\n    | \"@\"\r\n    | \"Date\"\r\n    | \"EOF\"\r\n    | \"[\"\r\n    | \"]\"\r\n    | \"bigint\"\r\n    | \"boolean\"\r\n    | \"current\"\r\n    | \"entry\"\r\n    | \"extends\"\r\n    | \"false\"\r\n    | \"fragment\"\r\n    | \"grammar\"\r\n    | \"hidden\"\r\n    | \"import\"\r\n    | \"infer\"\r\n    | \"infers\"\r\n    | \"interface\"\r\n    | \"number\"\r\n    | \"returns\"\r\n    | \"string\"\r\n    | \"terminal\"\r\n    | \"true\"\r\n    | \"type\"\r\n    | \"with\"\r\n    | \"{\"\r\n    | \"|\"\r\n    | \"}\";\r\n\r\nexport type LangiumGrammarTokenNames = LangiumGrammarTerminalNames | LangiumGrammarKeywordNames;\r\n\r\nexport type AbstractRule = ParserRule | TerminalRule;\r\n\r\nexport const AbstractRule = 'AbstractRule';\r\n\r\nexport function isAbstractRule(item: unknown): item is AbstractRule {\r\n    return reflection.isInstance(item, AbstractRule);\r\n}\r\n\r\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\r\n\r\nexport const AbstractType = 'AbstractType';\r\n\r\nexport function isAbstractType(item: unknown): item is AbstractType {\r\n    return reflection.isInstance(item, AbstractType);\r\n}\r\n\r\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\r\n\r\nexport const Condition = 'Condition';\r\n\r\nexport function isCondition(item: unknown): item is Condition {\r\n    return reflection.isInstance(item, Condition);\r\n}\r\n\r\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\r\n\r\nexport function isFeatureName(item: unknown): item is FeatureName {\r\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\r\n}\r\n\r\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\r\n\r\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\r\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\r\n}\r\n\r\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\r\n\r\nexport const TypeDefinition = 'TypeDefinition';\r\n\r\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\r\n    return reflection.isInstance(item, TypeDefinition);\r\n}\r\n\r\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\r\n\r\nexport const ValueLiteral = 'ValueLiteral';\r\n\r\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\r\n    return reflection.isInstance(item, ValueLiteral);\r\n}\r\n\r\nexport interface AbstractElement extends AstNode {\r\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\r\n    cardinality?: '*' | '+' | '?';\r\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\r\n}\r\n\r\nexport const AbstractElement = 'AbstractElement';\r\n\r\nexport function isAbstractElement(item: unknown): item is AbstractElement {\r\n    return reflection.isInstance(item, AbstractElement);\r\n}\r\n\r\nexport interface ArrayLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'ArrayLiteral';\r\n    elements: Array<ValueLiteral>;\r\n}\r\n\r\nexport const ArrayLiteral = 'ArrayLiteral';\r\n\r\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\r\n    return reflection.isInstance(item, ArrayLiteral);\r\n}\r\n\r\nexport interface ArrayType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ArrayType';\r\n    elementType: TypeDefinition;\r\n}\r\n\r\nexport const ArrayType = 'ArrayType';\r\n\r\nexport function isArrayType(item: unknown): item is ArrayType {\r\n    return reflection.isInstance(item, ArrayType);\r\n}\r\n\r\nexport interface BooleanLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\r\n    readonly $type: 'BooleanLiteral';\r\n    true: boolean;\r\n}\r\n\r\nexport const BooleanLiteral = 'BooleanLiteral';\r\n\r\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\r\n    return reflection.isInstance(item, BooleanLiteral);\r\n}\r\n\r\nexport interface Conjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Conjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Conjunction = 'Conjunction';\r\n\r\nexport function isConjunction(item: unknown): item is Conjunction {\r\n    return reflection.isInstance(item, Conjunction);\r\n}\r\n\r\nexport interface Disjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Disjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Disjunction = 'Disjunction';\r\n\r\nexport function isDisjunction(item: unknown): item is Disjunction {\r\n    return reflection.isInstance(item, Disjunction);\r\n}\r\n\r\nexport interface Grammar extends AstNode {\r\n    readonly $type: 'Grammar';\r\n    definesHiddenTokens: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    imports: Array<GrammarImport>;\r\n    interfaces: Array<Interface>;\r\n    isDeclared: boolean;\r\n    name?: string;\r\n    rules: Array<AbstractRule>;\r\n    types: Array<Type>;\r\n    usedGrammars: Array<Reference<Grammar>>;\r\n}\r\n\r\nexport const Grammar = 'Grammar';\r\n\r\nexport function isGrammar(item: unknown): item is Grammar {\r\n    return reflection.isInstance(item, Grammar);\r\n}\r\n\r\nexport interface GrammarImport extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'GrammarImport';\r\n    path: string;\r\n}\r\n\r\nexport const GrammarImport = 'GrammarImport';\r\n\r\nexport function isGrammarImport(item: unknown): item is GrammarImport {\r\n    return reflection.isInstance(item, GrammarImport);\r\n}\r\n\r\nexport interface InferredType extends AstNode {\r\n    readonly $container: Action | ParserRule;\r\n    readonly $type: 'InferredType';\r\n    name: string;\r\n}\r\n\r\nexport const InferredType = 'InferredType';\r\n\r\nexport function isInferredType(item: unknown): item is InferredType {\r\n    return reflection.isInstance(item, InferredType);\r\n}\r\n\r\nexport interface Interface extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Interface';\r\n    attributes: Array<TypeAttribute>;\r\n    name: string;\r\n    superTypes: Array<Reference<AbstractType>>;\r\n}\r\n\r\nexport const Interface = 'Interface';\r\n\r\nexport function isInterface(item: unknown): item is Interface {\r\n    return reflection.isInstance(item, Interface);\r\n}\r\n\r\nexport interface NamedArgument extends AstNode {\r\n    readonly $container: RuleCall;\r\n    readonly $type: 'NamedArgument';\r\n    calledByName: boolean;\r\n    parameter?: Reference<Parameter>;\r\n    value: Condition;\r\n}\r\n\r\nexport const NamedArgument = 'NamedArgument';\r\n\r\nexport function isNamedArgument(item: unknown): item is NamedArgument {\r\n    return reflection.isInstance(item, NamedArgument);\r\n}\r\n\r\nexport interface Negation extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Negation';\r\n    value: Condition;\r\n}\r\n\r\nexport const Negation = 'Negation';\r\n\r\nexport function isNegation(item: unknown): item is Negation {\r\n    return reflection.isInstance(item, Negation);\r\n}\r\n\r\nexport interface NumberLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'NumberLiteral';\r\n    value: number;\r\n}\r\n\r\nexport const NumberLiteral = 'NumberLiteral';\r\n\r\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\r\n    return reflection.isInstance(item, NumberLiteral);\r\n}\r\n\r\nexport interface Parameter extends AstNode {\r\n    readonly $container: ParserRule;\r\n    readonly $type: 'Parameter';\r\n    name: string;\r\n}\r\n\r\nexport const Parameter = 'Parameter';\r\n\r\nexport function isParameter(item: unknown): item is Parameter {\r\n    return reflection.isInstance(item, Parameter);\r\n}\r\n\r\nexport interface ParameterReference extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'ParameterReference';\r\n    parameter: Reference<Parameter>;\r\n}\r\n\r\nexport const ParameterReference = 'ParameterReference';\r\n\r\nexport function isParameterReference(item: unknown): item is ParameterReference {\r\n    return reflection.isInstance(item, ParameterReference);\r\n}\r\n\r\nexport interface ParserRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'ParserRule';\r\n    dataType?: PrimitiveType;\r\n    definesHiddenTokens: boolean;\r\n    definition: AbstractElement;\r\n    entry: boolean;\r\n    fragment: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    inferredType?: InferredType;\r\n    name: string;\r\n    parameters: Array<Parameter>;\r\n    returnType?: Reference<AbstractType>;\r\n    wildcard: boolean;\r\n}\r\n\r\nexport const ParserRule = 'ParserRule';\r\n\r\nexport function isParserRule(item: unknown): item is ParserRule {\r\n    return reflection.isInstance(item, ParserRule);\r\n}\r\n\r\nexport interface ReferenceType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ReferenceType';\r\n    referenceType: TypeDefinition;\r\n}\r\n\r\nexport const ReferenceType = 'ReferenceType';\r\n\r\nexport function isReferenceType(item: unknown): item is ReferenceType {\r\n    return reflection.isInstance(item, ReferenceType);\r\n}\r\n\r\nexport interface ReturnType extends AstNode {\r\n    readonly $container: TerminalRule;\r\n    readonly $type: 'ReturnType';\r\n    name: PrimitiveType | string;\r\n}\r\n\r\nexport const ReturnType = 'ReturnType';\r\n\r\nexport function isReturnType(item: unknown): item is ReturnType {\r\n    return reflection.isInstance(item, ReturnType);\r\n}\r\n\r\nexport interface SimpleType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'SimpleType';\r\n    primitiveType?: PrimitiveType;\r\n    stringType?: string;\r\n    typeRef?: Reference<AbstractType>;\r\n}\r\n\r\nexport const SimpleType = 'SimpleType';\r\n\r\nexport function isSimpleType(item: unknown): item is SimpleType {\r\n    return reflection.isInstance(item, SimpleType);\r\n}\r\n\r\nexport interface StringLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'StringLiteral';\r\n    value: string;\r\n}\r\n\r\nexport const StringLiteral = 'StringLiteral';\r\n\r\nexport function isStringLiteral(item: unknown): item is StringLiteral {\r\n    return reflection.isInstance(item, StringLiteral);\r\n}\r\n\r\nexport interface TerminalRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'TerminalRule';\r\n    definition: AbstractElement;\r\n    fragment: boolean;\r\n    hidden: boolean;\r\n    name: string;\r\n    type?: ReturnType;\r\n}\r\n\r\nexport const TerminalRule = 'TerminalRule';\r\n\r\nexport function isTerminalRule(item: unknown): item is TerminalRule {\r\n    return reflection.isInstance(item, TerminalRule);\r\n}\r\n\r\nexport interface Type extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Type';\r\n    name: string;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const Type = 'Type';\r\n\r\nexport function isType(item: unknown): item is Type {\r\n    return reflection.isInstance(item, Type);\r\n}\r\n\r\nexport interface TypeAttribute extends AstNode {\r\n    readonly $container: Interface;\r\n    readonly $type: 'TypeAttribute';\r\n    defaultValue?: ValueLiteral;\r\n    isOptional: boolean;\r\n    name: FeatureName;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const TypeAttribute = 'TypeAttribute';\r\n\r\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\r\n    return reflection.isInstance(item, TypeAttribute);\r\n}\r\n\r\nexport interface UnionType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'UnionType';\r\n    types: Array<TypeDefinition>;\r\n}\r\n\r\nexport const UnionType = 'UnionType';\r\n\r\nexport function isUnionType(item: unknown): item is UnionType {\r\n    return reflection.isInstance(item, UnionType);\r\n}\r\n\r\nexport interface Action extends AbstractElement {\r\n    readonly $type: 'Action';\r\n    feature?: FeatureName;\r\n    inferredType?: InferredType;\r\n    operator?: '+=' | '=';\r\n    type?: Reference<AbstractType>;\r\n}\r\n\r\nexport const Action = 'Action';\r\n\r\nexport function isAction(item: unknown): item is Action {\r\n    return reflection.isInstance(item, Action);\r\n}\r\n\r\nexport interface Alternatives extends AbstractElement {\r\n    readonly $type: 'Alternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const Alternatives = 'Alternatives';\r\n\r\nexport function isAlternatives(item: unknown): item is Alternatives {\r\n    return reflection.isInstance(item, Alternatives);\r\n}\r\n\r\nexport interface Assignment extends AbstractElement {\r\n    readonly $type: 'Assignment';\r\n    feature: FeatureName;\r\n    operator: '+=' | '=' | '?=';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const Assignment = 'Assignment';\r\n\r\nexport function isAssignment(item: unknown): item is Assignment {\r\n    return reflection.isInstance(item, Assignment);\r\n}\r\n\r\nexport interface CharacterRange extends AbstractElement {\r\n    readonly $type: 'CharacterRange';\r\n    left: Keyword;\r\n    right?: Keyword;\r\n}\r\n\r\nexport const CharacterRange = 'CharacterRange';\r\n\r\nexport function isCharacterRange(item: unknown): item is CharacterRange {\r\n    return reflection.isInstance(item, CharacterRange);\r\n}\r\n\r\nexport interface CrossReference extends AbstractElement {\r\n    readonly $type: 'CrossReference';\r\n    deprecatedSyntax: boolean;\r\n    terminal?: AbstractElement;\r\n    type: Reference<AbstractType>;\r\n}\r\n\r\nexport const CrossReference = 'CrossReference';\r\n\r\nexport function isCrossReference(item: unknown): item is CrossReference {\r\n    return reflection.isInstance(item, CrossReference);\r\n}\r\n\r\nexport interface EndOfFile extends AbstractElement {\r\n    readonly $type: 'EndOfFile';\r\n}\r\n\r\nexport const EndOfFile = 'EndOfFile';\r\n\r\nexport function isEndOfFile(item: unknown): item is EndOfFile {\r\n    return reflection.isInstance(item, EndOfFile);\r\n}\r\n\r\nexport interface Group extends AbstractElement {\r\n    readonly $type: 'Group';\r\n    elements: Array<AbstractElement>;\r\n    guardCondition?: Condition;\r\n}\r\n\r\nexport const Group = 'Group';\r\n\r\nexport function isGroup(item: unknown): item is Group {\r\n    return reflection.isInstance(item, Group);\r\n}\r\n\r\nexport interface Keyword extends AbstractElement {\r\n    readonly $container: CharacterRange;\r\n    readonly $type: 'Keyword';\r\n    value: string;\r\n}\r\n\r\nexport const Keyword = 'Keyword';\r\n\r\nexport function isKeyword(item: unknown): item is Keyword {\r\n    return reflection.isInstance(item, Keyword);\r\n}\r\n\r\nexport interface NegatedToken extends AbstractElement {\r\n    readonly $type: 'NegatedToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const NegatedToken = 'NegatedToken';\r\n\r\nexport function isNegatedToken(item: unknown): item is NegatedToken {\r\n    return reflection.isInstance(item, NegatedToken);\r\n}\r\n\r\nexport interface RegexToken extends AbstractElement {\r\n    readonly $type: 'RegexToken';\r\n    regex: string;\r\n}\r\n\r\nexport const RegexToken = 'RegexToken';\r\n\r\nexport function isRegexToken(item: unknown): item is RegexToken {\r\n    return reflection.isInstance(item, RegexToken);\r\n}\r\n\r\nexport interface RuleCall extends AbstractElement {\r\n    readonly $type: 'RuleCall';\r\n    arguments: Array<NamedArgument>;\r\n    rule: Reference<AbstractRule>;\r\n}\r\n\r\nexport const RuleCall = 'RuleCall';\r\n\r\nexport function isRuleCall(item: unknown): item is RuleCall {\r\n    return reflection.isInstance(item, RuleCall);\r\n}\r\n\r\nexport interface TerminalAlternatives extends AbstractElement {\r\n    readonly $type: 'TerminalAlternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalAlternatives = 'TerminalAlternatives';\r\n\r\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\r\n    return reflection.isInstance(item, TerminalAlternatives);\r\n}\r\n\r\nexport interface TerminalGroup extends AbstractElement {\r\n    readonly $type: 'TerminalGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalGroup = 'TerminalGroup';\r\n\r\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\r\n    return reflection.isInstance(item, TerminalGroup);\r\n}\r\n\r\nexport interface TerminalRuleCall extends AbstractElement {\r\n    readonly $type: 'TerminalRuleCall';\r\n    rule: Reference<TerminalRule>;\r\n}\r\n\r\nexport const TerminalRuleCall = 'TerminalRuleCall';\r\n\r\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\r\n    return reflection.isInstance(item, TerminalRuleCall);\r\n}\r\n\r\nexport interface UnorderedGroup extends AbstractElement {\r\n    readonly $type: 'UnorderedGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const UnorderedGroup = 'UnorderedGroup';\r\n\r\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\r\n    return reflection.isInstance(item, UnorderedGroup);\r\n}\r\n\r\nexport interface UntilToken extends AbstractElement {\r\n    readonly $type: 'UntilToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const UntilToken = 'UntilToken';\r\n\r\nexport function isUntilToken(item: unknown): item is UntilToken {\r\n    return reflection.isInstance(item, UntilToken);\r\n}\r\n\r\nexport interface Wildcard extends AbstractElement {\r\n    readonly $type: 'Wildcard';\r\n}\r\n\r\nexport const Wildcard = 'Wildcard';\r\n\r\nexport function isWildcard(item: unknown): item is Wildcard {\r\n    return reflection.isInstance(item, Wildcard);\r\n}\r\n\r\nexport type LangiumGrammarAstType = {\r\n    AbstractElement: AbstractElement\r\n    AbstractRule: AbstractRule\r\n    AbstractType: AbstractType\r\n    Action: Action\r\n    Alternatives: Alternatives\r\n    ArrayLiteral: ArrayLiteral\r\n    ArrayType: ArrayType\r\n    Assignment: Assignment\r\n    BooleanLiteral: BooleanLiteral\r\n    CharacterRange: CharacterRange\r\n    Condition: Condition\r\n    Conjunction: Conjunction\r\n    CrossReference: CrossReference\r\n    Disjunction: Disjunction\r\n    EndOfFile: EndOfFile\r\n    Grammar: Grammar\r\n    GrammarImport: GrammarImport\r\n    Group: Group\r\n    InferredType: InferredType\r\n    Interface: Interface\r\n    Keyword: Keyword\r\n    NamedArgument: NamedArgument\r\n    NegatedToken: NegatedToken\r\n    Negation: Negation\r\n    NumberLiteral: NumberLiteral\r\n    Parameter: Parameter\r\n    ParameterReference: ParameterReference\r\n    ParserRule: ParserRule\r\n    ReferenceType: ReferenceType\r\n    RegexToken: RegexToken\r\n    ReturnType: ReturnType\r\n    RuleCall: RuleCall\r\n    SimpleType: SimpleType\r\n    StringLiteral: StringLiteral\r\n    TerminalAlternatives: TerminalAlternatives\r\n    TerminalGroup: TerminalGroup\r\n    TerminalRule: TerminalRule\r\n    TerminalRuleCall: TerminalRuleCall\r\n    Type: Type\r\n    TypeAttribute: TypeAttribute\r\n    TypeDefinition: TypeDefinition\r\n    UnionType: UnionType\r\n    UnorderedGroup: UnorderedGroup\r\n    UntilToken: UntilToken\r\n    ValueLiteral: ValueLiteral\r\n    Wildcard: Wildcard\r\n}\r\n\r\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\r\n\r\n    getAllTypes(): string[] {\r\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\r\n    }\r\n\r\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\r\n        switch (subtype) {\r\n            case Action:\r\n            case Alternatives:\r\n            case Assignment:\r\n            case CharacterRange:\r\n            case CrossReference:\r\n            case EndOfFile:\r\n            case Group:\r\n            case Keyword:\r\n            case NegatedToken:\r\n            case RegexToken:\r\n            case RuleCall:\r\n            case TerminalAlternatives:\r\n            case TerminalGroup:\r\n            case TerminalRuleCall:\r\n            case UnorderedGroup:\r\n            case UntilToken:\r\n            case Wildcard: {\r\n                return this.isSubtype(AbstractElement, supertype);\r\n            }\r\n            case ArrayLiteral:\r\n            case NumberLiteral:\r\n            case StringLiteral: {\r\n                return this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case ArrayType:\r\n            case ReferenceType:\r\n            case SimpleType:\r\n            case UnionType: {\r\n                return this.isSubtype(TypeDefinition, supertype);\r\n            }\r\n            case BooleanLiteral: {\r\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case Conjunction:\r\n            case Disjunction:\r\n            case Negation:\r\n            case ParameterReference: {\r\n                return this.isSubtype(Condition, supertype);\r\n            }\r\n            case InferredType:\r\n            case Interface:\r\n            case Type: {\r\n                return this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case ParserRule: {\r\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case TerminalRule: {\r\n                return this.isSubtype(AbstractRule, supertype);\r\n            }\r\n            default: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getReferenceType(refInfo: ReferenceInfo): string {\r\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\r\n        switch (referenceId) {\r\n            case 'Action:type':\r\n            case 'CrossReference:type':\r\n            case 'Interface:superTypes':\r\n            case 'ParserRule:returnType':\r\n            case 'SimpleType:typeRef': {\r\n                return AbstractType;\r\n            }\r\n            case 'Grammar:hiddenTokens':\r\n            case 'ParserRule:hiddenTokens':\r\n            case 'RuleCall:rule': {\r\n                return AbstractRule;\r\n            }\r\n            case 'Grammar:usedGrammars': {\r\n                return Grammar;\r\n            }\r\n            case 'NamedArgument:parameter':\r\n            case 'ParameterReference:parameter': {\r\n                return Parameter;\r\n            }\r\n            case 'TerminalRuleCall:rule': {\r\n                return TerminalRule;\r\n            }\r\n            default: {\r\n                throw new Error(`${referenceId} is not a valid reference id.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTypeMetaData(type: string): TypeMetaData {\r\n        switch (type) {\r\n            case AbstractElement: {\r\n                return {\r\n                    name: AbstractElement,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayLiteral: {\r\n                return {\r\n                    name: ArrayLiteral,\r\n                    properties: [\r\n                        { name: 'elements', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayType: {\r\n                return {\r\n                    name: ArrayType,\r\n                    properties: [\r\n                        { name: 'elementType' }\r\n                    ]\r\n                };\r\n            }\r\n            case BooleanLiteral: {\r\n                return {\r\n                    name: BooleanLiteral,\r\n                    properties: [\r\n                        { name: 'true', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case Conjunction: {\r\n                return {\r\n                    name: Conjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Disjunction: {\r\n                return {\r\n                    name: Disjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Grammar: {\r\n                return {\r\n                    name: Grammar,\r\n                    properties: [\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'imports', defaultValue: [] },\r\n                        { name: 'interfaces', defaultValue: [] },\r\n                        { name: 'isDeclared', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'rules', defaultValue: [] },\r\n                        { name: 'types', defaultValue: [] },\r\n                        { name: 'usedGrammars', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case GrammarImport: {\r\n                return {\r\n                    name: GrammarImport,\r\n                    properties: [\r\n                        { name: 'path' }\r\n                    ]\r\n                };\r\n            }\r\n            case InferredType: {\r\n                return {\r\n                    name: InferredType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case Interface: {\r\n                return {\r\n                    name: Interface,\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'name' },\r\n                        { name: 'superTypes', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case NamedArgument: {\r\n                return {\r\n                    name: NamedArgument,\r\n                    properties: [\r\n                        { name: 'calledByName', defaultValue: false },\r\n                        { name: 'parameter' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Negation: {\r\n                return {\r\n                    name: Negation,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NumberLiteral: {\r\n                return {\r\n                    name: NumberLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Parameter: {\r\n                return {\r\n                    name: Parameter,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParameterReference: {\r\n                return {\r\n                    name: ParameterReference,\r\n                    properties: [\r\n                        { name: 'parameter' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParserRule: {\r\n                return {\r\n                    name: ParserRule,\r\n                    properties: [\r\n                        { name: 'dataType' },\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'definition' },\r\n                        { name: 'entry', defaultValue: false },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'inferredType' },\r\n                        { name: 'name' },\r\n                        { name: 'parameters', defaultValue: [] },\r\n                        { name: 'returnType' },\r\n                        { name: 'wildcard', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case ReferenceType: {\r\n                return {\r\n                    name: ReferenceType,\r\n                    properties: [\r\n                        { name: 'referenceType' }\r\n                    ]\r\n                };\r\n            }\r\n            case ReturnType: {\r\n                return {\r\n                    name: ReturnType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case SimpleType: {\r\n                return {\r\n                    name: SimpleType,\r\n                    properties: [\r\n                        { name: 'primitiveType' },\r\n                        { name: 'stringType' },\r\n                        { name: 'typeRef' }\r\n                    ]\r\n                };\r\n            }\r\n            case StringLiteral: {\r\n                return {\r\n                    name: StringLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRule: {\r\n                return {\r\n                    name: TerminalRule,\r\n                    properties: [\r\n                        { name: 'definition' },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hidden', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Type: {\r\n                return {\r\n                    name: Type,\r\n                    properties: [\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case TypeAttribute: {\r\n                return {\r\n                    name: TypeAttribute,\r\n                    properties: [\r\n                        { name: 'defaultValue' },\r\n                        { name: 'isOptional', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnionType: {\r\n                return {\r\n                    name: UnionType,\r\n                    properties: [\r\n                        { name: 'types', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case Action: {\r\n                return {\r\n                    name: Action,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'inferredType' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Alternatives: {\r\n                return {\r\n                    name: Alternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Assignment: {\r\n                return {\r\n                    name: Assignment,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case CharacterRange: {\r\n                return {\r\n                    name: CharacterRange,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'left' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case CrossReference: {\r\n                return {\r\n                    name: CrossReference,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'deprecatedSyntax', defaultValue: false },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case EndOfFile: {\r\n                return {\r\n                    name: EndOfFile,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Group: {\r\n                return {\r\n                    name: Group,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'guardCondition' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Keyword: {\r\n                return {\r\n                    name: Keyword,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NegatedToken: {\r\n                return {\r\n                    name: NegatedToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case RegexToken: {\r\n                return {\r\n                    name: RegexToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'regex' }\r\n                    ]\r\n                };\r\n            }\r\n            case RuleCall: {\r\n                return {\r\n                    name: RuleCall,\r\n                    properties: [\r\n                        { name: 'arguments', defaultValue: [] },\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalAlternatives: {\r\n                return {\r\n                    name: TerminalAlternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalGroup: {\r\n                return {\r\n                    name: TerminalGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRuleCall: {\r\n                return {\r\n                    name: TerminalRuleCall,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnorderedGroup: {\r\n                return {\r\n                    name: UnorderedGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case UntilToken: {\r\n                return {\r\n                    name: UntilToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case Wildcard: {\r\n                return {\r\n                    name: Wildcard,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    name: type,\r\n                    properties: []\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const reflection = new LangiumGrammarAstReflection();\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { assertUnreachable } from '../utils/errors.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { isCompositeCstNode } from '../syntax-tree.js';\r\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\r\nimport { streamCst } from './cst-utils.js';\r\nimport { escapeRegExp, isWhitespace } from './regexp-utils.js';\r\n\r\n/**\r\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\r\n * the result is `undefined`.\r\n */\r\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\r\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\r\n}\r\n\r\n/**\r\n * Returns all hidden terminal rules of the given grammar, if any.\r\n */\r\nexport function getHiddenRules(grammar: ast.Grammar) {\r\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\r\n}\r\n\r\n/**\r\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\r\n *\r\n * @param grammar The grammar that contains all rules\r\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\r\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\r\n *      this function returns all rules of the specified grammar.\r\n */\r\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\r\n    const ruleNames = new Set<string>();\r\n    const entryRule = getEntryRule(grammar);\r\n    if (!entryRule) {\r\n        return new Set(grammar.rules);\r\n    }\r\n\r\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\r\n    for (const rule of topMostRules) {\r\n        ruleDfs(rule, ruleNames, allTerminals);\r\n    }\r\n\r\n    const rules = new Set<ast.AbstractRule>();\r\n    for (const rule of grammar.rules) {\r\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\r\n            rules.add(rule);\r\n        }\r\n    }\r\n    return rules;\r\n}\r\n\r\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\r\n    visitedSet.add(rule.name);\r\n    streamAllContents(rule).forEach(node => {\r\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\r\n            const refRule = node.rule.ref;\r\n            if (refRule && !visitedSet.has(refRule.name)) {\r\n                ruleDfs(refRule, visitedSet, allTerminals);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\r\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\r\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\r\n *\r\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\r\n * and cannot be inferred.\r\n */\r\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\r\n    if (crossRef.terminal) {\r\n        return crossRef.terminal;\r\n    } else if (crossRef.type.ref) {\r\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\r\n        return nameAssigment?.terminal;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\r\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\r\n * that contains visible characters is considered a comment.\r\n */\r\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\r\n    return terminalRule.hidden && !isWhitespace(terminalRegex(terminalRule));\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that contribute to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\r\n */\r\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\r\n    if (!node || !property) {\r\n        return [];\r\n    }\r\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that contributes to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\r\n    if (!node || !property) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\r\n    if (!first) {\r\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\r\n        if (nodeFeature && nodeFeature.feature === property) {\r\n            return [node];\r\n        }\r\n    }\r\n    if (isCompositeCstNode(node) && node.astNode === element) {\r\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that correspond to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\r\n * @param keyword A keyword as specified in the grammar.\r\n */\r\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\r\n    if (!node) {\r\n        return [];\r\n    }\r\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that corresponds to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\r\n * @param keyword A keyword as specified in the grammar.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\r\n    if (node.astNode !== element) {\r\n        return [];\r\n    }\r\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\r\n        return [node];\r\n    }\r\n    const treeIterator = streamCst(node).iterator();\r\n    let result: IteratorResult<CstNode>;\r\n    const keywordNodes: CstNode[] = [];\r\n    do {\r\n        result = treeIterator.next();\r\n        if (!result.done) {\r\n            const childNode = result.value;\r\n            if (childNode.astNode === element) {\r\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\r\n                    keywordNodes.push(childNode);\r\n                }\r\n            } else {\r\n                treeIterator.prune();\r\n            }\r\n        }\r\n    } while (!result.done);\r\n    return keywordNodes;\r\n}\r\n\r\n/**\r\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\r\n * node is returned. If no assignment is found, the result is `undefined`.\r\n *\r\n * @param cstNode A CST node for which to find a property assignment.\r\n */\r\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\r\n    const astNode = cstNode.astNode;\r\n    // Only search until the ast node of the parent cst node is no longer the original ast node\r\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\r\n    while (astNode === cstNode.container?.astNode) {\r\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\r\n        if (assignment) {\r\n            return assignment;\r\n        }\r\n        cstNode = cstNode.container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\r\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\r\n * this function returns `undefined`.\r\n */\r\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\r\n    let startNode: AstNode = type;\r\n    if (ast.isInferredType(startNode)) {\r\n        // for inferred types, the location to start searching for the name-assignment is different\r\n        if (ast.isAction(startNode.$container)) {\r\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\r\n            startNode = startNode.$container.$container!;\r\n        } else if (ast.isParserRule(startNode.$container)) {\r\n            // investigate the parser rule with the explicitly inferred type\r\n            startNode = startNode.$container;\r\n        } else {\r\n            assertUnreachable(startNode.$container);\r\n        }\r\n    }\r\n    return findNameAssignmentInternal(type, startNode, new Map());\r\n}\r\n\r\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\r\n    // the cache is only required to prevent infinite loops\r\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\r\n        let childAssignment: ast.Assignment | undefined = undefined;\r\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\r\n        // No parent assignment implies unassigned rule call\r\n        if (!parentAssignment) {\r\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\r\n        }\r\n        cache.set(type, childAssignment);\r\n        return childAssignment;\r\n    }\r\n\r\n    if (cache.has(type)) {\r\n        return cache.get(type);\r\n    }\r\n    cache.set(type, undefined);\r\n    for (const node of streamAllContents(startNode)) {\r\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\r\n            cache.set(type, node);\r\n            return node;\r\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\r\n            return go(node, node.rule.ref);\r\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\r\n            return go(node, node.typeRef.ref);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\r\n    const parent = element.$container;\r\n    if (ast.isGroup(parent)) {\r\n        const elements = parent.elements;\r\n        const index = elements.indexOf(element);\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            const item = elements[i];\r\n            if (ast.isAction(item)) {\r\n                return item;\r\n            } else {\r\n                const action = streamAllContents(elements[i]).find(ast.isAction);\r\n                if (action) {\r\n                    return action;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ast.isAbstractElement(parent)) {\r\n        return getActionAtElement(parent);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type Cardinality = '?' | '*' | '+' | undefined;\r\nexport type Operator = '=' | '+=' | '?=' | undefined;\r\n\r\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\r\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\r\n}\r\n\r\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\r\n    return cardinality === '*' || cardinality === '+';\r\n}\r\n\r\nexport function isArrayOperator(operator?: Operator): boolean {\r\n    return operator === '+=';\r\n}\r\n\r\n/**\r\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\r\n * primitive return type like `number`, `boolean`, etc.\r\n */\r\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\r\n    return isDataTypeRuleInternal(rule, new Set());\r\n}\r\n\r\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\r\n    if (visited.has(rule)) {\r\n        return true;\r\n    } else {\r\n        visited.add(rule);\r\n    }\r\n    for (const node of streamAllContents(rule)) {\r\n        if (ast.isRuleCall(node)) {\r\n            if (!node.rule.ref) {\r\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\r\n                return false;\r\n            }\r\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\r\n                return false;\r\n            }\r\n        } else if (ast.isAssignment(node)) {\r\n            return false;\r\n        } else if (ast.isAction(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return Boolean(rule.definition);\r\n}\r\n\r\nexport function isDataType(type: ast.Type): boolean {\r\n    return isDataTypeInternal(type.type, new Set());\r\n}\r\n\r\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\r\n    if (visited.has(type)) {\r\n        return true;\r\n    } else {\r\n        visited.add(type);\r\n    }\r\n    if (ast.isArrayType(type)) {\r\n        return false;\r\n    } else if (ast.isReferenceType(type)) {\r\n        return false;\r\n    } else if (ast.isUnionType(type)) {\r\n        return type.types.every(e => isDataTypeInternal(e, visited));\r\n    } else if (ast.isSimpleType(type)) {\r\n        if (type.primitiveType !== undefined) {\r\n            return true;\r\n        } else if (type.stringType !== undefined) {\r\n            return true;\r\n        } else if (type.typeRef !== undefined) {\r\n            const ref = type.typeRef.ref;\r\n            if (ast.isType(ref)) {\r\n                return isDataTypeInternal(ref.type, visited);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\r\n    if (rule.inferredType) {\r\n        return rule.inferredType.name;\r\n    } else if (rule.dataType) {\r\n        return rule.dataType;\r\n    } else if (rule.returnType) {\r\n        const refType = rule.returnType.ref;\r\n        if (refType) {\r\n            // check if we need to check Action as return type\r\n            if (ast.isParserRule(refType)) {\r\n                return refType.name;\r\n            } else if (ast.isInterface(refType) || ast.isType(refType)) {\r\n                return refType.name;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\r\n    if (ast.isParserRule(type)) {\r\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\r\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\r\n        return type.name;\r\n    } else if (ast.isAction(type)) {\r\n        const actionType = getActionType(type);\r\n        if (actionType) {\r\n            return actionType;\r\n        }\r\n    } else if (ast.isInferredType(type)) {\r\n        return type.name;\r\n    }\r\n    throw new Error('Cannot get name of Unknown Type');\r\n}\r\n\r\nexport function getActionType(action: ast.Action): string | undefined {\r\n    if (action.inferredType) {\r\n        return action.inferredType.name;\r\n    } else if (action.type?.ref) {\r\n        return getTypeName(action.type.ref);\r\n    }\r\n    return undefined; // not inferring and not referencing a valid type\r\n}\r\n\r\n/**\r\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\r\n * For data type rules, the name of the rule is returned,\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\r\n * @param rule the given rule\r\n * @returns the name of the AST node type of the rule\r\n */\r\nexport function getRuleTypeName(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\n/**\r\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\r\n * For data type rules, the name of the declared return type of the rule is returned (if any),\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\r\n * @param rule the given rule\r\n * @returns the name of the type of the produced values of the rule at runtime\r\n */\r\nexport function getRuleType(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\r\n    const flags: Flags = {\r\n        s: false,\r\n        i: false,\r\n        u: false\r\n    };\r\n    const source = abstractElementToRegex(terminalRule.definition, flags);\r\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\r\n    return new RegExp(source, flagText);\r\n}\r\n\r\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\r\nconst WILDCARD = /[\\s\\S]/.source;\r\n\r\ntype Flags = {\r\n    s: boolean;\r\n    i: boolean;\r\n    u: boolean;\r\n}\r\n\r\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\r\n    if (ast.isTerminalAlternatives(element)) {\r\n        return terminalAlternativesToRegex(element);\r\n    } else if (ast.isTerminalGroup(element)) {\r\n        return terminalGroupToRegex(element);\r\n    } else if (ast.isCharacterRange(element)) {\r\n        return characterRangeToRegex(element);\r\n    } else if (ast.isTerminalRuleCall(element)) {\r\n        const rule = element.rule.ref;\r\n        if (!rule) {\r\n            throw new Error('Missing rule reference.');\r\n        }\r\n        return withCardinality(abstractElementToRegex(rule.definition), {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else if (ast.isNegatedToken(element)) {\r\n        return negateTokenToRegex(element);\r\n    } else if (ast.isUntilToken(element)) {\r\n        return untilTokenToRegex(element);\r\n    } else if (ast.isRegexToken(element)) {\r\n        const lastSlash = element.regex.lastIndexOf('/');\r\n        const source = element.regex.substring(1, lastSlash);\r\n        const regexFlags = element.regex.substring(lastSlash + 1);\r\n        if (flags) {\r\n            flags.i = regexFlags.includes('i');\r\n            flags.s = regexFlags.includes('s');\r\n            flags.u = regexFlags.includes('u');\r\n        }\r\n        return withCardinality(source, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead,\r\n            wrap: false\r\n        });\r\n    } else if (ast.isWildcard(element)) {\r\n        return withCardinality(WILDCARD, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else {\r\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\r\n    }\r\n}\r\n\r\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\r\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\r\n        cardinality: alternatives.cardinality,\r\n        lookahead: alternatives.lookahead\r\n    });\r\n}\r\n\r\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\r\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\r\n        cardinality: group.cardinality,\r\n        lookahead: group.lookahead\r\n    });\r\n}\r\n\r\nfunction untilTokenToRegex(until: ast.UntilToken): string {\r\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\r\n        cardinality: until.cardinality,\r\n        lookahead: until.lookahead\r\n    });\r\n}\r\n\r\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\r\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\r\n        cardinality: negate.cardinality,\r\n        lookahead: negate.lookahead\r\n    });\r\n}\r\n\r\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\r\n    if (range.right) {\r\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\r\n            cardinality: range.cardinality,\r\n            lookahead: range.lookahead,\r\n            wrap: false\r\n        });\r\n    }\r\n    return withCardinality(keywordToRegex(range.left), {\r\n        cardinality: range.cardinality,\r\n        lookahead: range.lookahead,\r\n        wrap: false\r\n    });\r\n}\r\n\r\nfunction keywordToRegex(keyword: ast.Keyword): string {\r\n    return escapeRegExp(keyword.value);\r\n}\r\n\r\nfunction withCardinality(regex: string, options: {\r\n    cardinality?: string\r\n    wrap?: boolean\r\n    lookahead?: string\r\n}): string {\r\n    if (options.wrap !== false || options.lookahead) {\r\n        regex = `(${options.lookahead ?? ''}${regex})`;\r\n    }\r\n    if (options.cardinality) {\r\n        return `${regex}${options.cardinality}`;\r\n    }\r\n    return regex;\r\n}\r\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\r\nimport type { Module } from '../dependency-injection.js';\r\nimport { inject } from '../dependency-injection.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\r\nimport type { Mutable } from '../syntax-tree.js';\r\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\r\nimport { URI } from './uri-utils.js';\r\n\r\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\r\n    Grammar: () => undefined as unknown as ast.Grammar,\r\n    LanguageMetaData: () => ({\r\n        caseInsensitive: false,\r\n        fileExtensions: ['.langium'],\r\n        languageId: 'langium'\r\n    })\r\n};\r\n\r\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\r\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\r\n};\r\n\r\nfunction createMinimalGrammarServices(): LangiumCoreServices {\r\n    const shared = inject(\r\n        createDefaultSharedCoreModule(EmptyFileSystem),\r\n        minimalSharedGrammarModule\r\n    );\r\n    const grammar = inject(\r\n        createDefaultCoreModule({ shared }),\r\n        minimalGrammarModule\r\n    );\r\n    shared.ServiceRegistry.register(grammar);\r\n    return grammar;\r\n}\r\n\r\n/**\r\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\r\n * most notably the parser builder which interprets the grammar to create a parser.\r\n */\r\nexport function loadGrammarFromJson(json: string): ast.Grammar {\r\n    const services = createMinimalGrammarServices();\r\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\r\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\r\n    return astNode;\r\n}\r\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Axis = \"Axis\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Common = \"Common\";\nfunction isCommon(item) {\n  return reflection.isInstance(item, Common);\n}\n__name(isCommon, \"isCommon\");\nvar Curve = \"Curve\";\nvar Edge = \"Edge\";\nvar Entry = \"Entry\";\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Group = \"Group\";\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Junction = \"Junction\";\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Option = \"Option\";\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Radar = \"Radar\";\nvar Service = \"Service\";\nvar Direction = \"Direction\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [Architecture, Axis, Branch, Checkout, CherryPicking, Commit, Common, Curve, Direction, Edge, Entry, GitGraph, Group, Info, Junction, Merge, Option, Packet, PacketBlock, Pie, PieSection, Radar, Service, Statement];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      case \"Entry:axis\": {\n        return Axis;\n      }\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case Architecture: {\n        return {\n          name: Architecture,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Axis: {\n        return {\n          name: Axis,\n          properties: [\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Branch: {\n        return {\n          name: Branch,\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case Checkout: {\n        return {\n          name: Checkout,\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case CherryPicking: {\n        return {\n          name: CherryPicking,\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case Commit: {\n        return {\n          name: Commit,\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Common: {\n        return {\n          name: Common,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Curve: {\n        return {\n          name: Curve,\n          properties: [\n            { name: \"entries\", defaultValue: [] },\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Edge: {\n        return {\n          name: Edge,\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Entry: {\n        return {\n          name: Entry,\n          properties: [\n            { name: \"axis\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case GitGraph: {\n        return {\n          name: GitGraph,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Group: {\n        return {\n          name: Group,\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Info: {\n        return {\n          name: Info,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Junction: {\n        return {\n          name: Junction,\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case Merge: {\n        return {\n          name: Merge,\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Option: {\n        return {\n          name: Option,\n          properties: [\n            { name: \"name\" },\n            { name: \"value\", defaultValue: false }\n          ]\n        };\n      }\n      case Packet: {\n        return {\n          name: Packet,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PacketBlock: {\n        return {\n          name: PacketBlock,\n          properties: [\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case Pie: {\n        return {\n          name: Pie,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PieSection: {\n        return {\n          name: PieSection,\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Radar: {\n        return {\n          name: Radar,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"axes\", defaultValue: [] },\n            { name: \"curves\", defaultValue: [] },\n            { name: \"options\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Service: {\n        return {\n          name: Service,\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Direction: {\n        return {\n          name: Direction,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Info\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Packet\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Pie\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_LABEL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]+\\\\\"/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_VALUE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/(0|[1-9][0-9]*)(\\\\\\\\.[0-9]+)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Architecture\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"LeftPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"RightPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Arrow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ID\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TEXT_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\(\\\\\"[^\\\\\"]+\\\\\"\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"rules\":[{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"GitGraph\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+(?=\\\\\\\\s)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\nvar loadedRadarGrammar;\nvar RadarGrammar = /* @__PURE__ */ __name(() => loadedRadarGrammar ?? (loadedRadarGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Radar\",\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Entry\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"axis\",\"isOptional\":true,\"type\":{\"$type\":\"ReferenceType\",\"referenceType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@12\"}}}},{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}],\"superTypes\":[]}],\"rules\":[{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Radar\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\"radar-beta:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"axis\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"curve\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Label\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"[\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"]\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Axis\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Curve\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\"{\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\"}\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Entries\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"DetailedEntry\",\"returnType\":{\"$ref\":\"#/interfaces@1\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"axis\",\"operator\":\"=\",\"terminal\":{\"$type\":\"CrossReference\",\"type\":{\"$ref\":\"#/rules@12\"},\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]},\"deprecatedSyntax\":false}},{\"$type\":\"Keyword\",\"value\":\":\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"NumberEntry\",\"returnType\":{\"$ref\":\"#/interfaces@1\"},\"definition\":{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Option\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showLegend\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"ticks\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"max\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"min\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"graticule\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/(0|[1-9][0-9]*)(\\\\\\\\.[0-9]+)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"GRATICULE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"circle\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"polygon\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[a-zA-Z_][a-zA-Z0-9\\\\\\\\-_]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[]}`)), \"RadarGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar RadarLanguageMetaData = {\n  languageId: \"radar\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar RadarGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => RadarGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => RadarLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  isCommon,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  Radar,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  RadarGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken, TokenType } from 'chevrotain';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AbstractElement } from '../languages/generated/ast.js';\r\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\r\nimport { Position } from 'vscode-languageserver-types';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\n\r\nexport class CstNodeBuilder {\r\n\r\n    private rootNode!: RootCstNodeImpl;\r\n    private nodeStack: CompositeCstNodeImpl[] = [];\r\n\r\n    get current(): CompositeCstNodeImpl {\r\n        return this.nodeStack[this.nodeStack.length - 1] ?? this.rootNode;\r\n    }\r\n\r\n    buildRootNode(input: string): RootCstNode {\r\n        this.rootNode = new RootCstNodeImpl(input);\r\n        this.rootNode.root = this.rootNode;\r\n        this.nodeStack = [this.rootNode];\r\n        return this.rootNode;\r\n    }\r\n\r\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\r\n        const compositeNode = new CompositeCstNodeImpl();\r\n        compositeNode.grammarSource = feature;\r\n        compositeNode.root = this.rootNode;\r\n        this.current.content.push(compositeNode);\r\n        this.nodeStack.push(compositeNode);\r\n        return compositeNode;\r\n    }\r\n\r\n    buildLeafNode(token: IToken, feature?: AbstractElement): LeafCstNode {\r\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, !feature);\r\n        leafNode.grammarSource = feature;\r\n        leafNode.root = this.rootNode;\r\n        this.current.content.push(leafNode);\r\n        return leafNode;\r\n    }\r\n\r\n    removeNode(node: CstNode): void {\r\n        const parent = node.container;\r\n        if (parent) {\r\n            const index = parent.content.indexOf(node);\r\n            if (index >= 0) {\r\n                parent.content.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    addHiddenNodes(tokens: IToken[]): void {\r\n        const nodes: LeafCstNode[] = [];\r\n        for (const token of tokens) {\r\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\r\n            leafNode.root = this.rootNode;\r\n            nodes.push(leafNode);\r\n        }\r\n        let current: CompositeCstNode = this.current;\r\n        let added = false;\r\n        // If we are within a composite node, we add the hidden nodes to the content\r\n        if (current.content.length > 0) {\r\n            current.content.push(...nodes);\r\n            return;\r\n        }\r\n        // Otherwise we are at a newly created node\r\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\r\n        while (current.container) {\r\n            const index = current.container.content.indexOf(current);\r\n            if (index > 0) {\r\n                // Add the hidden nodes before the current node\r\n                current.container.content.splice(index, 0, ...nodes);\r\n                added = true;\r\n                break;\r\n            }\r\n            current = current.container;\r\n        }\r\n        // If we arrive at the root node, we add the hidden nodes at the beginning\r\n        // This is the case if the hidden nodes are the first nodes in the tree\r\n        if (!added) {\r\n            this.rootNode.content.unshift(...nodes);\r\n        }\r\n    }\r\n\r\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\r\n        const current: CstNode = this.current;\r\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\r\n        // Only if the $type is a string, we actually assign the element\r\n        if (typeof item.$type === 'string') {\r\n            this.current.astNode = <AstNode>item;\r\n        }\r\n        item.$cstNode = current;\r\n        const node = this.nodeStack.pop();\r\n        // Empty composite nodes are not valid\r\n        // Simply remove the node from the tree\r\n        if (node?.content.length === 0) {\r\n            this.removeNode(node);\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class AbstractCstNode implements CstNode {\r\n    abstract get offset(): number;\r\n    abstract get length(): number;\r\n    abstract get end(): number;\r\n    abstract get range(): Range;\r\n\r\n    container?: CompositeCstNode;\r\n    grammarSource?: AbstractElement;\r\n    root: RootCstNode;\r\n    private _astNode?: AstNode;\r\n\r\n    /** @deprecated use `container` instead. */\r\n    get parent(): CompositeCstNode | undefined {\r\n        return this.container;\r\n    }\r\n\r\n    /** @deprecated use `grammarSource` instead. */\r\n    get feature(): AbstractElement | undefined {\r\n        return this.grammarSource;\r\n    }\r\n\r\n    get hidden(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get astNode(): AstNode {\r\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\r\n        if (!node) {\r\n            throw new Error('This node has no associated AST element');\r\n        }\r\n        return node;\r\n    }\r\n\r\n    set astNode(value: AstNode | undefined) {\r\n        this._astNode = value;\r\n    }\r\n\r\n    /** @deprecated use `astNode` instead. */\r\n    get element(): AstNode {\r\n        return this.astNode;\r\n    }\r\n\r\n    get text(): string {\r\n        return this.root.fullText.substring(this.offset, this.end);\r\n    }\r\n}\r\n\r\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\r\n    get offset(): number {\r\n        return this._offset;\r\n    }\r\n\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    get end(): number {\r\n        return this._offset + this._length;\r\n    }\r\n\r\n    override get hidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    get tokenType(): TokenType {\r\n        return this._tokenType;\r\n    }\r\n\r\n    get range(): Range {\r\n        return this._range;\r\n    }\r\n\r\n    private _hidden: boolean;\r\n    private _offset: number;\r\n    private _length: number;\r\n    private _range: Range;\r\n    private _tokenType: TokenType;\r\n\r\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\r\n        super();\r\n        this._hidden = hidden;\r\n        this._offset = offset;\r\n        this._tokenType = tokenType;\r\n        this._length = length;\r\n        this._range = range;\r\n    }\r\n}\r\n\r\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\r\n    readonly content: CstNode[] = new CstNodeContainer(this);\r\n    private _rangeCache?: Range;\r\n\r\n    /** @deprecated use `content` instead. */\r\n    get children(): CstNode[] {\r\n        return this.content;\r\n    }\r\n\r\n    get offset(): number {\r\n        return this.firstNonHiddenNode?.offset ?? 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.end - this.offset;\r\n    }\r\n\r\n    get end(): number {\r\n        return this.lastNonHiddenNode?.end ?? 0;\r\n    }\r\n\r\n    get range(): Range {\r\n        const firstNode = this.firstNonHiddenNode;\r\n        const lastNode = this.lastNonHiddenNode;\r\n        if (firstNode && lastNode) {\r\n            if (this._rangeCache === undefined) {\r\n                const { range: firstRange } = firstNode;\r\n                const { range: lastRange } = lastNode;\r\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\r\n            }\r\n            return this._rangeCache;\r\n        } else {\r\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\r\n        }\r\n    }\r\n\r\n    private get firstNonHiddenNode(): CstNode | undefined {\r\n        for (const child of this.content) {\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[0];\r\n    }\r\n\r\n    private get lastNonHiddenNode(): CstNode | undefined {\r\n        for (let i = this.content.length - 1; i >= 0; i--) {\r\n            const child = this.content[i];\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[this.content.length - 1];\r\n    }\r\n}\r\n\r\nclass CstNodeContainer extends Array<CstNode> {\r\n    readonly parent: CompositeCstNode;\r\n\r\n    constructor(parent: CompositeCstNode) {\r\n        super();\r\n        this.parent = parent;\r\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\r\n    }\r\n\r\n    override push(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.push(...items);\r\n    }\r\n\r\n    override unshift(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.unshift(...items);\r\n    }\r\n\r\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\r\n        this.addParents(items);\r\n        return super.splice(start, count, ...items);\r\n    }\r\n\r\n    private addParents(items: CstNode[]): void {\r\n        for (const item of items) {\r\n            (<AbstractCstNode>item).container = this.parent;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\r\n    private _text = '';\r\n\r\n    override get text(): string {\r\n        return this._text.substring(this.offset, this.end);\r\n    }\r\n\r\n    get fullText(): string {\r\n        return this._text;\r\n    }\r\n\r\n    constructor(input?: string) {\r\n        super();\r\n        this._text = input ?? '';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\r\nimport type { Lexer, LexerResult } from './lexer.js';\r\nimport type { IParserConfig } from './parser-config.js';\r\nimport type { ValueConverter } from './value-converter.js';\r\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\r\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\r\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\r\nimport { getExplicitRuleType, isDataTypeRule } from '../utils/grammar-utils.js';\r\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\r\nimport { CstNodeBuilder } from './cst-node-builder.js';\r\nimport type { LexingReport } from './token-builder.js';\r\n\r\nexport type ParseResult<T = AstNode> = {\r\n    value: T,\r\n    parserErrors: IRecognitionException[],\r\n    lexerErrors: ILexingError[],\r\n    lexerReport?: LexingReport\r\n}\r\n\r\nexport const DatatypeSymbol = Symbol('Datatype');\r\n\r\ninterface DataTypeNode {\r\n    $cstNode: CompositeCstNode\r\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\r\n    $type: symbol\r\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\r\n    value: string\r\n}\r\n\r\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\r\n    return node.$type === DatatypeSymbol;\r\n}\r\n\r\ntype RuleResult = (args: Args) => any;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype RuleImpl = (args: Args) => any;\r\n\r\ninterface AssignmentElement {\r\n    assignment?: Assignment\r\n    isCrossRef: boolean\r\n}\r\n\r\n/**\r\n * Base interface for all parsers. Mainly used by the `parser-builder-base.ts` to perform work on different kinds of parsers.\r\n * The main use cases are:\r\n * * AST parser: Based on a string, create an AST for the current grammar\r\n * * Completion parser: Based on a partial string, identify the current position of the input within the grammar\r\n */\r\nexport interface BaseParser {\r\n    /**\r\n     * Adds a new parser rule to the parser\r\n     */\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    /**\r\n     * Returns the executable rule function for the specified rule name\r\n     */\r\n    getRule(name: string): RuleResult | undefined;\r\n    /**\r\n     * Performs alternatives parsing (the `|` operation in EBNF/Langium)\r\n     */\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\r\n    /**\r\n     * Parses the callback as optional (the `?` operation in EBNF/Langium)\r\n     */\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 0 or more times (the `*` operation in EBNF/Langium)\r\n     */\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 1 or more times (the `+` operation in EBNF/Langium)\r\n     */\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Consumes a specific token type from the token input stream.\r\n     * Requires a unique index within the rule for a specific token type.\r\n     */\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    /**\r\n     * Invokes the executable function for a given parser rule.\r\n     * Requires a unique index within the rule for a specific sub rule.\r\n     * Arguments can be supplied to the rule invocation for semantic predicates\r\n     */\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    /**\r\n     * Executes a grammar action that modifies the currently active AST node\r\n     */\r\n    action($type: string, action: Action): void;\r\n    /**\r\n     * Finishes construction of the current AST node. Only used by the AST parser.\r\n     */\r\n    construct(): unknown;\r\n    /**\r\n     * Whether the parser is currently actually in use or in \"recording mode\".\r\n     * Recording mode is activated once when the parser is analyzing itself.\r\n     * During this phase, no input exists and therefore no AST should be constructed\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Current state of the unordered groups\r\n     */\r\n    get unorderedGroups(): Map<string, boolean[]>;\r\n    /**\r\n     * The rule stack indicates the indices of rules that are currently invoked,\r\n     * in order of their invocation.\r\n     */\r\n    getRuleStack(): number[];\r\n}\r\n\r\nconst ruleSuffix = '\\u200B';\r\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\r\n\r\nexport abstract class AbstractLangiumParser implements BaseParser {\r\n\r\n    protected readonly lexer: Lexer;\r\n    protected readonly wrapper: ChevrotainWrapper;\r\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\r\n\r\n    protected allRules = new Map<string, RuleResult>();\r\n    protected mainRule!: RuleResult;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.lexer = services.parser.Lexer;\r\n        const tokens = this.lexer.definition;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.wrapper = new ChevrotainWrapper(tokens, {\r\n            ...services.parser.ParserConfig,\r\n            skipValidations: production,\r\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\r\n        });\r\n    }\r\n\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.wrapper.wrapOr(idx, choices);\r\n    }\r\n\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapOption(idx, callback);\r\n    }\r\n\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapMany(idx, callback);\r\n    }\r\n\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapAtLeastOne(idx, callback);\r\n    }\r\n\r\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    abstract subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    abstract action($type: string, action: Action): void;\r\n    abstract construct(): unknown;\r\n\r\n    getRule(name: string): RuleResult | undefined {\r\n        return this.allRules.get(name);\r\n    }\r\n\r\n    isRecording(): boolean {\r\n        return this.wrapper.IS_RECORDING;\r\n    }\r\n\r\n    get unorderedGroups(): Map<string, boolean[]> {\r\n        return this._unorderedGroups;\r\n    }\r\n\r\n    getRuleStack(): number[] {\r\n        return (this.wrapper as any).RULE_STACK;\r\n    }\r\n\r\n    finalize(): void {\r\n        this.wrapper.wrapSelfAnalysis();\r\n    }\r\n}\r\n\r\nexport interface ParserOptions {\r\n    rule?: string\r\n}\r\n\r\nexport class LangiumParser extends AbstractLangiumParser {\r\n    private readonly linker: Linker;\r\n    private readonly converter: ValueConverter;\r\n    private readonly astReflection: AstReflection;\r\n    private readonly nodeBuilder = new CstNodeBuilder();\r\n    private lexerResult?: LexerResult;\r\n    private stack: any[] = [];\r\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\r\n\r\n    private get current(): any {\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        super(services);\r\n        this.linker = services.references.Linker;\r\n        this.converter = services.parser.ValueConverter;\r\n        this.astReflection = services.shared.AstReflection;\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const type = this.computeRuleType(rule);\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private computeRuleType(rule: ParserRule): string | symbol | undefined {\r\n        if (rule.fragment) {\r\n            return undefined;\r\n        } else if (isDataTypeRule(rule)) {\r\n            return DatatypeSymbol;\r\n        } else {\r\n            const explicit = getExplicitRuleType(rule);\r\n            return explicit ?? rule.name;\r\n        }\r\n    }\r\n\r\n    parse<T extends AstNode = AstNode>(input: string, options: ParserOptions = {}): ParseResult<T> {\r\n        this.nodeBuilder.buildRootNode(input);\r\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\r\n        this.wrapper.input = lexerResult.tokens;\r\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\r\n        if (!ruleMethod) {\r\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\r\n        }\r\n        const result = ruleMethod.call(this.wrapper, {});\r\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\r\n        this.unorderedGroups.clear();\r\n        this.lexerResult = undefined;\r\n        return {\r\n            value: result,\r\n            lexerErrors: lexerResult.errors,\r\n            lexerReport: lexerResult.report,\r\n            parserErrors: this.wrapper.errors\r\n        };\r\n    }\r\n\r\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            // Only create a new AST node in case the calling rule is not a fragment rule\r\n            const createNode = !this.isRecording() && $type !== undefined;\r\n            if (createNode) {\r\n                const node: any = { $type };\r\n                this.stack.push(node);\r\n                if ($type === DatatypeSymbol) {\r\n                    node.value = '';\r\n                }\r\n            }\r\n            let result: unknown;\r\n            try {\r\n                result = implementation(args);\r\n            } catch (err) {\r\n                result = undefined;\r\n            }\r\n            if (result === undefined && createNode) {\r\n                result = this.construct();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    private extractHiddenTokens(token: IToken): IToken[] {\r\n        const hiddenTokens = this.lexerResult!.hidden;\r\n        if (!hiddenTokens.length) {\r\n            return [];\r\n        }\r\n        const offset = token.startOffset;\r\n        for (let i = 0; i < hiddenTokens.length; i++) {\r\n            const token = hiddenTokens[i];\r\n            if (token.startOffset > offset) {\r\n                return hiddenTokens.splice(0, i);\r\n            }\r\n        }\r\n        return hiddenTokens.splice(0, hiddenTokens.length);\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        const token = this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording() && this.isValidToken(token)) {\r\n            const hiddenTokens = this.extractHiddenTokens(token);\r\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\r\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\r\n            const { assignment, isCrossRef } = this.getAssignment(feature);\r\n            const current = this.current;\r\n            if (assignment) {\r\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\r\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\r\n            } else if (isDataTypeNode(current)) {\r\n                let text = token.image;\r\n                if (!isKeyword(feature)) {\r\n                    text = this.converter.convert(text, leafNode).toString();\r\n                }\r\n                current.value += text;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\r\n     *\r\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\r\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\r\n     */\r\n    private isValidToken(token: IToken): boolean {\r\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        let cstNode: CompositeCstNode | undefined;\r\n        if (!this.isRecording() && !fragment) {\r\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\r\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\r\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\r\n            // This is intended, as fragment rules only enrich the current AST node\r\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\r\n        }\r\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\r\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\r\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\r\n        }\r\n    }\r\n\r\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\r\n        const { assignment, isCrossRef } = this.getAssignment(feature);\r\n        if (assignment) {\r\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\r\n        } else if (!assignment) {\r\n            // If we call a subrule without an assignment we either:\r\n            // 1. append the result of the subrule (data type rule)\r\n            // 2. override the current object with the newly parsed object\r\n            // If the current element is an AST node and the result of the subrule\r\n            // is a data type rule, we can safely discard the results.\r\n            const current = this.current;\r\n            if (isDataTypeNode(current)) {\r\n                current.value += result.toString();\r\n            } else if (typeof result === 'object' && result) {\r\n                const object = this.assignWithoutOverride(result, current);\r\n                const newItem = object;\r\n                this.stack.pop();\r\n                this.stack.push(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    action($type: string, action: Action): void {\r\n        if (!this.isRecording()) {\r\n            let last = this.current;\r\n            if (action.feature && action.operator) {\r\n                last = this.construct();\r\n                this.nodeBuilder.removeNode(last.$cstNode);\r\n                const node = this.nodeBuilder.buildCompositeNode(action);\r\n                node.content.push(last.$cstNode);\r\n                const newItem = { $type };\r\n                this.stack.push(newItem);\r\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\r\n            } else {\r\n                last.$type = $type;\r\n            }\r\n        }\r\n    }\r\n\r\n    construct(): unknown {\r\n        if (this.isRecording()) {\r\n            return undefined;\r\n        }\r\n        const obj = this.current;\r\n        linkContentToContainer(obj);\r\n        this.nodeBuilder.construct(obj);\r\n        this.stack.pop();\r\n        if (isDataTypeNode(obj)) {\r\n            return this.converter.convert(obj.value, obj.$cstNode);\r\n        } else {\r\n            assignMandatoryProperties(this.astReflection, obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private getAssignment(feature: AbstractElement): AssignmentElement {\r\n        if (!this.assignmentMap.has(feature)) {\r\n            const assignment = getContainerOfType(feature, isAssignment);\r\n            this.assignmentMap.set(feature, {\r\n                assignment: assignment,\r\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\r\n            });\r\n        }\r\n        return this.assignmentMap.get(feature)!;\r\n    }\r\n\r\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\r\n        const obj = this.current;\r\n        let item: unknown;\r\n        if (isCrossRef && typeof value === 'string') {\r\n            item = this.linker.buildReference(obj, feature, cstNode, value);\r\n        } else {\r\n            item = value;\r\n        }\r\n        switch (operator) {\r\n            case '=': {\r\n                obj[feature] = item;\r\n                break;\r\n            }\r\n            case '?=': {\r\n                obj[feature] = true;\r\n                break;\r\n            }\r\n            case '+=': {\r\n                if (!Array.isArray(obj[feature])) {\r\n                    obj[feature] = [];\r\n                }\r\n                obj[feature].push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignWithoutOverride(target: any, source: any): any {\r\n        for (const [name, existingValue] of Object.entries(source)) {\r\n            const newValue = target[name];\r\n            if (newValue === undefined) {\r\n                target[name] = existingValue;\r\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\r\n                existingValue.push(...newValue);\r\n                target[name] = existingValue;\r\n            }\r\n        }\r\n        // The target was parsed from a unassigned subrule\r\n        // After the subrule construction, it received a cst node\r\n        // This CST node will later be overriden by the cst node builder\r\n        // To prevent references to stale AST nodes in the CST,\r\n        // we need to remove the reference here\r\n        const targetCstNode = target.$cstNode;\r\n        if (targetCstNode) {\r\n            targetCstNode.astNode = undefined;\r\n            target.$cstNode = undefined;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    get definitionErrors(): IParserDefinitionError[] {\r\n        return this.wrapper.definitionErrors;\r\n    }\r\n}\r\n\r\nexport interface IParserDefinitionError {\r\n    message: string\r\n    type: number\r\n    ruleName?: string\r\n}\r\n\r\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\r\n\r\n    buildMismatchTokenMessage(options: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\r\n    }\r\n\r\n    buildNotAllInputParsedMessage(options: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\r\n    }\r\n\r\n    buildNoViableAltMessage(options: {\r\n        expectedPathsPerAlt: TokenType[][][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\r\n    }\r\n\r\n    buildEarlyExitMessage(options: {\r\n        expectedIterationPaths: TokenType[][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\r\n    }\r\n\r\n}\r\n\r\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\r\n\r\n    override buildMismatchTokenMessage({ expected, actual }: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        const expectedMsg = expected.LABEL\r\n            ? '`' + expected.LABEL + '`'\r\n            : expected.name.endsWith(':KW')\r\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\r\n                : `token of type '${expected.name}'`;\r\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\r\n    }\r\n\r\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\r\n    }\r\n}\r\n\r\nexport interface CompletionParserResult {\r\n    tokens: IToken[]\r\n    elementStack: AbstractElement[]\r\n    tokenIndex: number\r\n}\r\n\r\nexport class LangiumCompletionParser extends AbstractLangiumParser {\r\n    private tokens: IToken[] = [];\r\n\r\n    private elementStack: AbstractElement[] = [];\r\n    private lastElementStack: AbstractElement[] = [];\r\n    private nextTokenIndex = 0;\r\n    private stackSize = 0;\r\n\r\n    action(): void {\r\n        // NOOP\r\n    }\r\n\r\n    construct(): unknown {\r\n        // NOOP\r\n        return undefined;\r\n    }\r\n\r\n    parse(input: string): CompletionParserResult {\r\n        this.resetState();\r\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\r\n        this.tokens = tokens.tokens;\r\n        this.wrapper.input = [...this.tokens];\r\n        this.mainRule.call(this.wrapper, {});\r\n        this.unorderedGroups.clear();\r\n        return {\r\n            tokens: this.tokens,\r\n            elementStack: [...this.lastElementStack],\r\n            tokenIndex: this.nextTokenIndex\r\n        };\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private resetState(): void {\r\n        this.elementStack = [];\r\n        this.lastElementStack = [];\r\n        this.nextTokenIndex = 0;\r\n        this.stackSize = 0;\r\n    }\r\n\r\n    private startImplementation(implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            const size = this.keepStackSize();\r\n            try {\r\n                implementation(args);\r\n            } finally {\r\n                this.resetStackSize(size);\r\n            }\r\n        };\r\n    }\r\n\r\n    private removeUnexpectedElements(): void {\r\n        this.elementStack.splice(this.stackSize);\r\n    }\r\n\r\n    keepStackSize(): number {\r\n        const size = this.elementStack.length;\r\n        this.stackSize = size;\r\n        return size;\r\n    }\r\n\r\n    resetStackSize(size: number): void {\r\n        this.removeUnexpectedElements();\r\n        this.stackSize = size;\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording()) {\r\n            this.lastElementStack = [...this.elementStack, feature];\r\n            this.nextTokenIndex = this.currIdx + 1;\r\n        }\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        this.before(feature);\r\n        this.wrapper.wrapSubrule(idx, rule, args);\r\n        this.after(feature);\r\n    }\r\n\r\n    before(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            this.elementStack.push(element);\r\n        }\r\n    }\r\n\r\n    after(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            const index = this.elementStack.lastIndexOf(element);\r\n            if (index >= 0) {\r\n                this.elementStack.splice(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    get currIdx(): number {\r\n        return (this.wrapper as any).currIdx;\r\n    }\r\n}\r\n\r\nconst defaultConfig: IParserConfig = {\r\n    recoveryEnabled: true,\r\n    nodeLocationTracking: 'full',\r\n    skipValidations: true,\r\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\r\n};\r\n\r\n/**\r\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\r\n * This way, we can build the `LangiumParser` as a composition.\r\n */\r\nclass ChevrotainWrapper extends EmbeddedActionsParser {\r\n\r\n    // This array is set in the base implementation of Chevrotain.\r\n    definitionErrors: IParserDefinitionError[];\r\n\r\n    constructor(tokens: TokenVocabulary, config: IParserConfig) {\r\n        const useDefaultLookahead = config && 'maxLookahead' in config;\r\n        super(tokens, {\r\n            ...defaultConfig,\r\n            lookaheadStrategy: useDefaultLookahead\r\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\r\n                : new LLStarLookaheadStrategy({\r\n                    // If validations are skipped, don't log the lookahead warnings\r\n                    logging: config.skipValidations ? () => { } : undefined\r\n                }),\r\n            ...config,\r\n        });\r\n    }\r\n\r\n    get IS_RECORDING(): boolean {\r\n        return this.RECORDING_PHASE;\r\n    }\r\n\r\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\r\n        return this.RULE(name, impl);\r\n    }\r\n\r\n    wrapSelfAnalysis(): void {\r\n        this.performSelfAnalysis();\r\n    }\r\n\r\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\r\n        return this.consume(idx, tokenType);\r\n    }\r\n\r\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\r\n        return this.subrule(idx, rule, {\r\n            ARGS: [args]\r\n        });\r\n    }\r\n\r\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.or(idx, choices);\r\n    }\r\n\r\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.option(idx, callback);\r\n    }\r\n\r\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.many(idx, callback);\r\n    }\r\n\r\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.atLeastOne(idx, callback);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\r\nimport type { BaseParser } from './langium-parser.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { Cardinality } from '../utils/grammar-utils.js';\r\nimport { EMPTY_ALT, EOF } from 'chevrotain';\r\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\r\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\r\n\r\ntype RuleContext = {\r\n    optional: number,\r\n    consume: number,\r\n    subrule: number,\r\n    many: number,\r\n    or: number\r\n} & ParserContext;\r\n\r\ntype ParserContext = {\r\n    parser: BaseParser\r\n    tokens: TokenTypeDictionary\r\n    ruleNames: Map<AstNode, string>\r\n}\r\n\r\ntype Rule = (args: Args) => unknown;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype Predicate = (args: Args) => boolean;\r\n\r\ntype Method = (args: Args) => void;\r\n\r\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\r\n    const parserContext: ParserContext = {\r\n        parser,\r\n        tokens,\r\n        ruleNames: new Map()\r\n    };\r\n    buildRules(parserContext, grammar);\r\n    return parser;\r\n}\r\n\r\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\r\n    const reachable = getAllReachableRules(grammar, false);\r\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\r\n    for (const rule of parserRules) {\r\n        const ctx: RuleContext = {\r\n            ...parserContext,\r\n            consume: 1,\r\n            optional: 1,\r\n            subrule: 1,\r\n            many: 1,\r\n            or: 1\r\n        };\r\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\r\n    }\r\n}\r\n\r\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\r\n    let method: Method;\r\n    if (isKeyword(element)) {\r\n        method = buildKeyword(ctx, element);\r\n    } else if (isAction(element)) {\r\n        method = buildAction(ctx, element);\r\n    } else if (isAssignment(element)) {\r\n        method = buildElement(ctx, element.terminal);\r\n    } else if (isCrossReference(element)) {\r\n        method = buildCrossReference(ctx, element);\r\n    } else if (isRuleCall(element)) {\r\n        method = buildRuleCall(ctx, element);\r\n    } else if (isAlternatives(element)) {\r\n        method = buildAlternatives(ctx, element);\r\n    } else if (isUnorderedGroup(element)) {\r\n        method = buildUnorderedGroup(ctx, element);\r\n    } else if (isGroup(element)) {\r\n        method = buildGroup(ctx, element);\r\n    } else if(isEndOfFile(element)) {\r\n        const idx = ctx.consume++;\r\n        method = () => ctx.parser.consume(idx, EOF, element);\r\n    } else {\r\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\r\n    }\r\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\r\n}\r\n\r\nfunction buildAction(ctx: RuleContext, action: Action): Method {\r\n    const actionType = getTypeName(action);\r\n    return () => ctx.parser.action(actionType, action);\r\n}\r\n\r\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\r\n    const rule = ruleCall.rule.ref;\r\n    if (isParserRule(rule)) {\r\n        const idx = ctx.subrule++;\r\n        const fragment = rule.fragment;\r\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\r\n    } else if (isTerminalRule(rule)) {\r\n        const idx = ctx.consume++;\r\n        const method = getToken(ctx, rule.name);\r\n        return () => ctx.parser.consume(idx, method, ruleCall);\r\n    } else if (!rule) {\r\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\r\n    } else {\r\n        assertUnreachable(rule);\r\n    }\r\n}\r\n\r\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\r\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\r\n    return (args) => {\r\n        const ruleArgs: Args = {};\r\n        for (let i = 0; i < predicates.length; i++) {\r\n            const ruleTarget = rule.parameters[i];\r\n            const predicate = predicates[i];\r\n            ruleArgs[ruleTarget.name] = predicate(args);\r\n        }\r\n        return ruleArgs;\r\n    };\r\n}\r\n\r\ninterface PredicatedMethod {\r\n    ALT: Method,\r\n    GATE?: Predicate\r\n}\r\n\r\nfunction buildPredicate(condition: Condition): Predicate {\r\n    if (isDisjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) || right(args));\r\n    } else if (isConjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) && right(args));\r\n    } else if (isNegation(condition)) {\r\n        const value = buildPredicate(condition.value);\r\n        return (args) => !value(args);\r\n    } else if (isParameterReference(condition)) {\r\n        const name = condition.parameter.ref!.name;\r\n        return (args) => args !== undefined && args[name] === true;\r\n    } else if (isBooleanLiteral(condition)) {\r\n        const value = Boolean(condition.true);\r\n        return () => value;\r\n    }\r\n    assertUnreachable(condition);\r\n}\r\n\r\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\r\n    if (alternatives.elements.length === 1) {\r\n        return buildElement(ctx, alternatives.elements[0]);\r\n    } else {\r\n        const methods: PredicatedMethod[] = [];\r\n\r\n        for (const element of alternatives.elements) {\r\n            const predicatedMethod: PredicatedMethod = {\r\n                // Since we handle the guard condition in the alternative already\r\n                // We can ignore the group guard condition inside\r\n                ALT: buildElement(ctx, element, true)\r\n            };\r\n            const guard = getGuardCondition(element);\r\n            if (guard) {\r\n                predicatedMethod.GATE = buildPredicate(guard);\r\n            }\r\n            methods.push(predicatedMethod);\r\n        }\r\n\r\n        const idx = ctx.or++;\r\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\r\n            const alt: IOrAlt<unknown> = {\r\n                ALT: () => method.ALT(args)\r\n            };\r\n            const gate = method.GATE;\r\n            if (gate) {\r\n                alt.GATE = () => gate(args);\r\n            }\r\n            return alt;\r\n        }));\r\n    }\r\n}\r\n\r\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\r\n    if (group.elements.length === 1) {\r\n        return buildElement(ctx, group.elements[0]);\r\n    }\r\n    const methods: PredicatedMethod[] = [];\r\n\r\n    for (const element of group.elements) {\r\n        const predicatedMethod: PredicatedMethod = {\r\n            // Since we handle the guard condition in the alternative already\r\n            // We can ignore the group guard condition inside\r\n            ALT: buildElement(ctx, element, true)\r\n        };\r\n        const guard = getGuardCondition(element);\r\n        if (guard) {\r\n            predicatedMethod.GATE = buildPredicate(guard);\r\n        }\r\n        methods.push(predicatedMethod);\r\n    }\r\n\r\n    const orIdx = ctx.or++;\r\n\r\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\r\n        const stackId = lParser.getRuleStack().join('-');\r\n        return `uGroup_${groupIdx}_${stackId}`;\r\n    };\r\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\r\n        const alt: IOrAlt<unknown> = { ALT: () => true };\r\n        const parser = ctx.parser;\r\n        alt.ALT = () => {\r\n            method.ALT(args);\r\n            if (!parser.isRecording()) {\r\n                const key = idFunc(orIdx, parser);\r\n                if (!parser.unorderedGroups.get(key)) {\r\n                    // init after clear state\r\n                    parser.unorderedGroups.set(key, []);\r\n                }\r\n                const groupState = parser.unorderedGroups.get(key)!;\r\n                if (typeof groupState?.[idx] === 'undefined') {\r\n                    // Not accessed yet\r\n                    groupState[idx] = true;\r\n                }\r\n            }\r\n        };\r\n        const gate = method.GATE;\r\n        if (gate) {\r\n            alt.GATE = () => gate(args);\r\n        } else {\r\n            alt.GATE = () => {\r\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\r\n                const allow = !trackedAlternatives?.[idx];\r\n                return allow;\r\n            };\r\n        }\r\n        return alt;\r\n    }));\r\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\r\n    return (args) => {\r\n        wrapped(args);\r\n        if (!ctx.parser.isRecording()) {\r\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\r\n        }\r\n    };\r\n}\r\n\r\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\r\n    const methods = group.elements.map(e => buildElement(ctx, e));\r\n    return (args) => methods.forEach(method => method(args));\r\n}\r\n\r\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\r\n    if (isGroup(element)) {\r\n        return element.guardCondition;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\r\n    if (!terminal) {\r\n        if (!crossRef.type.ref) {\r\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\r\n        }\r\n        const assignment = findNameAssignment(crossRef.type.ref);\r\n        const assignTerminal = assignment?.terminal;\r\n        if (!assignTerminal) {\r\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\r\n        }\r\n        return buildCrossReference(ctx, crossRef, assignTerminal);\r\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\r\n        // The terminal is a data type rule here. Everything else will result in a validation error.\r\n        const rule = terminal.rule.ref;\r\n        const idx = ctx.subrule++;\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\r\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\r\n        const idx = ctx.consume++;\r\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\r\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\r\n    } else if (isKeyword(terminal)) {\r\n        const idx = ctx.consume++;\r\n        const keyword = getToken(ctx, terminal.value);\r\n        return () => ctx.parser.consume(idx, keyword, crossRef);\r\n    }\r\n    else {\r\n        throw new Error('Could not build cross reference parser');\r\n    }\r\n}\r\n\r\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\r\n    const idx = ctx.consume++;\r\n    const token = ctx.tokens[keyword.value];\r\n    if (!token) {\r\n        throw new Error('Could not find token for keyword: ' + keyword.value);\r\n    }\r\n    return () => ctx.parser.consume(idx, token, keyword);\r\n}\r\n\r\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\r\n    const gate = guard && buildPredicate(guard);\r\n\r\n    if (!cardinality) {\r\n        if (gate) {\r\n            const idx = ctx.or++;\r\n            return (args) => ctx.parser.alternatives(idx, [\r\n                {\r\n                    ALT: () => method(args),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return method;\r\n        }\r\n    }\r\n\r\n    if (cardinality === '*') {\r\n        const idx = ctx.many++;\r\n        return (args) => ctx.parser.many(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else if (cardinality === '+') {\r\n        const idx = ctx.many++;\r\n        if (gate) {\r\n            const orIdx = ctx.or++;\r\n            // In the case of a guard condition for the `+` group\r\n            // We combine it with an empty alternative\r\n            // If the condition returns true, it needs to parse at least a single iteration\r\n            // If its false, it is not allowed to parse anything\r\n            return (args) => ctx.parser.alternatives(orIdx, [\r\n                {\r\n                    ALT: () => ctx.parser.atLeastOne(idx, {\r\n                        DEF: () => method(args)\r\n                    }),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return (args) => ctx.parser.atLeastOne(idx, {\r\n                DEF: () => method(args),\r\n            });\r\n        }\r\n    } else if (cardinality === '?') {\r\n        const idx = ctx.optional++;\r\n        return (args) => ctx.parser.optional(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else {\r\n        assertUnreachable(cardinality);\r\n    }\r\n}\r\n\r\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\r\n    const name = getRuleName(ctx, element);\r\n    const rule = ctx.parser.getRule(name);\r\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\r\n    return rule;\r\n}\r\n\r\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\r\n    if (isParserRule(element)) {\r\n        return element.name;\r\n    } else if (ctx.ruleNames.has(element)) {\r\n        return ctx.ruleNames.get(element)!;\r\n    } else {\r\n        let item: AstNode = element;\r\n        let parent: AstNode = item.$container!;\r\n        let ruleName: string = element.$type;\r\n        while (!isParserRule(parent)) {\r\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\r\n                const index = parent.elements.indexOf(item as AbstractElement);\r\n                ruleName = index.toString() + ':' + ruleName;\r\n            }\r\n            item = parent;\r\n            parent = parent.$container!;\r\n        }\r\n        const rule = parent as ParserRule;\r\n        ruleName = rule.name + ':' + ruleName;\r\n        ctx.ruleNames.set(element, ruleName);\r\n        return ruleName;\r\n    }\r\n}\r\n\r\nfunction getToken(ctx: ParserContext, name: string): TokenType {\r\n    const token = ctx.tokens[name];\r\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\r\n    return token;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\n/**\r\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\r\n * available at `services.Grammar`.\r\n */\r\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const parser = prepareLangiumParser(services);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n\r\n/**\r\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\r\n * information when the parser is initially validated.\r\n */\r\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumParser(services);\r\n    return createParser(grammar, parser, lexer.definition);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\r\n\r\nexport type MaybePromise<T> = T | Promise<T>\r\n\r\n/**\r\n * Delays the execution of the current code to the next tick of the event loop.\r\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\r\n */\r\nexport function delayNextTick(): Promise<void> {\r\n    return new Promise(resolve => {\r\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\r\n        // Using `setTimeout` of the browser API accomplishes the same result.\r\n        if (typeof setImmediate === 'undefined') {\r\n            setTimeout(resolve, 0);\r\n        } else {\r\n            setImmediate(resolve);\r\n        }\r\n    });\r\n}\r\n\r\nlet lastTick = 0;\r\nlet globalInterruptionPeriod = 10;\r\n\r\n/**\r\n * Reset the global interruption period and create a cancellation token source.\r\n */\r\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\r\n    lastTick = performance.now();\r\n    return new CancellationTokenSource();\r\n}\r\n\r\n/**\r\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\r\n * The default value is 10ms.\r\n */\r\nexport function setInterruptionPeriod(period: number): void {\r\n    globalInterruptionPeriod = period;\r\n}\r\n\r\n/**\r\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\r\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\r\n * this symbol as rejection reason.\r\n */\r\nexport const OperationCancelled = Symbol('OperationCancelled');\r\n\r\n/**\r\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\r\n * has been cancelled.\r\n */\r\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\r\n    return err === OperationCancelled;\r\n}\r\n\r\n/**\r\n * This function does two things:\r\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\r\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\r\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\r\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\r\n *\r\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\r\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\r\n * the promise) to avoid that event being exposed as an error.\r\n */\r\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\r\n    if (token === CancellationToken.None) {\r\n        // Early exit in case cancellation was disabled by the caller\r\n        return;\r\n    }\r\n    const current = performance.now();\r\n    if (current - lastTick >= globalInterruptionPeriod) {\r\n        lastTick = current;\r\n        await delayNextTick();\r\n        // prevent calling delayNextTick every iteration of loop\r\n        // where delayNextTick takes up the majority or all of the\r\n        // globalInterruptionPeriod itself\r\n        lastTick = performance.now();\r\n    }\r\n    if (token.isCancellationRequested) {\r\n        throw OperationCancelled;\r\n    }\r\n}\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T = void> {\r\n    resolve: (value: T) => this;\r\n    reject: (err?: unknown) => this;\r\n\r\n    promise = new Promise<T>((resolve, reject) => {\r\n        this.resolve = (arg) => {\r\n            resolve(arg);\r\n            return this;\r\n        };\r\n        this.reject = (err) => {\r\n            reject(err);\r\n            return this;\r\n        };\r\n    });\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\r\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\r\n *  the overhead is very small, just a few kilobytes.\r\n * Everything else of that package (at the time contributing) is also defined\r\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\r\n */\r\nexport { TextDocument } from 'vscode-languageserver-textdocument';\r\n\r\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\r\nimport type { FileSystemProvider } from './file-system-provider.js';\r\nimport type { ParseResult, ParserOptions } from '../parser/langium-parser.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\r\nimport type { MultiMap } from '../utils/collections.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { TextDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\r\n * from the AST, e.g. the result of scope precomputation.\r\n */\r\nexport interface LangiumDocument<T extends AstNode = AstNode> {\r\n    /** The Uniform Resource Identifier (URI) of the document */\r\n    readonly uri: URI;\r\n    /** The text document used to convert between offsets and positions */\r\n    readonly textDocument: TextDocument;\r\n    /** The current state of the document */\r\n    state: DocumentState;\r\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\r\n    parseResult: ParseResult<T>;\r\n    /** Result of the scope precomputation phase */\r\n    precomputedScopes?: PrecomputedScopes;\r\n    /** An array of all cross-references found in the AST while linking */\r\n    references: Reference[];\r\n    /** Result of the validation phase */\r\n    diagnostics?: Diagnostic[]\r\n}\r\n\r\n/**\r\n * A document is subject to several phases that are run in predefined order. Any state value implies that\r\n * smaller state values are finished as well.\r\n */\r\nexport enum DocumentState {\r\n    /**\r\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\r\n     * document instance is no longer valid.\r\n     */\r\n    Changed = 0,\r\n    /**\r\n     * An AST has been created from the text content. The document structure can be traversed,\r\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\r\n     * at this stage as a preprocessing step.\r\n     */\r\n    Parsed = 1,\r\n    /**\r\n     * The `IndexManager` service has processed AST nodes of this document. This means the\r\n     * exported symbols are available in the global scope and can be resolved from other documents.\r\n     */\r\n    IndexedContent = 2,\r\n    /**\r\n     * The `ScopeComputation` service has processed this document. This means the local symbols\r\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\r\n     * Once a document has reached this state, you may follow every reference - it will lazily\r\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\r\n     * the target is not in scope.\r\n     */\r\n    ComputedScopes = 3,\r\n    /**\r\n     * The `Linker` service has processed this document. All outgoing references have been\r\n     * resolved or marked as erroneous.\r\n     */\r\n    Linked = 4,\r\n    /**\r\n     * The `IndexManager` service has processed AST node references of this document. This is\r\n     * necessary to determine which documents are affected by a change in one of the workspace\r\n     * documents.\r\n     */\r\n    IndexedReferences = 5,\r\n    /**\r\n     * The `DocumentValidator` service has processed this document. The language server listens\r\n     * to the results of this phase and sends diagnostics to the client.\r\n     */\r\n    Validated = 6\r\n}\r\n\r\n/**\r\n * Result of the scope precomputation phase (`ScopeComputation` service).\r\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\r\n */\r\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\r\n\r\nexport interface DocumentSegment {\r\n    readonly range: Range\r\n    readonly offset: number\r\n    readonly length: number\r\n    readonly end: number\r\n}\r\n\r\n/**\r\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\r\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\r\n */\r\nexport type TextDocumentProvider = {\r\n    get(uri: string | URI): TextDocument | undefined\r\n}\r\n\r\n/**\r\n * Shared service for creating `LangiumDocument` instances.\r\n *\r\n * Register a custom implementation if special (additional) behavior is required for your language(s).\r\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\r\n * specialize {@link update}, too!\r\n */\r\nexport interface LangiumDocumentFactory {\r\n    /**\r\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from an in-memory string.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from a model that has been constructed in memory.\r\n     */\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\r\n\r\n    /**\r\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\r\n     */\r\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Update the given document after changes in the corresponding textual representation.\r\n     * Method is called by the document builder after it has been requested to build an existing\r\n     * document and the document's state is {@link DocumentState.Changed}.\r\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\r\n     * and {@link fromString}.\r\n     */\r\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\r\n}\r\n\r\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n    }\r\n\r\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\r\n        const content = await this.fileSystemProvider.readFile(uri);\r\n        return this.createAsync<T>(uri, content, cancellationToken);\r\n    }\r\n\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        uri = uri ?? URI.parse(textDocument.uri);\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, textDocument, token);\r\n        } else {\r\n            return this.create<T>(uri, textDocument, token);\r\n        }\r\n    }\r\n\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, text, token);\r\n        } else {\r\n            return this.create<T>(uri, text, token);\r\n        }\r\n    }\r\n\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\r\n        return this.create<T>(uri, { $model: model });\r\n    }\r\n\r\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }, options?: ParserOptions): LangiumDocument<T> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = this.parse<T>(uri, content, options);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n\r\n        } else if ('$model' in content) {\r\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\r\n            return this.createLangiumDocument<T>(parseResult, uri);\r\n\r\n        } else {\r\n            const parseResult = this.parse<T>(uri, content.getText(), options);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n        } else {\r\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a LangiumDocument from a given parse result.\r\n     *\r\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\r\n     * should not be necessary because the main purpose of the TextDocument is to convert between\r\n     * text ranges and offsets, which is done solely in LSP request handling.\r\n     *\r\n     * With the introduction of {@link update} below this method is supposed to be mainly called\r\n     * during workspace initialization and on addition/recognition of new files, while changes in\r\n     * existing documents are processed via {@link update}.\r\n     */\r\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\r\n        let document: LangiumDocument<T>;\r\n        if (textDocument) {\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                textDocument\r\n            };\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                get textDocument() {\r\n                    return textDocumentGetter();\r\n                }\r\n            };\r\n        }\r\n        (parseResult.value as Mutable<AstNode>).$document = document;\r\n        return document;\r\n    }\r\n\r\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        // The CST full text property contains the original text that was used to create the AST.\r\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\r\n        const textDocument = this.textDocuments?.get(document.uri.toString());\r\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\r\n\r\n        if (textDocument) {\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    value: textDocument\r\n                }\r\n            );\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    get: textDocumentGetter\r\n                }\r\n            );\r\n        }\r\n\r\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\r\n        // Therefore, we only parse if the text has actually changed.\r\n        if (oldText !== text) {\r\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\r\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\r\n        }\r\n        document.state = DocumentState.Parsed;\r\n        return document;\r\n    }\r\n\r\n    protected parse<T extends AstNode>(uri: URI, text: string, options?: ParserOptions): ParseResult<T> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.LangiumParser.parse<T>(text, options);\r\n    }\r\n\r\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\r\n    }\r\n\r\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\r\n        const serviceRegistry = this.serviceRegistry;\r\n        let textDoc: TextDocument | undefined = undefined;\r\n        return () => {\r\n            return textDoc ??= TextDocument.create(\r\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Shared service for managing Langium documents.\r\n */\r\nexport interface LangiumDocuments {\r\n\r\n    /**\r\n     * A stream of all documents managed under this service.\r\n     */\r\n    readonly all: Stream<LangiumDocument>\r\n\r\n    /**\r\n     * Manage a new document under this service.\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    addDocument(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\r\n     */\r\n    getDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\r\n     * The new document will be added to the list of documents managed under this service.\r\n     */\r\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content asynchronously.\r\n     * The process can be interrupted with a cancellation token.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Returns `true` if a document with the given URI is managed under this service.\r\n     */\r\n    hasDocument(uri: URI): boolean;\r\n\r\n    /**\r\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\r\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\r\n     * be dropped to reduce memory footprint.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\r\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\r\n     * URI will create a new document instance.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    deleteDocument(uri: URI): LangiumDocument | undefined;\r\n}\r\n\r\nexport class DefaultLangiumDocuments implements LangiumDocuments {\r\n\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n\r\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get all(): Stream<LangiumDocument> {\r\n        return stream(this.documentMap.values());\r\n    }\r\n\r\n    addDocument(document: LangiumDocument): void {\r\n        const uriString = document.uri.toString();\r\n        if (this.documentMap.has(uriString)) {\r\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\r\n        }\r\n        this.documentMap.set(uriString, document);\r\n    }\r\n\r\n    getDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        return this.documentMap.get(uriString);\r\n    }\r\n\r\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\r\n        let document = this.getDocument(uri);\r\n        if (document) {\r\n            return document;\r\n        }\r\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\r\n        this.addDocument(document);\r\n        return document;\r\n    }\r\n\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\r\n        if (cancellationToken) {\r\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\r\n                this.addDocument(document);\r\n                return document;\r\n            });\r\n        } else {\r\n            const document = this.langiumDocumentFactory.fromString(text, uri);\r\n            this.addDocument(document);\r\n            return document;\r\n        }\r\n    }\r\n\r\n    hasDocument(uri: URI): boolean {\r\n        return this.documentMap.has(uri.toString());\r\n    }\r\n\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\r\n            linker.unlink(langiumDoc);\r\n            langiumDoc.state = DocumentState.Changed;\r\n            langiumDoc.precomputedScopes = undefined;\r\n            langiumDoc.diagnostics = undefined;\r\n        }\r\n        return langiumDoc;\r\n    }\r\n\r\n    deleteDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            langiumDoc.state = DocumentState.Changed;\r\n            this.documentMap.delete(uriString);\r\n        }\r\n        return langiumDoc;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\nimport type { ScopeProvider } from './scope-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\r\nimport { findRootNode, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { DocumentState } from '../workspace/documents.js';\r\n\r\n/**\r\n * Language-specific service for resolving cross-references in the AST.\r\n */\r\nexport interface Linker {\r\n\r\n    /**\r\n     * Links all cross-references within the specified document. The default implementation loads only target\r\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\r\n     * stored in the document's `references` property.\r\n     *\r\n     * @param document A LangiumDocument that shall be linked.\r\n     * @param cancelToken A token for cancelling the operation.\r\n     *\r\n     * @throws `OperationCancelled` if a cancellation event is detected\r\n     */\r\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Unlinks all references within the specified document and removes them from the list of `references`.\r\n     *\r\n     * @param document A LangiumDocument that shall be unlinked.\r\n     */\r\n    unlink(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Determines a candidate AST node description for linking the given reference.\r\n     *\r\n     * @param refInfo Information about the reference.\r\n     */\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\r\n\r\n    /**\r\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\r\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\r\n     * as well as the unique cross reference identifier.\r\n     *\r\n     * Default behavior:\r\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\r\n     *    first visit.\r\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\r\n     *    and further resolution attempts will *not* be performed.\r\n     *\r\n     * @param node The containing AST node\r\n     * @param property The AST node property being referenced\r\n     * @param refNode The corresponding CST node\r\n     * @param refText The cross reference text denoting the target AstNode\r\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\r\n     */\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\r\n\r\n}\r\n\r\nconst ref_resolving = Symbol('ref_resolving');\r\n\r\ninterface DefaultReference extends Reference {\r\n    _ref?: AstNode | LinkingError | typeof ref_resolving;\r\n    _nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport class DefaultLinker implements Linker {\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly scopeProvider: ScopeProvider;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly langiumDocuments: () => LangiumDocuments;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\r\n        this.scopeProvider = services.references.ScopeProvider;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const node of streamAst(document.parseResult.value)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\r\n        }\r\n    }\r\n\r\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\r\n        const ref = refInfo.reference as DefaultReference;\r\n        // The reference may already have been resolved lazily by accessing its `ref` property.\r\n        if (ref._ref === undefined) {\r\n            ref._ref = ref_resolving;\r\n            try {\r\n                const description = this.getCandidate(refInfo);\r\n                if (isLinkingError(description)) {\r\n                    ref._ref = description;\r\n                } else {\r\n                    ref._nodeDescription = description;\r\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\r\n                        // The target document is already loaded\r\n                        const linkedNode = this.loadAstNode(description);\r\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\r\n                    } else {\r\n                        // Try to load the target AST node later using the already provided description\r\n                        ref._ref = undefined;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\r\n                const errorMessage = (err as Error).message ?? String(err);\r\n                ref._ref = {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}`\r\n                };\r\n            }\r\n            // Add the reference to the document's array of references\r\n            // Only add if the reference has been not been resolved earlier\r\n            // Otherwise we end up with duplicates\r\n            // See also implementation of `buildReference`\r\n            document.references.push(ref);\r\n        }\r\n    }\r\n\r\n    unlink(document: LangiumDocument): void {\r\n        for (const ref of document.references) {\r\n            delete (ref as DefaultReference)._ref;\r\n            delete (ref as DefaultReference)._nodeDescription;\r\n        }\r\n        document.references = [];\r\n    }\r\n\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\r\n        const scope = this.scopeProvider.getScope(refInfo);\r\n        const description = scope.getElement(refInfo.reference.$refText);\r\n        return description ?? this.createLinkingError(refInfo);\r\n    }\r\n\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\r\n        // See behavior description in doc of Linker, update that on changes in here.\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const linker = this;\r\n        const reference: DefaultReference = {\r\n            $refNode: refNode,\r\n            $refText: refText,\r\n\r\n            get ref() {\r\n                if (isAstNode(this._ref)) {\r\n                    // Most frequent case: the target is already resolved.\r\n                    return this._ref;\r\n                } else if (isAstNodeDescription(this._nodeDescription)) {\r\n                    // A candidate has been found before, but it is not loaded yet.\r\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\r\n                    this._ref = linkedNode ??\r\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\r\n                } else if (this._ref === undefined) {\r\n                    // The reference has not been linked yet, so do that now.\r\n                    this._ref = ref_resolving;\r\n                    const document = findRootNode(node).$document;\r\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\r\n                    if (refData.error && document && document.state < DocumentState.ComputedScopes) {\r\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\r\n                        return this._ref = undefined;\r\n                    }\r\n                    this._ref = refData.node ?? refData.error;\r\n                    this._nodeDescription = refData.descr;\r\n                    document?.references.push(this);\r\n                } else if (this._ref === ref_resolving) {\r\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\r\n                }\r\n                return isAstNode(this._ref) ? this._ref : undefined;\r\n            },\r\n            get $nodeDescription() {\r\n                return this._nodeDescription;\r\n            },\r\n            get error() {\r\n                return isLinkingError(this._ref) ? this._ref : undefined;\r\n            }\r\n        };\r\n        return reference;\r\n    }\r\n\r\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\r\n        try {\r\n            const description = this.getCandidate(refInfo);\r\n            if (isLinkingError(description)) {\r\n                return { error: description };\r\n            }\r\n            const linkedNode = this.loadAstNode(description);\r\n            if (linkedNode) {\r\n                return { node: linkedNode, descr: description };\r\n            }\r\n            else {\r\n                return {\r\n                    descr: description,\r\n                    error:\r\n                        this.createLinkingError(refInfo, description)\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\r\n            const errorMessage = (err as Error).message ?? String(err);\r\n            return {\r\n                error: {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}`\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\r\n        if (nodeDescription.node) {\r\n            return nodeDescription.node;\r\n        }\r\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\r\n        if (!doc) {\r\n            return undefined;\r\n        }\r\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\r\n    }\r\n\r\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\r\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\r\n        // in the language implementation.\r\n        const document = findRootNode(refInfo.container).$document;\r\n        if (document && document.state < DocumentState.ComputedScopes) {\r\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\r\n        }\r\n        const referenceType = this.reflection.getReferenceType(refInfo);\r\n        return {\r\n            ...refInfo,\r\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\r\n            targetDescription\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\r\n\r\nexport interface NamedAstNode extends AstNode {\r\n    name: string;\r\n}\r\n\r\nexport function isNamed(node: AstNode): node is NamedAstNode {\r\n    return typeof (node as NamedAstNode).name === 'string';\r\n}\r\n\r\n/**\r\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\r\n */\r\nexport interface NameProvider {\r\n    /**\r\n     * Returns the `name` of a given AstNode.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getName(node: AstNode): string | undefined;\r\n    /**\r\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getNameNode(node: AstNode): CstNode | undefined;\r\n}\r\n\r\nexport class DefaultNameProvider implements NameProvider {\r\n    getName(node: AstNode): string | undefined {\r\n        if (isNamed(node)) {\r\n            return node.name;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getNameNode(node: AstNode): CstNode | undefined {\r\n        return findNodeForProperty(node.$cstNode, 'name');\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI, Utils } from 'vscode-uri';\r\n\r\nexport { URI };\r\n\r\nexport namespace UriUtils {\r\n\r\n    export const basename = Utils.basename;\r\n    export const dirname = Utils.dirname;\r\n    export const extname = Utils.extname;\r\n    export const joinPath = Utils.joinPath;\r\n    export const resolvePath = Utils.resolvePath;\r\n\r\n    export function equals(a?: URI | string, b?: URI | string): boolean {\r\n        return a?.toString() === b?.toString();\r\n    }\r\n\r\n    export function relative(from: URI | string, to: URI | string): string {\r\n        const fromPath = typeof from === 'string' ? from : from.path;\r\n        const toPath = typeof to === 'string' ? to : to.path;\r\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\r\n        const toParts = toPath.split('/').filter(e => e.length > 0);\r\n        let i = 0;\r\n        for (; i < fromParts.length; i++) {\r\n            if (fromParts[i] !== toParts[i]) {\r\n                break;\r\n            }\r\n        }\r\n        const backPart = '../'.repeat(fromParts.length - i);\r\n        const toPart = toParts.slice(i).join('/');\r\n        return backPart + toPart;\r\n    }\r\n\r\n    export function normalize(uri: URI | string): string {\r\n        return URI.parse(uri.toString()).toString();\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { findAssignment } from '../utils/grammar-utils.js';\r\nimport { isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for finding references and declaration of a given `CstNode`.\r\n */\r\nexport interface References {\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\r\n\r\n    /**\r\n     * Finds all references to the target node as references (local references) or reference descriptions.\r\n     *\r\n     * @param targetNode Specified target node whose references should be returned\r\n     */\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\r\n}\r\n\r\nexport interface FindReferencesOptions {\r\n    /**\r\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\r\n     */\r\n    onlyLocal?: boolean;\r\n    /**\r\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\r\n     */\r\n    documentUri?: URI;\r\n    /**\r\n     * Whether the returned list of references should include the declaration.\r\n     */\r\n    includeDeclaration?: boolean;\r\n}\r\n\r\nexport class DefaultReferences implements References {\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly index: IndexManager;\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.index = services.shared.workspace.IndexManager;\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\r\n        if (sourceCstNode) {\r\n            const assignment = findAssignment(sourceCstNode);\r\n            const nodeElem = sourceCstNode.astNode;\r\n            if (assignment && nodeElem) {\r\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\r\n\r\n                if (isReference(reference)) {\r\n                    return reference.ref;\r\n                } else if (Array.isArray(reference)) {\r\n                    for (const ref of reference) {\r\n                        if (isReference(ref) && ref.$refNode\r\n                            && ref.$refNode.offset <= sourceCstNode.offset\r\n                            && ref.$refNode.end >= sourceCstNode.end) {\r\n                            return ref.ref;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nodeElem) {\r\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\r\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\r\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\r\n                    return nodeElem;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\r\n        const astNode = this.findDeclaration(sourceCstNode);\r\n        if (astNode?.$cstNode) {\r\n            const targetNode = this.nameProvider.getNameNode(astNode);\r\n            return targetNode ?? astNode.$cstNode;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\r\n        const refs: ReferenceDescription[] = [];\r\n        if (options.includeDeclaration) {\r\n            const ref = this.getReferenceToSelf(targetNode);\r\n            if (ref) {\r\n                refs.push(ref);\r\n            }\r\n        }\r\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\r\n        if (options.documentUri) {\r\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\r\n        }\r\n        refs.push(...indexReferences);\r\n        return stream(refs);\r\n    }\r\n\r\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\r\n        const nameNode = this.nameProvider.getNameNode(targetNode);\r\n        if (nameNode) {\r\n            const doc = getDocument(targetNode);\r\n            const path = this.nodeLocator.getAstNodePath(targetNode);\r\n            return {\r\n                sourceUri: doc.uri,\r\n                sourcePath: path,\r\n                targetUri: doc.uri,\r\n                targetPath: path,\r\n                segment: toDocumentSegment(nameNode),\r\n                local: true\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Stream } from './stream.js';\r\nimport { Reduction, stream } from './stream.js';\r\n\r\n/**\r\n * A multimap is a variation of a Map that has potentially multiple values for every key.\r\n */\r\nexport class MultiMap<K, V> {\r\n\r\n    private map = new Map<K, V[]>();\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The total number of values in the multimap.\r\n     */\r\n    get size(): number {\r\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\r\n    }\r\n\r\n    /**\r\n     * Clear all entries in the multimap.\r\n     */\r\n    clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\r\n     *  * Without a value, all values associated with the given key are deleted.\r\n     *\r\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\r\n     *     key / value does not exist.\r\n     */\r\n    delete(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.delete(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                const index = values.indexOf(value);\r\n                if (index >= 0) {\r\n                    if (values.length === 1) {\r\n                        this.map.delete(key);\r\n                    } else {\r\n                        values.splice(index, 1);\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all values associated with the given key. If no value exists,\r\n     * an empty array is returned.\r\n     *\r\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\r\n     * value and `delete` to remove a value from the multimap.\r\n     */\r\n    get(key: K): readonly V[] {\r\n        return this.map.get(key) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\r\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\r\n     */\r\n    has(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.has(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                return values.indexOf(value) >= 0;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the given key / value pair to the multimap.\r\n     */\r\n    add(key: K, value: V): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(value);\r\n        } else {\r\n            this.map.set(key, [value]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add the given set of key / value pairs to the multimap.\r\n     */\r\n    addAll(key: K, values: Iterable<V>): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(...values);\r\n        } else {\r\n            this.map.set(key, Array.from(values));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invokes the given callback function for every key / value pair in the multimap.\r\n     */\r\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\r\n        this.map.forEach((array, key) =>\r\n            array.forEach(value => callbackfn(value, key, this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an iterator of key, value pairs for every entry in the map.\r\n     */\r\n    [Symbol.iterator](): Iterator<[K, V]> {\r\n        return this.entries().iterator();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): Stream<[K, V]> {\r\n        return stream(this.map.entries())\r\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of keys in the map.\r\n     */\r\n    keys(): Stream<K> {\r\n        return stream(this.map.keys());\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of values in the map.\r\n     */\r\n    values(): Stream<V> {\r\n        return stream(this.map.values()).flat();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value set pairs for every key in the map.\r\n     */\r\n    entriesGroupedByKey(): Stream<[K, V[]]> {\r\n        return stream(this.map.entries());\r\n    }\r\n\r\n}\r\n\r\nexport class BiMap<K, V> {\r\n\r\n    private map = new Map<K, V>();\r\n    private inverse = new Map<V, K>();\r\n\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.map.clear();\r\n        this.inverse.clear();\r\n    }\r\n\r\n    set(key: K, value: V): this {\r\n        this.map.set(key, value);\r\n        this.inverse.set(value, key);\r\n        return this;\r\n    }\r\n\r\n    get(key: K): V | undefined {\r\n        return this.map.get(key);\r\n    }\r\n\r\n    getKey(value: V): K | undefined {\r\n        return this.inverse.get(value);\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        const value = this.map.get(key);\r\n        if (value !== undefined) {\r\n            this.map.delete(key);\r\n            this.inverse.delete(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Language-specific service for precomputing global and local scopes. The service methods are executed\r\n * as the first and second phase in the `DocumentBuilder`.\r\n */\r\nexport interface ScopeComputation {\r\n\r\n    /**\r\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\r\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\r\n     * they can be referenced from other documents.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\r\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\r\n     * initial indexing where this method is used.\r\n     *\r\n     * @param document The document from which to gather exported AST nodes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\r\n\r\n    /**\r\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\r\n     * resolving references to symbols in the same document. The result is a multimap assigning a\r\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\r\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\r\n     * resolution depends on the scope computation phase to be completed.\r\n     *\r\n     * @param document The document in which to compute scopes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\r\n\r\n}\r\n\r\n/**\r\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\r\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\r\n * contained child nodes.\r\n *\r\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\r\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\r\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\r\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\r\n * are _invisible_ by default, but that can be changed by customizing this service.\r\n */\r\nexport class DefaultScopeComputation implements ScopeComputation {\r\n\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n    }\r\n\r\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\r\n     * The list of children to be considered is determined by the function parameter {@link children}.\r\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\r\n     *\r\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\r\n     * @param document The document containing the AST node to be exported.\r\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCancelled` if a user action occurs during execution.\r\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\r\n     */\r\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        const exports: AstNodeDescription[] = [];\r\n\r\n        this.exportNode(parentNode, exports, document);\r\n        for (const node of children(parentNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.exportNode(node, exports, document);\r\n        }\r\n        return exports;\r\n    }\r\n\r\n    /**\r\n     * Add a single node to the list of exports if it has a name. Override this method to change how\r\n     * symbols are exported, e.g. by modifying their exported name.\r\n     */\r\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\r\n        const name = this.nameProvider.getName(node);\r\n        if (name) {\r\n            exports.push(this.descriptions.createDescription(node, name, document));\r\n        }\r\n    }\r\n\r\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\r\n        const rootNode = document.parseResult.value;\r\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\r\n        // Here we navigate the full AST - local scopes shall be available in the whole document\r\n        for (const node of streamAllContents(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.processNode(node, document, scopes);\r\n        }\r\n        return scopes;\r\n    }\r\n\r\n    /**\r\n     * Process a single node during scopes computation. The default implementation makes the node visible\r\n     * in the subtree of its container (if the node has a name). Override this method to change this,\r\n     * e.g. by increasing the visibility to a higher level in the AST.\r\n     */\r\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\r\n        const container = node.$container;\r\n        if (container) {\r\n            const name = this.nameProvider.getName(node);\r\n            if (name) {\r\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNodeDescription } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\r\n\r\n/**\r\n * A scope describes what target elements are visible from a specific cross-reference context.\r\n */\r\nexport interface Scope {\r\n\r\n    /**\r\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\r\n     * If multiple matching elements are present, the selection of the returned element should be done\r\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\r\n     *\r\n     * @param name Name of the cross-reference target as it appears in the source text.\r\n     */\r\n    getElement(name: string): AstNodeDescription | undefined;\r\n\r\n    /**\r\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\r\n     * shown in the editor.\r\n     */\r\n    getAllElements(): Stream<AstNodeDescription>;\r\n\r\n}\r\n\r\nexport interface ScopeOptions {\r\n    caseInsensitive?: boolean;\r\n}\r\n\r\n/**\r\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\r\n * the next level of elements, which are queried when a target element is not found in the stream provided\r\n * to this scope.\r\n */\r\nexport class StreamScope implements Scope {\r\n    readonly elements: Stream<AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = elements;\r\n        this.outerScope = outerScope;\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        if (this.outerScope) {\r\n            return this.elements.concat(this.outerScope.getAllElements());\r\n        } else {\r\n            return this.elements;\r\n        }\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const local = this.caseInsensitive\r\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\r\n            : this.elements.find(e => e.name === name);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class MapScope implements Scope {\r\n    readonly elements: Map<string, AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = new Map();\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n        for (const element of elements) {\r\n            const name = this.caseInsensitive\r\n                ? element.name.toLowerCase()\r\n                : element.name;\r\n            this.elements.set(name, element);\r\n        }\r\n        this.outerScope = outerScope;\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\r\n        const local = this.elements.get(localName);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        let elementStream = stream(this.elements.values());\r\n        if (this.outerScope) {\r\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\r\n        }\r\n        return elementStream;\r\n    }\r\n\r\n}\r\n\r\nexport const EMPTY_SCOPE: Scope = {\r\n    getElement(): undefined {\r\n        return undefined;\r\n    },\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        return EMPTY_STREAM;\r\n    }\r\n};\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Disposable } from './disposable.js';\r\nimport type { URI } from './uri-utils.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { DocumentState } from '../workspace/documents.js';\r\n\r\nexport abstract class DisposableCache implements Disposable {\r\n\r\n    protected toDispose: Disposable[] = [];\r\n    protected isDisposed = false;\r\n\r\n    onDispose(disposable: Disposable): void {\r\n        this.toDispose.push(disposable);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.throwIfDisposed();\r\n        this.clear();\r\n        this.isDisposed = true;\r\n        this.toDispose.forEach(disposable => disposable.dispose());\r\n    }\r\n\r\n    protected throwIfDisposed(): void {\r\n        if (this.isDisposed) {\r\n            throw new Error('This cache has already been disposed');\r\n        }\r\n    }\r\n\r\n    abstract clear(): void;\r\n}\r\n\r\nexport class SimpleCache<K, V> extends DisposableCache {\r\n    protected readonly cache = new Map<K, V>();\r\n\r\n    has(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.has(key);\r\n    }\r\n\r\n    set(key: K, value: V): void {\r\n        this.throwIfDisposed();\r\n        this.cache.set(key, value);\r\n    }\r\n\r\n    get(key: K): V | undefined;\r\n    get(key: K, provider: () => V): V;\r\n    get(key: K, provider?: () => V): V | undefined {\r\n        this.throwIfDisposed();\r\n        if (this.cache.has(key)) {\r\n            return this.cache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            this.cache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.delete(key);\r\n    }\r\n\r\n    clear(): void {\r\n        this.throwIfDisposed();\r\n        this.cache.clear();\r\n    }\r\n}\r\n\r\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\r\n\r\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\r\n    private readonly converter: (input: Context) => ContextKey | Context;\r\n\r\n    constructor(converter?: (input: Context) => ContextKey) {\r\n        super();\r\n        this.converter = converter ?? (value => value);\r\n    }\r\n\r\n    has(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).has(key);\r\n    }\r\n\r\n    set(contextKey: Context, key: Key, value: Value): void {\r\n        this.throwIfDisposed();\r\n        this.cacheForContext(contextKey).set(key, value);\r\n    }\r\n\r\n    get(contextKey: Context, key: Key): Value | undefined;\r\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\r\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\r\n        this.throwIfDisposed();\r\n        const contextCache = this.cacheForContext(contextKey);\r\n        if (contextCache.has(key)) {\r\n            return contextCache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            contextCache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).delete(key);\r\n    }\r\n\r\n    clear(): void;\r\n    clear(contextKey: Context): void;\r\n    clear(contextKey?: Context): void {\r\n        this.throwIfDisposed();\r\n        if (contextKey) {\r\n            const mapKey = this.converter(contextKey);\r\n            this.cache.delete(mapKey);\r\n        } else {\r\n            this.cache.clear();\r\n        }\r\n    }\r\n\r\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\r\n        const mapKey = this.converter(contextKey);\r\n        let documentCache = this.cache.get(mapKey);\r\n        if (!documentCache) {\r\n            documentCache = new Map();\r\n            this.cache.set(mapKey, documentCache);\r\n        }\r\n        return documentCache;\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to a document.\r\n * If this document is changed or deleted, all associated key/value pairs are deleted.\r\n */\r\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\r\n\r\n    /**\r\n     * Creates a new document cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     *\r\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\r\n     * which triggers on all documents that have been affected by this change, assuming that the\r\n     * state is `DocumentState.Linked` or a later state.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super(uri => uri.toString());\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\r\n                this.clear(document.uri.toString());\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                for (const uri of deleted) { // react only on deleted documents\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\r\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\r\n                for (const uri of allUris) {\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to the whole workspace.\r\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\r\n */\r\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\r\n\r\n    /**\r\n     * Creates a new workspace cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super();\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\r\n                this.clear();\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                if (deleted.length > 0) { // react only on deleted documents\r\n                    this.clear();\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => { // react on both changed and deleted documents\r\n                this.clear();\r\n            }));\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { Scope, ScopeOptions} from './scope.js';\r\nimport { MapScope, StreamScope } from './scope.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { WorkspaceCache } from '../utils/caching.js';\r\n\r\n/**\r\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\r\n */\r\nexport interface ScopeProvider {\r\n\r\n    /**\r\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\r\n     * identifier.\r\n     *\r\n     * @param context Information about the reference for which a scope is requested.\r\n     */\r\n    getScope(context: ReferenceInfo): Scope;\r\n\r\n}\r\n\r\nexport class DefaultScopeProvider implements ScopeProvider {\r\n\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n    protected readonly indexManager: IndexManager;\r\n\r\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\r\n    }\r\n\r\n    getScope(context: ReferenceInfo): Scope {\r\n        const scopes: Array<Stream<AstNodeDescription>> = [];\r\n        const referenceType = this.reflection.getReferenceType(context);\r\n\r\n        const precomputed = getDocument(context.container).precomputedScopes;\r\n        if (precomputed) {\r\n            let currentNode: AstNode | undefined = context.container;\r\n            do {\r\n                const allDescriptions = precomputed.get(currentNode);\r\n                if (allDescriptions.length > 0) {\r\n                    scopes.push(stream(allDescriptions).filter(\r\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\r\n                }\r\n                currentNode = currentNode.$container;\r\n            } while (currentNode);\r\n        }\r\n\r\n        let result: Scope = this.getGlobalScope(referenceType, context);\r\n        for (let i = scopes.length - 1; i >= 0; i--) {\r\n            result = this.createScope(scopes[i], result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST node descriptions.\r\n     */\r\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        return new StreamScope(stream(elements), outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\r\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\r\n     */\r\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        const s = stream(elements).map(e => {\r\n            const name = this.nameProvider.getName(e);\r\n            if (name) {\r\n                return this.descriptions.createDescription(e, name);\r\n            }\r\n            return undefined;\r\n        }).nonNullable();\r\n        return new StreamScope(s, outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a global scope filtered for the given reference type.\r\n     */\r\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\r\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI } from 'vscode-uri';\r\nimport type { CommentProvider } from '../documentation/comment-provider.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\n\r\nexport interface JsonSerializeOptions {\r\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\r\n    space?: string | number;\r\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\r\n    refText?: boolean;\r\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\r\n    sourceText?: boolean;\r\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\r\n    textRegions?: boolean;\r\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\r\n    comments?: boolean;\r\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\r\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\r\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: URI, reference: Reference) => string\r\n}\r\n\r\nexport interface JsonDeserializeOptions {\r\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: string) => URI\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\r\n */\r\nexport interface AstNodeWithTextRegion extends AstNode {\r\n    $sourceText?: string;\r\n    $textRegion?: AstNodeRegionWithAssignments;\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry a semantically relevant comment.\r\n */\r\nexport interface AstNodeWithComment extends AstNode {\r\n    $comment?: string;\r\n}\r\n\r\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\r\n    return typeof (node as AstNodeWithComment).$comment === 'string';\r\n}\r\n\r\n/**\r\n * A {@link DocumentSegment} representing the definition area of an AstNode within the DSL text.\r\n * Usually contains text region information on all assigned property values of the AstNode,\r\n * and may contain the defining file's URI as string.\r\n */\r\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\r\n    /**\r\n     * A record containing an entry for each assigned property of the AstNode.\r\n     * The key is equal to the property name and the value is an array of the property values'\r\n     * text regions, regardless of whether the property is a single value or list property.\r\n     */\r\n    assignments?: Record<string, DocumentSegment[]>;\r\n    /**\r\n     * The AstNode defining file's URI as string\r\n     */\r\n    documentURI?: string;\r\n}\r\n\r\n/**\r\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\r\n */\r\nexport interface JsonSerializer {\r\n    /**\r\n     * Serialize an `AstNode` into a JSON `string`.\r\n     * @param node The `AstNode` to be serialized.\r\n     * @param options Serialization options\r\n     */\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\r\n    /**\r\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\r\n     */\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\r\n}\r\n\r\n/**\r\n * A cross-reference in the serialized JSON representation of an AstNode.\r\n */\r\ninterface IntermediateReference {\r\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\r\n    $ref?: string\r\n    /** The actual text used to look up the reference target in the surrounding scope. */\r\n    $refText?: string\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    $error?: string\r\n}\r\n\r\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\r\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\r\n}\r\n\r\nexport class DefaultJsonSerializer implements JsonSerializer {\r\n\r\n    /** The set of AstNode properties to be ignored by the serializer. */\r\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\r\n\r\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\r\n    protected currentDocument: LangiumDocument | undefined;\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string {\r\n        const serializeOptions = options ?? {};\r\n        const specificReplacer = options?.replacer;\r\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, serializeOptions);\r\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\r\n\r\n        try {\r\n            this.currentDocument = getDocument(node);\r\n            return JSON.stringify(node, replacer, options?.space);\r\n        } finally {\r\n            this.currentDocument = undefined;\r\n        }\r\n    }\r\n\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T {\r\n        const deserializeOptions = options ?? {};\r\n        const root = JSON.parse(content);\r\n        this.linkNode(root, root, deserializeOptions);\r\n        return root;\r\n    }\r\n\r\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\r\n        if (this.ignoreProperties.has(key)) {\r\n            return undefined;\r\n        } else if (isReference(value)) {\r\n            const refValue = value.ref;\r\n            const $refText = refText ? value.$refText : undefined;\r\n            if (refValue) {\r\n                const targetDocument = getDocument(refValue);\r\n                let targetUri = '';\r\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\r\n                    if (uriConverter) {\r\n                        targetUri = uriConverter(targetDocument.uri, value);\r\n                    } else {\r\n                        targetUri = targetDocument.uri.toString();\r\n                    }\r\n                }\r\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\r\n                return {\r\n                    $ref: `${targetUri}#${targetPath}`,\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            } else {\r\n                return {\r\n                    $error: value.error?.message ?? 'Could not resolve reference',\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            }\r\n        } else if (isAstNode(value)) {\r\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\r\n            if (textRegions) {\r\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\r\n                if ((!key || value.$document) && astNode?.$textRegion) {\r\n                    // The document URI is added to the root node of the resulting JSON tree\r\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\r\n                }\r\n            }\r\n            if (sourceText && !key) {\r\n                astNode ??= { ...value };\r\n                astNode.$sourceText = value.$cstNode?.text;\r\n            }\r\n            if (comments) {\r\n                astNode ??= { ...value };\r\n                const comment = this.commentProvider.getComment(value);\r\n                if (comment) {\r\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\r\n                }\r\n            }\r\n            return astNode ?? value;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\r\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\r\n            offset: cstNode.offset,\r\n            end: cstNode.end,\r\n            length: cstNode.length,\r\n            range: cstNode.range,\r\n        };\r\n\r\n        if (node.$cstNode) {\r\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\r\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\r\n\r\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\r\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\r\n                if (propertyAssignments.length !== 0) {\r\n                    assignments[key] = propertyAssignments;\r\n                }\r\n            });\r\n\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\r\n        for (const [propertyName, item] of Object.entries(node)) {\r\n            if (Array.isArray(item)) {\r\n                for (let index = 0; index < item.length; index++) {\r\n                    const element = item[index];\r\n                    if (isIntermediateReference(element)) {\r\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\r\n                    } else if (isAstNode(element)) {\r\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\r\n                    }\r\n                }\r\n            } else if (isIntermediateReference(item)) {\r\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\r\n            } else if (isAstNode(item)) {\r\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\r\n            }\r\n        }\r\n        const mutable = node as Mutable<AstNode>;\r\n        mutable.$container = container;\r\n        mutable.$containerProperty = containerProperty;\r\n        mutable.$containerIndex = containerIndex;\r\n    }\r\n\r\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\r\n        let refText = reference.$refText;\r\n        let error = reference.$error;\r\n        if (reference.$ref) {\r\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\r\n            if (isAstNode(ref)) {\r\n                if (!refText) {\r\n                    refText = this.nameProvider.getName(ref);\r\n                }\r\n                return {\r\n                    $refText: refText ?? '',\r\n                    ref\r\n                };\r\n            } else {\r\n                error = ref;\r\n            }\r\n        }\r\n        if (error) {\r\n            const ref: Mutable<Reference> = {\r\n                $refText: refText ?? ''\r\n            };\r\n            ref.error = {\r\n                container,\r\n                property,\r\n                message: error,\r\n                reference: ref\r\n            };\r\n            return ref;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\r\n        try {\r\n            const fragmentIndex = uri.indexOf('#');\r\n            if (fragmentIndex === 0) {\r\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\r\n                if (!node) {\r\n                    return 'Could not resolve path: ' + uri;\r\n                }\r\n                return node;\r\n            }\r\n            if (fragmentIndex < 0) {\r\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\r\n                const document = this.langiumDocuments.getDocument(documentUri);\r\n                if (!document) {\r\n                    return 'Could not find document for URI: ' + uri;\r\n                }\r\n                return document.parseResult.value;\r\n            }\r\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\r\n            const document = this.langiumDocuments.getDocument(documentUri);\r\n            if (!document) {\r\n                return 'Could not find document for URI: ' + uri;\r\n            }\r\n            if (fragmentIndex === uri.length - 1) {\r\n                return document.parseResult.value;\r\n            }\r\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\r\n            if (!node) {\r\n                return 'Could not resolve URI: ' + uri;\r\n            }\r\n            return node;\r\n        } catch (err) {\r\n            return String(err);\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { TextDocumentProvider } from './workspace/documents.js';\r\nimport { UriUtils, type URI } from './utils/uri-utils.js';\r\n\r\n/**\r\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\r\n * These are resolved via the URI of a text document.\r\n */\r\nexport interface ServiceRegistry {\r\n\r\n    /**\r\n     * Register a language via its injected services.\r\n     */\r\n    register(language: LangiumCoreServices): void;\r\n\r\n    /**\r\n     * Retrieve the language-specific services for the given URI. In case only one language is\r\n     * registered, it may be used regardless of the URI format.\r\n     */\r\n    getServices(uri: URI): LangiumCoreServices;\r\n\r\n    /**\r\n     * Check whether services are available for the given URI.\r\n     */\r\n    hasServices(uri: URI): boolean;\r\n\r\n    /**\r\n     * The full set of registered language services.\r\n     */\r\n    readonly all: readonly LangiumCoreServices[];\r\n}\r\n\r\n/**\r\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\r\n */\r\nexport class DefaultServiceRegistry implements ServiceRegistry {\r\n\r\n    protected singleton?: LangiumCoreServices;\r\n    protected readonly languageIdMap = new Map<string, LangiumCoreServices>();\r\n    protected readonly fileExtensionMap = new Map<string, LangiumCoreServices>();\r\n\r\n    /**\r\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\r\n     */\r\n    protected get map(): Map<string, LangiumCoreServices> | undefined {\r\n        return this.fileExtensionMap;\r\n    }\r\n\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n\r\n    constructor(services?: LangiumSharedCoreServices) {\r\n        this.textDocuments = services?.workspace.TextDocuments;\r\n    }\r\n\r\n    register(language: LangiumCoreServices): void {\r\n        const data = language.LanguageMetaData;\r\n        for (const ext of data.fileExtensions) {\r\n            if (this.fileExtensionMap.has(ext)) {\r\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\r\n            }\r\n            this.fileExtensionMap.set(ext, language);\r\n        }\r\n        this.languageIdMap.set(data.languageId, language);\r\n        if (this.languageIdMap.size === 1) {\r\n            this.singleton = language;\r\n        } else {\r\n            this.singleton = undefined;\r\n        }\r\n    }\r\n\r\n    getServices(uri: URI): LangiumCoreServices {\r\n        if (this.singleton !== undefined) {\r\n            return this.singleton;\r\n        }\r\n        if (this.languageIdMap.size === 0) {\r\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\r\n        }\r\n        const languageId = this.textDocuments?.get(uri)?.languageId;\r\n        if (languageId !== undefined) {\r\n            const services = this.languageIdMap.get(languageId);\r\n            if (services) {\r\n                return services;\r\n            }\r\n        }\r\n        const ext = UriUtils.extname(uri);\r\n        const services = this.fileExtensionMap.get(ext);\r\n        if (!services) {\r\n            if (languageId) {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\r\n            } else {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\r\n            }\r\n        }\r\n        return services;\r\n    }\r\n\r\n    hasServices(uri: URI): boolean {\r\n        try {\r\n            this.getServices(uri);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get all(): readonly LangiumCoreServices[] {\r\n        return Array.from(this.languageIdMap.values());\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\r\nimport { assertUnreachable } from '../index.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport { isOperationCancelled } from '../utils/promise-utils.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\n\r\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\r\n    /** The AST node to which the diagnostic is attached. */\r\n    node: N;\r\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\r\n    property?: P;\r\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\r\n    keyword?: string;\r\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\r\n    index?: number;\r\n    /** If you want to create a diagnostic independent to any property, use the range property. */\r\n    range?: Range;\r\n    /** The diagnostic's code, which usually appear in the user interface. */\r\n    code?: integer | string;\r\n    /** An optional property to describe the error code. */\r\n    codeDescription?: CodeDescription;\r\n    /** Additional metadata about the diagnostic. */\r\n    tags?: DiagnosticTag[];\r\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\r\n    relatedInformation?: DiagnosticRelatedInformation[];\r\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\r\n    data?: unknown;\r\n}\r\n\r\n/**\r\n * Shape of information commonly used in the `data` field of diagnostics.\r\n */\r\nexport interface DiagnosticData {\r\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\r\n    code: string\r\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\r\n    actionSegment?: DocumentSegment\r\n    /** Specifies where to apply the code action in the form of a `Range`. */\r\n    actionRange?: Range\r\n}\r\n\r\n/**\r\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\r\n */\r\nexport function diagnosticData(code: string): DiagnosticData {\r\n    return { code };\r\n}\r\n\r\nexport type ValidationSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport type ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => void\r\n\r\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for describing functions which will be called once before or after all the AstNodes of an AST/Langium document are validated.\r\n *\r\n * The AST is represented by its root AstNode.\r\n *\r\n * The given validation acceptor helps to report some early or lately detected issues.\r\n *\r\n * The 'categories' indicate, which validation categories are executed for all the AstNodes.\r\n * This helps to tailor the preparations/tear-down logic to the actually executed checks on the nodes.\r\n *\r\n * It is recommended to support interrupts during long-running logic with 'interruptAndCheck(cancelToken)'.\r\n */\r\nexport type ValidationPreparation = (rootNode: AstNode, accept: ValidationAcceptor, categories: ValidationCategory[], cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\r\n *\r\n * ```ts\r\n *   const checks: ValidationChecks<StatemachineAstType> = {\r\n *       State: validator.checkStateNameStartsWithCapital\r\n *    };\r\n * ```\r\n *\r\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\r\n *\r\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\r\n */\r\nexport type ValidationChecks<T> = {\r\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\r\n} & {\r\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\r\n}\r\n\r\n/**\r\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\r\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\r\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\r\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\r\n * or with an explicit command, etc.\r\n *\r\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\r\n * for custom validation checks.\r\n */\r\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\r\n\r\nexport namespace ValidationCategory {\r\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\r\n}\r\n\r\ntype ValidationCheckEntry = {\r\n    check: ValidationCheck\r\n    category: ValidationCategory\r\n}\r\n\r\n/**\r\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\r\n */\r\nexport class ValidationRegistry {\r\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\r\n    private readonly reflection: AstReflection;\r\n\r\n    private entriesBefore: ValidationPreparation[] = [];\r\n    private entriesAfter: ValidationPreparation[] = [];\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n    }\r\n\r\n    /**\r\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\r\n     * or an array of validation checks.\r\n     *\r\n     * @param checksRecord Set of validation checks to register.\r\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\r\n        if (category === 'built-in') {\r\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\r\n        }\r\n        for (const [type, ch] of Object.entries(checksRecord)) {\r\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\r\n            if (Array.isArray(callbacks)) {\r\n                for (const check of callbacks) {\r\n                    const entry: ValidationCheckEntry = {\r\n                        check: this.wrapValidationException(check, thisObj),\r\n                        category\r\n                    };\r\n                    this.addEntry(type, entry);\r\n                }\r\n            } else if (typeof callbacks === 'function') {\r\n                const entry: ValidationCheckEntry = {\r\n                    check: this.wrapValidationException(callbacks, thisObj),\r\n                    category\r\n                };\r\n                this.addEntry(type, entry);\r\n            } else {\r\n                assertUnreachable(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\r\n        return async (node, accept, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\r\n        };\r\n    }\r\n\r\n    protected async handleException(functionality: () => MaybePromise<void>, messageContext: string, accept: ValidationAcceptor, node: AstNode): Promise<void> {\r\n        try {\r\n            await functionality();\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error(`${messageContext}:`, err);\r\n            if (err instanceof Error && err.stack) {\r\n                console.error(err.stack);\r\n            }\r\n            const messageDetails = err instanceof Error ? err.message : String(err);\r\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\r\n        }\r\n    }\r\n\r\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\r\n        if (type === 'AstNode') {\r\n            this.entries.add('AstNode', entry);\r\n            return;\r\n        }\r\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\r\n            this.entries.add(subtype, entry);\r\n        }\r\n    }\r\n\r\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\r\n        let checks = stream(this.entries.get(type))\r\n            .concat(this.entries.get('AstNode'));\r\n        if (categories) {\r\n            checks = checks.filter(entry => categories.includes(entry.category));\r\n        }\r\n        return checks.map(entry => entry.check);\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\r\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map for mapping names to nodes could be established.\r\n     * During the usual checks on the nodes, they are put into this map with their name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerBeforeDocument(checkBefore: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\r\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map with all the collected nodes and their names is checked\r\n     * and validation hints are created for all nodes with the same name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerAfterDocument(checkAfter: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\r\n    }\r\n\r\n    protected wrapPreparationException(check: ValidationPreparation, messageContext: string, thisObj: unknown): ValidationPreparation {\r\n        return async (rootNode, accept, categories, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\r\n        };\r\n    }\r\n\r\n    get checksBefore(): ValidationPreparation[] {\r\n        return this.entriesBefore;\r\n    }\r\n\r\n    get checksAfter(): ValidationPreparation[] {\r\n        return this.entriesAfter;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { MismatchedTokenException } from 'chevrotain';\r\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\r\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry, ValidationSeverity } from './validation-registry.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { diagnosticData } from './validation-registry.js';\r\nimport type { LexingDiagnostic, LexingDiagnosticSeverity } from '../parser/token-builder.js';\r\n\r\nexport interface ValidationOptions {\r\n    /**\r\n     * If this is set, only the checks associated with these categories are executed; otherwise\r\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\r\n     */\r\n    categories?: ValidationCategory[];\r\n    /** If true, no further diagnostics are reported if there are lexing errors. */\r\n    stopAfterLexingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are parsing errors. */\r\n    stopAfterParsingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are linking errors. */\r\n    stopAfterLinkingErrors?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service for validating `LangiumDocument`s.\r\n */\r\nexport interface DocumentValidator {\r\n    /**\r\n     * Validates the whole specified document.\r\n     *\r\n     * @param document specified document to validate\r\n     * @param options options to control the validation process\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\r\n}\r\n\r\nexport class DefaultDocumentValidator implements DocumentValidator {\r\n\r\n    protected readonly validationRegistry: ValidationRegistry;\r\n    protected readonly metadata: LanguageMetaData;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.validationRegistry = services.validation.ValidationRegistry;\r\n        this.metadata = services.LanguageMetaData;\r\n    }\r\n\r\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const parseResult = document.parseResult;\r\n        const diagnostics: Diagnostic[] = [];\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        if (!options.categories || options.categories.includes('built-in')) {\r\n            this.processLexingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processParsingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processLinkingErrors(document, diagnostics, options);\r\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\r\n                return diagnostics;\r\n            }\r\n        }\r\n\r\n        // Process custom validations\r\n        try {\r\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error('An error occurred during validation:', err);\r\n        }\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        return diagnostics;\r\n    }\r\n\r\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...parseResult.lexerReport?.diagnostics ?? []] as LexingDiagnostic[];\r\n        for (const lexerDiagnostic of lexerDiagnostics) {\r\n            const severity = lexerDiagnostic.severity ?? 'error';\r\n            const diagnostic: Diagnostic = {\r\n                severity: toDiagnosticSeverity(severity),\r\n                range: {\r\n                    start: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! - 1\r\n                    },\r\n                    end: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! + lexerDiagnostic.length - 1\r\n                    }\r\n                },\r\n                message: lexerDiagnostic.message,\r\n                data: toDiagnosticData(severity),\r\n                source: this.getSource()\r\n            };\r\n            diagnostics.push(diagnostic);\r\n        }\r\n    }\r\n\r\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const parserError of parseResult.parserErrors) {\r\n            let range: Range | undefined = undefined;\r\n            // We can run into the chevrotain error recovery here\r\n            // The token contained in the parser error might be automatically inserted\r\n            // In this case every position value will be `NaN`\r\n            if (isNaN(parserError.token.startOffset)) {\r\n                // Some special parser error types contain a `previousToken`\r\n                // We can simply append our diagnostic to that token\r\n                if ('previousToken' in parserError) {\r\n                    const token = (parserError as MismatchedTokenException).previousToken;\r\n                    if (!isNaN(token.startOffset)) {\r\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\r\n                        range = { start: position, end: position};\r\n                    } else {\r\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\r\n                        // Point to document start\r\n                        const position: Position = { line: 0, character: 0 };\r\n                        range = { start: position, end: position};\r\n                    }\r\n                }\r\n            } else {\r\n                range = tokenToRange(parserError.token);\r\n            }\r\n            if (range) {\r\n                const diagnostic: Diagnostic = {\r\n                    severity: toDiagnosticSeverity('error'),\r\n                    range,\r\n                    message: parserError.message,\r\n                    data: diagnosticData(DocumentValidator.ParsingError),\r\n                    source: this.getSource()\r\n                };\r\n                diagnostics.push(diagnostic);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const reference of document.references) {\r\n            const linkingError = reference.error;\r\n            if (linkingError) {\r\n                const info: DiagnosticInfo<AstNode, string> = {\r\n                    node: linkingError.container,\r\n                    property: linkingError.property,\r\n                    index: linkingError.index,\r\n                    data: {\r\n                        code: DocumentValidator.LinkingError,\r\n                        containerType: linkingError.container.$type,\r\n                        property: linkingError.property,\r\n                        refText: linkingError.reference.$refText\r\n                    } satisfies LinkingErrorData\r\n                };\r\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const validationItems: Diagnostic[] = [];\r\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => {\r\n            validationItems.push(this.toDiagnostic(severity, message, info));\r\n        };\r\n\r\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\r\n\r\n        return validationItems;\r\n    }\r\n\r\n    protected async validateAstBefore(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksBefore = this.validationRegistry.checksBefore;\r\n        for (const checkBefore of checksBefore) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkBefore(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected async validateAstNodes(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        await Promise.all(streamAst(rootNode).map(async node => {\r\n            await interruptAndCheck(cancelToken);\r\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\r\n            for (const check of checks) {\r\n                await check(node, acceptor, cancelToken);\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected async validateAstAfter(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksAfter = this.validationRegistry.checksAfter;\r\n        for (const checkAfter of checksAfter) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkAfter(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected toDiagnostic<N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N, string>): Diagnostic {\r\n        return {\r\n            message,\r\n            range: getDiagnosticRange(info),\r\n            severity: toDiagnosticSeverity(severity),\r\n            code: info.code,\r\n            codeDescription: info.codeDescription,\r\n            tags: info.tags,\r\n            relatedInformation: info.relatedInformation,\r\n            data: info.data,\r\n            source: this.getSource()\r\n        };\r\n    }\r\n\r\n    protected getSource(): string | undefined {\r\n        return this.metadata.languageId;\r\n    }\r\n}\r\n\r\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\r\n    if (info.range) {\r\n        return info.range;\r\n    }\r\n    let cstNode: CstNode | undefined;\r\n    if (typeof info.property === 'string') {\r\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\r\n    } else if (typeof info.keyword === 'string') {\r\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\r\n    }\r\n    cstNode ??= info.node.$cstNode;\r\n    if (!cstNode) {\r\n        return {\r\n            start: { line: 0, character: 0 },\r\n            end: { line: 0, character: 0 }\r\n        };\r\n    }\r\n    return cstNode.range;\r\n}\r\n\r\n/**\r\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\r\n *\r\n * @param severity The lexing diagnostic severity\r\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\r\n */\r\nexport function toDiagnosticSeverity(severity: LexingDiagnosticSeverity): DiagnosticSeverity {\r\n    switch (severity) {\r\n        case 'error':\r\n            return 1 satisfies typeof DiagnosticSeverity.Error;\r\n        case 'warning':\r\n            return 2 satisfies typeof DiagnosticSeverity.Warning;\r\n        case 'info':\r\n            return 3 satisfies typeof DiagnosticSeverity.Information;\r\n        case 'hint':\r\n            return 4 satisfies typeof DiagnosticSeverity.Hint;\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport function toDiagnosticData(severity: LexingDiagnosticSeverity): DiagnosticData {\r\n    switch (severity) {\r\n        case 'error':\r\n            return diagnosticData(DocumentValidator.LexingError);\r\n        case 'warning':\r\n            return diagnosticData(DocumentValidator.LexingWarning);\r\n        case 'info':\r\n            return diagnosticData(DocumentValidator.LexingInfo);\r\n        case 'hint':\r\n            return diagnosticData(DocumentValidator.LexingHint);\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport namespace DocumentValidator {\r\n    export const LexingError = 'lexing-error';\r\n    export const LexingWarning = 'lexing-warning';\r\n    export const LexingInfo = 'lexing-info';\r\n    export const LexingHint = 'lexing-hint';\r\n    export const ParsingError = 'parsing-error';\r\n    export const LinkingError = 'linking-error';\r\n}\r\n\r\nexport interface LinkingErrorData extends DiagnosticData {\r\n    containerType: string\r\n    property: string\r\n    refText: string\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from './ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isLinkingError } from '../syntax-tree.js';\r\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\r\n */\r\nexport interface AstNodeDescriptionProvider {\r\n\r\n    /**\r\n     * Create a description for the given AST node. This service method is typically used while indexing\r\n     * the contents of a document and during scope computation.\r\n     *\r\n     * @param node An AST node.\r\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\r\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\r\n     *     of your language.\r\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\r\n     */\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\r\n\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n    }\r\n\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription {\r\n        const doc = document ?? getDocument(node);\r\n        name ??= this.nameProvider.getName(node);\r\n        const path = this.astNodeLocator.getAstNodePath(node);\r\n        if (!name) {\r\n            throw new Error(`Node at path ${path} has no name.`);\r\n        }\r\n        let nameNodeSegment: DocumentSegment | undefined;\r\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\r\n        return {\r\n            node,\r\n            name,\r\n            get nameSegment() {\r\n                return nameSegmentGetter();\r\n            },\r\n            selectionSegment: toDocumentSegment(node.$cstNode),\r\n            type: node.$type,\r\n            documentUri: doc.uri,\r\n            path\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a cross-reference within a document or between two documents.\r\n */\r\nexport interface ReferenceDescription {\r\n    /** URI of the document that holds a reference */\r\n    sourceUri: URI\r\n    /** Path to AstNode that holds a reference */\r\n    sourcePath: string\r\n    /** Target document uri */\r\n    targetUri: URI\r\n    /** Path to the target AstNode inside the document */\r\n    targetPath: string\r\n    /** Segment of the reference text. */\r\n    segment: DocumentSegment\r\n    /** Marks a local reference i.e. a cross reference inside a document.   */\r\n    local?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\r\n * to determine which documents are affected and should be rebuilt when a document is changed.\r\n */\r\nexport interface ReferenceDescriptionProvider {\r\n    /**\r\n     * Create descriptions of all cross-references found in the given document. These descriptions are\r\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\r\n     * a document change is reported by the client.\r\n     *\r\n     * @param document The document in which to gather cross-references.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\r\n}\r\n\r\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\r\n\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\r\n        const descr: ReferenceDescription[] = [];\r\n        const rootNode = document.parseResult.value;\r\n        for (const astNode of streamAst(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\r\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\r\n                const description = this.createDescription(refInfo);\r\n                if (description) {\r\n                    descr.push(description);\r\n                }\r\n            });\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\r\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\r\n        const refCstNode = refInfo.reference.$refNode;\r\n        if (!targetNodeDescr || !refCstNode) {\r\n            return undefined;\r\n        }\r\n        const docUri = getDocument(refInfo.container).uri;\r\n        return {\r\n            sourceUri: docUri,\r\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\r\n            targetUri: targetNodeDescr.documentUri,\r\n            targetPath: targetNodeDescr.path,\r\n            segment: toDocumentSegment(refCstNode),\r\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode } from '../syntax-tree.js';\r\n\r\n/**\r\n * Language-specific service for locating an `AstNode` in a document.\r\n */\r\nexport interface AstNodeLocator {\r\n\r\n    /**\r\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\r\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\r\n     *\r\n     * @param node The `AstNode` for which to create the path.\r\n     * @returns a path represented by a `string` that identifies `node` inside its document.\r\n     * @see AstNodeLocator.getAstNode\r\n     */\r\n    getAstNodePath(node: AstNode): string;\r\n\r\n    /**\r\n     * Locates an `AstNode` inside another node by following the given path.\r\n     *\r\n     * @param node Parent element.\r\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\r\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\r\n     * @see AstNodeLocator.getAstNodePath\r\n     */\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeLocator implements AstNodeLocator {\r\n    protected segmentSeparator = '/';\r\n    protected indexSeparator = '@';\r\n\r\n    getAstNodePath(node: AstNode): string {\r\n        if (node.$container) {\r\n            const containerPath = this.getAstNodePath(node.$container);\r\n            const newSegment = this.getPathSegment(node);\r\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\r\n            return nodePath;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\r\n        if (!$containerProperty) {\r\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\r\n        }\r\n        if ($containerIndex !== undefined) {\r\n            return $containerProperty + this.indexSeparator + $containerIndex;\r\n        }\r\n        return $containerProperty;\r\n    }\r\n\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\r\n        const segments = path.split(this.segmentSeparator);\r\n        return segments.reduce((previousValue, currentValue) => {\r\n            if (!previousValue || currentValue.length === 0) {\r\n                return previousValue;\r\n            }\r\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\r\n            if (propertyIndex > 0) {\r\n                const property = currentValue.substring(0, propertyIndex);\r\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\r\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\r\n                return array?.[arrayIndex];\r\n            }\r\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\r\n        }, node) as T;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nexport interface Disposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\nexport interface AsyncDisposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport namespace Disposable {\r\n    export function create(callback: () => Promise<void>): AsyncDisposable;\r\n    export function create(callback: () => void): Disposable;\r\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\r\n        return {\r\n            dispose: async () => await callback()\r\n        };\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Emitter } from '../utils/event.js';\r\nimport type {\r\n    ConfigurationItem,\r\n    DidChangeConfigurationParams,\r\n    DidChangeConfigurationRegistrationOptions,\r\n    Disposable,\r\n    Event,\r\n    InitializeParams,\r\n    InitializedParams\r\n} from 'vscode-languageserver-protocol';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { Deferred } from '../utils/promise-utils.js';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nexport interface ConfigurationProvider {\r\n\r\n    /**\r\n     * A promise that resolves when the configuration provider is ready to be used.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Returns a configuration value stored for the given language.\r\n     *\r\n     * @param language The language id\r\n     * @param configuration Configuration name\r\n     */\r\n    getConfiguration(language: string, configuration: string): Promise<any>;\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void;\r\n\r\n    /**\r\n     * Get notified after a configuration section has been updated.\r\n     */\r\n    onConfigurationSectionUpdate(callback: ConfigurationSectionUpdateListener): Disposable\r\n}\r\n\r\nexport interface ConfigurationInitializedParams extends InitializedParams {\r\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\r\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\r\n}\r\n\r\nexport interface ConfigurationSectionUpdate {\r\n    /**\r\n     * The name of the configuration section that has been updated.\r\n     */\r\n    section: string;\r\n\r\n    /**\r\n     * The updated configuration section.\r\n     */\r\n    configuration: any;\r\n}\r\n\r\nexport type ConfigurationSectionUpdateListener = (update: ConfigurationSectionUpdate) => void;\r\n\r\n/**\r\n * Base configuration provider for building up other configuration providers\r\n */\r\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected settings: Record<string, Record<string, any>> = {};\r\n    protected workspaceConfig = false;\r\n    protected onConfigurationSectionUpdateEmitter = new Emitter<ConfigurationSectionUpdate>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\r\n    }\r\n\r\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\r\n        if (this.workspaceConfig) {\r\n            if (params.register) {\r\n                // params.register(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n\r\n                const languages = this.serviceRegistry.all;\r\n                params.register({\r\n                    // Listen to configuration changes for all languages\r\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\r\n                });\r\n            }\r\n\r\n            if (params.fetchConfiguration) {\r\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\r\n                    // Fetch the configuration changes for all languages\r\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\r\n                });\r\n\r\n                // get workspace configurations (default scope URI)\r\n                const configs = await params.fetchConfiguration(configToUpdate);\r\n                configToUpdate.forEach((conf, idx) => {\r\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\r\n                });\r\n            }\r\n        }\r\n        this._ready.resolve();\r\n    }\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void {\r\n        if (!change.settings) {\r\n            return;\r\n        }\r\n        Object.keys(change.settings).forEach(section => {\r\n            const configuration = change.settings[section];\r\n            this.updateSectionConfiguration(section, configuration);\r\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\r\n        });\r\n    }\r\n\r\n    protected updateSectionConfiguration(section: string, configuration: any): void {\r\n        this.settings[section] = configuration;\r\n    }\r\n\r\n    /**\r\n    * Returns a configuration value stored for the given language.\r\n    *\r\n    * @param language The language id\r\n    * @param configuration Configuration name\r\n    */\r\n    async getConfiguration(language: string, configuration: string): Promise<any> {\r\n        await this.ready;\r\n\r\n        const sectionName = this.toSectionName(language);\r\n        if (this.settings[sectionName]) {\r\n            return this.settings[sectionName][configuration];\r\n        }\r\n    }\r\n\r\n    protected toSectionName(languageId: string): string {\r\n        return `${languageId}`;\r\n    }\r\n\r\n    get onConfigurationSectionUpdate(): Event<ConfigurationSectionUpdate> {\r\n        return this.onConfigurationSectionUpdateEmitter.event;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Disposable } from '../utils/disposable.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport type { Deferred } from '../utils/promise-utils.js';\r\nimport type { ValidationOptions } from '../validation/document-validator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory, TextDocumentProvider } from './documents.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { OperationCancelled, interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { ValidationCategory } from '../validation/validation-registry.js';\r\nimport { DocumentState } from './documents.js';\r\n\r\nexport interface BuildOptions {\r\n    /**\r\n     * Control the validation phase with this option:\r\n     *  - `true` enables all validation checks and forces revalidating the documents\r\n     *  - `false` or `undefined` disables all validation checks\r\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\r\n     */\r\n    validation?: boolean | ValidationOptions\r\n}\r\n\r\nexport interface DocumentBuildState {\r\n    /** Whether a document has completed its last build process. */\r\n    completed: boolean\r\n    /** The options used for the last build process. */\r\n    options: BuildOptions\r\n    /** Additional information about the last build result. */\r\n    result?: {\r\n        validationChecks?: ValidationCategory[]\r\n    }\r\n}\r\n\r\n/**\r\n * Shared-service for building and updating `LangiumDocument`s.\r\n */\r\nexport interface DocumentBuilder {\r\n\r\n    /** The options used for rebuilding documents after an update. */\r\n    updateBuildOptions: BuildOptions;\r\n\r\n    /**\r\n     * Execute all necessary build steps for the given documents.\r\n     *\r\n     * @param documents Set of documents to be built.\r\n     * @param options Options for the document builder.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * This method is called when a document change is detected. It updates the state of all\r\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\r\n     *\r\n     * @param changed URIs of changed or created documents\r\n     * @param deleted URIs of deleted documents\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCancelled` if cancellation is detected during execution\r\n     */\r\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Notify the given callback when a document update was triggered, but before any document\r\n     * is rebuilt. Listeners to this event should not perform any long-running task.\r\n     */\r\n    onUpdate(callback: DocumentUpdateListener): Disposable;\r\n\r\n    /**\r\n     * Notify the given callback when a set of documents has been built reaching the specified target state.\r\n     */\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\r\n\r\n    /**\r\n     * Notify the specified callback when a document has been built reaching the specified target state.\r\n     * Unlike {@link onBuildPhase} the listener is called for every single document.\r\n     *\r\n     * There are two main advantages compared to {@link onBuildPhase}:\r\n     * 1. If the build is cancelled, {@link onDocumentPhase} will still fire for documents that have reached a specific state.\r\n     *    Meanwhile, {@link onBuildPhase} won't fire for that state.\r\n     * 2. The {@link DocumentBuilder} ensures that all {@link DocumentPhaseListener} instances are called for a built document.\r\n     *    Even if the build is cancelled before those listeners were called.\r\n     */\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable;\r\n\r\n    /**\r\n     * Wait until the workspace has reached the specified state for all documents.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Wait until the document specified by the {@link uri} has reached the specified state.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\r\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\r\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n}\r\n\r\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\r\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\r\nexport type DocumentPhaseListener = (built: LangiumDocument, cancelToken: CancellationToken) => void | Promise<void>\r\nexport class DefaultDocumentBuilder implements DocumentBuilder {\r\n\r\n    updateBuildOptions: BuildOptions = {\r\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\r\n        validation: {\r\n            categories: ['built-in', 'fast']\r\n        }\r\n    };\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly textDocuments: TextDocumentProvider | undefined;\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\r\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\r\n    protected readonly documentPhaseListeners = new MultiMap<DocumentState, DocumentPhaseListener>();\r\n    protected readonly buildState = new Map<string, DocumentBuildState>();\r\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\r\n    protected currentState = DocumentState.Changed;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.indexManager = services.workspace.IndexManager;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const document of documents) {\r\n            const key = document.uri.toString();\r\n            if (document.state === DocumentState.Validated) {\r\n                if (typeof options.validation === 'boolean' && options.validation) {\r\n                    // Force re-running all validation checks\r\n                    document.state = DocumentState.IndexedReferences;\r\n                    document.diagnostics = undefined;\r\n                    this.buildState.delete(key);\r\n                } else if (typeof options.validation === 'object') {\r\n                    const buildState = this.buildState.get(key);\r\n                    const previousCategories = buildState?.result?.validationChecks;\r\n                    if (previousCategories) {\r\n                        // Validation with explicit options was requested for a document that has already been partly validated.\r\n                        // In this case, we need to merge the previous validation categories with the new ones.\r\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\r\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\r\n                        if (categories.length > 0) {\r\n                            this.buildState.set(key, {\r\n                                completed: false,\r\n                                options: {\r\n                                    validation: {\r\n                                        ...options.validation,\r\n                                        categories\r\n                                    }\r\n                                },\r\n                                result: buildState.result\r\n                            });\r\n                            document.state = DocumentState.IndexedReferences;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Default: forget any previous build options\r\n                this.buildState.delete(key);\r\n            }\r\n        }\r\n        this.currentState = DocumentState.Changed;\r\n        await this.emitUpdate(documents.map(e => e.uri), []);\r\n        await this.buildDocuments(documents, options, cancelToken);\r\n    }\r\n\r\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\r\n        this.currentState = DocumentState.Changed;\r\n        // Remove all metadata of documents that are reported as deleted\r\n        for (const deletedUri of deleted) {\r\n            this.langiumDocuments.deleteDocument(deletedUri);\r\n            this.buildState.delete(deletedUri.toString());\r\n            this.indexManager.remove(deletedUri);\r\n        }\r\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\r\n        for (const changedUri of changed) {\r\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\r\n            if (!invalidated) {\r\n                // We create an unparsed, invalid document.\r\n                // This will be parsed as soon as we reach the first document builder phase.\r\n                // This allows to cancel the parsing process later in case we need it.\r\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\r\n                newDocument.state = DocumentState.Changed;\r\n                this.langiumDocuments.addDocument(newDocument);\r\n            }\r\n            this.buildState.delete(changedUri.toString());\r\n        }\r\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\r\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\r\n        this.langiumDocuments.all\r\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\r\n            .forEach(doc => {\r\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n                linker.unlink(doc);\r\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\r\n                doc.diagnostics = undefined;\r\n            });\r\n        // Notify listeners of the update\r\n        await this.emitUpdate(changed, deleted);\r\n        // Only allow interrupting the execution after all state changes are done\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        // Collect and sort all documents that we should rebuild\r\n        const rebuildDocuments = this.sortDocuments(\r\n            this.langiumDocuments.all\r\n                .filter(doc =>\r\n                    // This includes those that were reported as changed and those that we selected for relinking\r\n                    doc.state < DocumentState.Linked\r\n                    // This includes those for which a previous build has been cancelled\r\n                    || !this.buildState.get(doc.uri.toString())?.completed\r\n                )\r\n                .toArray()\r\n        );\r\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\r\n    }\r\n\r\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\r\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\r\n    }\r\n\r\n    /**\r\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\r\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\r\n     *\r\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\r\n     * in files that are currently not opened in the editor.\r\n     */\r\n    protected sortDocuments(documents: LangiumDocument[]): LangiumDocument[] {\r\n        let left = 0;\r\n        let right = documents.length - 1;\r\n\r\n        while (left < right) {\r\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\r\n                left++;\r\n            }\r\n\r\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\r\n                right--;\r\n            }\r\n\r\n            if (left < right) {\r\n                [documents[left], documents[right]] = [documents[right], documents[left]];\r\n            }\r\n        }\r\n\r\n        return documents;\r\n    }\r\n\r\n    private hasTextDocument(doc: LangiumDocument): boolean {\r\n        return Boolean(this.textDocuments?.get(doc.uri));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given document should be relinked after changes were found in the given URIs.\r\n     */\r\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        // Relink documents with linking errors -- maybe those references can be resolved now\r\n        if (document.references.some(ref => ref.error !== undefined)) {\r\n            return true;\r\n        }\r\n        // Check whether the document is affected by any of the changed URIs\r\n        return this.indexManager.isAffected(document, changedUris);\r\n    }\r\n\r\n    onUpdate(callback: DocumentUpdateListener): Disposable {\r\n        this.updateListeners.push(callback);\r\n        return Disposable.create(() => {\r\n            const index = this.updateListeners.indexOf(callback);\r\n            if (index >= 0) {\r\n                this.updateListeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the given documents by stepping through all build phases. If a document's state indicates\r\n     * that a certain build phase is already done, the phase is skipped for that document.\r\n     *\r\n     * @param documents The documents to build.\r\n     * @param options the {@link BuildOptions} to use.\r\n     * @param cancelToken A cancellation token that can be used to cancel the build.\r\n     * @returns A promise that resolves when the build is done.\r\n     */\r\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\r\n        this.prepareBuild(documents, options);\r\n        // 0. Parse content\r\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\r\n            this.langiumDocumentFactory.update(doc, cancelToken)\r\n        );\r\n        // 1. Index content\r\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\r\n            this.indexManager.updateContent(doc, cancelToken)\r\n        );\r\n        // 2. Compute scopes\r\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\r\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\r\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\r\n        });\r\n        // 3. Linking\r\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\r\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n            return linker.link(doc, cancelToken);\r\n        });\r\n        // 4. Index references\r\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\r\n            this.indexManager.updateReferences(doc, cancelToken)\r\n        );\r\n        // 5. Validation\r\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\r\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\r\n            this.validate(doc, cancelToken)\r\n        );\r\n\r\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\r\n        for (const doc of documents) {\r\n            const state = this.buildState.get(doc.uri.toString());\r\n            if (state) {\r\n                state.completed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\r\n     *\r\n     * @param documents collection of documents to be built\r\n     * @param options the {@link BuildOptions} to use\r\n     */\r\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\r\n        for (const doc of documents) {\r\n            const key = doc.uri.toString();\r\n            const state = this.buildState.get(key);\r\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\r\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\r\n            // and continue where it was cancelled.\r\n            if (!state || state.completed) {\r\n                this.buildState.set(key, {\r\n                    completed: false,\r\n                    options,\r\n                    result: state?.result\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\r\n     *\r\n     * @param documents The array of documents to process.\r\n     * @param targetState The target {@link DocumentState} to bring the documents to.\r\n     * @param cancelToken A token that can be used to cancel the operation.\r\n     * @param callback A function to be called for each document.\r\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\r\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\r\n     */\r\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\r\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\r\n        const filtered = documents.filter(doc => doc.state < targetState);\r\n        for (const document of filtered) {\r\n            await interruptAndCheck(cancelToken);\r\n            await callback(document);\r\n            document.state = targetState;\r\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\r\n        }\r\n\r\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\r\n        // For example, this happens in case the cancellation triggers between the processing of two documents\r\n        // Or files that were picked up during the workspace initialization\r\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\r\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\r\n        this.currentState = targetState;\r\n    }\r\n\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\r\n        this.buildPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.buildPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable {\r\n        this.documentPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.documentPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\r\n        let uri: URI | undefined = undefined;\r\n        if (uriOrToken && 'path' in uriOrToken) {\r\n            uri = uriOrToken;\r\n        } else {\r\n            cancelToken = uriOrToken;\r\n        }\r\n        cancelToken ??= CancellationToken.None;\r\n        if (uri) {\r\n            const document = this.langiumDocuments.getDocument(uri);\r\n            if (document && document.state > state) {\r\n                return Promise.resolve(uri);\r\n            }\r\n        }\r\n        if (this.currentState >= state) {\r\n            return Promise.resolve(undefined);\r\n        } else if (cancelToken.isCancellationRequested) {\r\n            return Promise.reject(OperationCancelled);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const buildDisposable = this.onBuildPhase(state, () => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                if (uri) {\r\n                    const document = this.langiumDocuments.getDocument(uri);\r\n                    resolve(document?.uri);\r\n                } else {\r\n                    resolve(undefined);\r\n                }\r\n            });\r\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                reject(OperationCancelled);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async notifyDocumentPhase(document: LangiumDocument, state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        const listeners = this.documentPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            try {\r\n                await listener(document, cancelToken);\r\n            } catch (err) {\r\n                // Ignore cancellation errors\r\n                // We want to finish the listeners before throwing\r\n                if (!isOperationCancelled(err)) {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        if (documents.length === 0) {\r\n            // Don't notify when no document has been processed\r\n            return;\r\n        }\r\n        const listeners = this.buildPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            await interruptAndCheck(cancelToken);\r\n            await listener(documents, cancelToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given document should be validated during a build. The default\r\n     * implementation checks the `validation` property of the build options. If it's set to `true`\r\n     * or a `ValidationOptions` object, the document is included in the validation phase.\r\n     */\r\n    protected shouldValidate(document: LangiumDocument): boolean {\r\n        return Boolean(this.getBuildOptions(document).validation);\r\n    }\r\n\r\n    /**\r\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\r\n     * If the document already contains diagnostics, the new ones are added to the list.\r\n     */\r\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\r\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\r\n        const validationSetting = this.getBuildOptions(document).validation;\r\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\r\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\r\n        if (document.diagnostics) {\r\n            document.diagnostics.push(...diagnostics);\r\n        } else {\r\n            document.diagnostics = diagnostics;\r\n        }\r\n\r\n        // Store information about the executed validation in the build state\r\n        const state = this.buildState.get(document.uri.toString());\r\n        if (state) {\r\n            state.result ??= {};\r\n            const newCategories = options?.categories ?? ValidationCategory.all;\r\n            if (state.result.validationChecks) {\r\n                state.result.validationChecks.push(...newCategories);\r\n            } else {\r\n                state.result.validationChecks = [...newCategories];\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\r\n        return this.buildState.get(document.uri.toString())?.options ?? {};\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { ContextCache } from '../utils/caching.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\nimport type { ReferenceDescription } from './ast-descriptions.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\n\r\n/**\r\n * The index manager is responsible for keeping metadata about symbols and cross-references\r\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\r\n * and completion. This service is shared between all languages of a language server.\r\n */\r\nexport interface IndexManager {\r\n\r\n    /**\r\n     * Removes the specified document URI from the index.\r\n     * Necessary when documents are deleted and not referenceable anymore.\r\n     *\r\n     * @param uri The URI of the document for which index data shall be removed\r\n     */\r\n    remove(uri: URI): void;\r\n\r\n    /**\r\n     * Updates the information about the exportable content of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Updates the information about the cross-references of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Determine whether the given document could be affected by changes of the documents\r\n     * identified by the given URIs (second parameter). The document is typically regarded as\r\n     * affected if it contains a reference to any of the changed files.\r\n     *\r\n     * @param document Document to check whether it's affected\r\n     * @param changedUris URIs of the changed documents\r\n     */\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\r\n\r\n    /**\r\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\r\n     *\r\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\r\n     * @param uris If specified, only returns elements from the given URIs.\r\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\r\n     */\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\r\n\r\n    /**\r\n     * Returns all known references that are pointing to the given `targetNode`.\r\n     *\r\n     * @param targetNode the `AstNode` to look up references for\r\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\r\n     *\r\n     * @returns a `Stream` of references that are targeting the `targetNode`\r\n     */\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\r\n\r\n}\r\n\r\nexport class DefaultIndexManager implements IndexManager {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly documents: LangiumDocuments;\r\n    protected readonly astReflection: AstReflection;\r\n\r\n    /**\r\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\r\n     * The key used in this map is the string representation of the specific document URI.\r\n     */\r\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\r\n    /**\r\n     * This is a cache for the `allElements()` method.\r\n     * It caches the descriptions from `symbolIndex` grouped by types.\r\n     */\r\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\r\n    /**\r\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\r\n     * This is used to compute which elements are affected by a document change\r\n     * and for finding references to an AST node.\r\n     */\r\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.documents = services.workspace.LangiumDocuments;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.astReflection = services.AstReflection;\r\n    }\r\n\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\r\n        const targetDocUri = getDocument(targetNode).uri;\r\n        const result: ReferenceDescription[] = [];\r\n        this.referenceIndex.forEach(docRefs => {\r\n            docRefs.forEach(refDescr => {\r\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\r\n                    result.push(refDescr);\r\n                }\r\n            });\r\n        });\r\n        return stream(result);\r\n    }\r\n\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\r\n        let documentUris = stream(this.symbolIndex.keys());\r\n        if (uris) {\r\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\r\n        }\r\n        return documentUris\r\n            .map(uri => this.getFileDescriptions(uri, nodeType))\r\n            .flat();\r\n    }\r\n\r\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\r\n        if (!nodeType) {\r\n            return this.symbolIndex.get(uri) ?? [];\r\n        }\r\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\r\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\r\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\r\n        });\r\n        return descriptions;\r\n    }\r\n\r\n    remove(uri: URI): void {\r\n        const uriString = uri.toString();\r\n        this.symbolIndex.delete(uriString);\r\n        this.symbolByTypeIndex.clear(uriString);\r\n        this.referenceIndex.delete(uriString);\r\n    }\r\n\r\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\r\n        const uri = document.uri.toString();\r\n        this.symbolIndex.set(uri, exports);\r\n        this.symbolByTypeIndex.clear(uri);\r\n    }\r\n\r\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\r\n        this.referenceIndex.set(document.uri.toString(), indexData);\r\n    }\r\n\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        const references = this.referenceIndex.get(document.uri.toString());\r\n        if (!references) {\r\n            return false;\r\n        }\r\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\r\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { URI, UriUtils } from '../utils/uri-utils.js';\r\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\r\nimport type { WorkspaceLock } from './workspace-lock.js';\r\n\r\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\r\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\r\nexport type { WorkspaceFolder };\r\n\r\n/**\r\n * The workspace manager is responsible for finding source files in the workspace.\r\n * This service is shared between all languages of a language server.\r\n */\r\nexport interface WorkspaceManager {\r\n\r\n    /** The options used for the initial workspace build. */\r\n    initialBuildOptions: BuildOptions | undefined;\r\n\r\n    /**\r\n     * A promise that resolves when the workspace manager is ready to be used.\r\n     * Use this to ensure that the workspace manager has finished its initialization.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * The workspace folders of the current workspace.\r\n     * Available only after the `ready` promise resolves.\r\n     */\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: InitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Does the initial indexing of workspace folders.\r\n     * Collects information about exported and referenced AstNodes in\r\n     * each language file and stores it locally.\r\n     *\r\n     * @param folders The set of workspace folders to be indexed.\r\n     * @param cancelToken A cancellation token that can be used to cancel the operation.\r\n     *\r\n     * @throws OperationCancelled if a cancellation event has been detected\r\n     */\r\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n}\r\n\r\nexport class DefaultWorkspaceManager implements WorkspaceManager {\r\n\r\n    initialBuildOptions: BuildOptions = {};\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly documentBuilder: DocumentBuilder;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n    protected readonly mutex: WorkspaceLock;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected folders?: WorkspaceFolder[];\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.documentBuilder = services.workspace.DocumentBuilder;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n        this.mutex = services.workspace.WorkspaceLock;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined {\r\n        return this.folders;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.folders = params.workspaceFolders ?? undefined;\r\n    }\r\n\r\n    initialized(_params: InitializedParams): Promise<void> {\r\n        // Initialize the workspace even if there are no workspace folders\r\n        // We still want to load additional documents (language library or similar) during initialization\r\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\r\n    }\r\n\r\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\r\n        const documents = await this.performStartup(folders);\r\n        // Only after creating all documents do we check whether we need to cancel the initialization\r\n        // The document builder will later pick up on all unprocessed documents\r\n        await interruptAndCheck(cancelToken);\r\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Performs the uninterruptable startup sequence of the workspace manager.\r\n     * This methods loads all documents in the workspace and other documents and returns them.\r\n     */\r\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\r\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\r\n        const documents: LangiumDocument[] = [];\r\n        const collector = (document: LangiumDocument) => {\r\n            documents.push(document);\r\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\r\n                this.langiumDocuments.addDocument(document);\r\n            }\r\n        };\r\n        // Even though we don't await the initialization of the workspace manager,\r\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\r\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\r\n        await this.loadAdditionalDocuments(folders, collector);\r\n        await Promise.all(\r\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\r\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\r\n        );\r\n        this._ready.resolve();\r\n        return documents;\r\n    }\r\n\r\n    /**\r\n     * Load all additional documents that shall be visible in the context of the given workspace\r\n     * folders and add them to the collector. This can be used to include built-in libraries of\r\n     * your language, which can be either loaded from provided files or constructed in memory.\r\n     */\r\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Determine the root folder of the source documents in the given workspace folder.\r\n     * The default implementation returns the URI of the workspace folder, but you can override\r\n     * this to return a subfolder like `src` instead.\r\n     */\r\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\r\n        return URI.parse(workspaceFolder.uri);\r\n    }\r\n\r\n    /**\r\n     * Traverse the file system folder identified by the given URI and its subfolders. All\r\n     * contained files that match the file extensions are added to the collector.\r\n     */\r\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\r\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\r\n        await Promise.all(content.map(async entry => {\r\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\r\n                if (entry.isDirectory) {\r\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\r\n                } else if (entry.isFile) {\r\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\r\n                    collector(document);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given folder entry shall be included while indexing the workspace.\r\n     */\r\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\r\n        const name = UriUtils.basename(entry.uri);\r\n        if (name.startsWith('.')) {\r\n            return false;\r\n        }\r\n        if (entry.isDirectory) {\r\n            return name !== 'node_modules' && name !== 'out';\r\n        } else if (entry.isFile) {\r\n            const extname = UriUtils.extname(entry.uri);\r\n            return fileExtensions.includes(extname);\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ILexerErrorMessageProvider, ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { Lexer as ChevrotainLexer, defaultLexerErrorProvider } from 'chevrotain';\r\nimport type { LexingReport, TokenBuilder } from './token-builder.js';\r\n\r\nexport class DefaultLexerErrorMessageProvider implements ILexerErrorMessageProvider {\r\n\r\n    buildUnexpectedCharactersMessage(fullText: string, startOffset: number, length: number, line?: number, column?: number): string {\r\n        return defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\r\n    }\r\n\r\n    buildUnableToPopLexerModeMessage(token: IToken): string {\r\n        return defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\r\n    }\r\n}\r\n\r\nexport interface LexerResult {\r\n    /**\r\n     * A list of all tokens that were lexed from the input.\r\n     *\r\n     * Note that Langium requires the optional properties\r\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\r\n     */\r\n    tokens: IToken[];\r\n    /**\r\n     * Contains hidden tokens, usually comments.\r\n     */\r\n    hidden: IToken[];\r\n    errors: ILexingError[];\r\n    report?: LexingReport;\r\n}\r\n\r\nexport type TokenizeMode = 'full' | 'partial';\r\n\r\nexport interface TokenizeOptions {\r\n    mode?: TokenizeMode;\r\n}\r\n\r\nexport const DEFAULT_TOKENIZE_OPTIONS: TokenizeOptions = { mode: 'full' };\r\n\r\nexport interface Lexer {\r\n    readonly definition: TokenTypeDictionary;\r\n    tokenize(text: string, options?: TokenizeOptions): LexerResult;\r\n}\r\n\r\nexport class DefaultLexer implements Lexer {\r\n\r\n    protected readonly tokenBuilder: TokenBuilder;\r\n    protected readonly errorMessageProvider: ILexerErrorMessageProvider;\r\n    protected tokenTypes: TokenTypeDictionary;\r\n    protected chevrotainLexer: ChevrotainLexer;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\r\n        this.tokenBuilder = services.parser.TokenBuilder;\r\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\r\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\r\n        });\r\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\r\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\r\n            positionTracking: 'full',\r\n            skipValidations: production,\r\n            errorMessageProvider: this.errorMessageProvider\r\n        });\r\n    }\r\n\r\n    get definition(): TokenTypeDictionary {\r\n        return this.tokenTypes;\r\n    }\r\n\r\n    tokenize(text: string, _options: TokenizeOptions = DEFAULT_TOKENIZE_OPTIONS): LexerResult {\r\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\r\n        return {\r\n            tokens: chevrotainResult.tokens,\r\n            errors: chevrotainResult.errors,\r\n            hidden: chevrotainResult.groups.hidden ?? [],\r\n            report: this.tokenBuilder.flushLexingReport?.(text)\r\n        };\r\n    }\r\n\r\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\r\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\r\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\r\n        const res: TokenTypeDictionary = {};\r\n        tokens.forEach(token => res[token.name] = token);\r\n        return res;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenType array\r\n */\r\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\r\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\r\n */\r\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\r\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\r\n */\r\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\r\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Position, Range } from 'vscode-languageserver-types';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface JSDocComment extends JSDocValue {\r\n    readonly elements: JSDocElement[]\r\n    getTag(name: string): JSDocTag | undefined\r\n    getTags(name: string): JSDocTag[]\r\n}\r\n\r\nexport type JSDocElement = JSDocParagraph | JSDocTag;\r\n\r\nexport type JSDocInline = JSDocTag | JSDocLine;\r\n\r\nexport interface JSDocValue {\r\n    /**\r\n     * Represents the range that this JSDoc element occupies.\r\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\r\n     */\r\n    readonly range: Range\r\n    /**\r\n     * Renders this JSDoc element to a plain text representation.\r\n     */\r\n    toString(): string\r\n    /**\r\n     * Renders this JSDoc element to a markdown representation.\r\n     *\r\n     * @param options Rendering options to customize the markdown result.\r\n     */\r\n    toMarkdown(options?: JSDocRenderOptions): string\r\n}\r\n\r\nexport interface JSDocParagraph extends JSDocValue {\r\n    readonly inlines: JSDocInline[]\r\n}\r\n\r\nexport interface JSDocLine extends JSDocValue {\r\n    readonly text: string\r\n}\r\n\r\nexport interface JSDocTag extends JSDocValue {\r\n    readonly name: string\r\n    readonly content: JSDocParagraph\r\n    readonly inline: boolean\r\n}\r\n\r\nexport interface JSDocParseOptions {\r\n    /**\r\n     * The start symbol of your comment format. Defaults to `/**`.\r\n     */\r\n    readonly start?: RegExp | string\r\n    /**\r\n     * The symbol that start a line of your comment format. Defaults to `*`.\r\n     */\r\n    readonly line?: RegExp | string\r\n    /**\r\n     * The end symbol of your comment format. Defaults to `*\\/`.\r\n     */\r\n    readonly end?: RegExp | string\r\n}\r\n\r\nexport interface JSDocRenderOptions {\r\n    /**\r\n     * Determines the style for rendering tags. Defaults to `italic`.\r\n     */\r\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\r\n    /**\r\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\r\n     */\r\n    link?: 'code' | 'plain'\r\n    /**\r\n     * Custom tag rendering function.\r\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\r\n     */\r\n    renderTag?(tag: JSDocTag): string | undefined\r\n    /**\r\n     * Custom link rendering function. Accepts a link target and a display value for the link.\r\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\r\n     */\r\n    renderLink?(link: string, display: string): string | undefined\r\n}\r\n\r\n/**\r\n * Parses a JSDoc from a `CstNode` containing a comment.\r\n *\r\n * @param node A `CstNode` from a parsed Langium document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\r\n/**\r\n * Parses a JSDoc from a string comment.\r\n *\r\n * @param content A string containing the source of the JSDoc comment.\r\n * @param start The start position the comment occupies in the source document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\r\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\r\n    let opts: JSDocParseOptions | undefined;\r\n    let position: Position | undefined;\r\n    if (typeof node === 'string') {\r\n        position = start as Position | undefined;\r\n        opts = options as JSDocParseOptions | undefined;\r\n    } else {\r\n        position = node.range.start;\r\n        opts = start as JSDocParseOptions | undefined;\r\n    }\r\n    if (!position) {\r\n        position = Position.create(0, 0);\r\n    }\r\n\r\n    const lines = getLines(node);\r\n    const normalizedOptions = normalizeOptions(opts);\r\n\r\n    const tokens = tokenize({\r\n        lines,\r\n        position,\r\n        options: normalizedOptions\r\n    });\r\n\r\n    return parseJSDocComment({\r\n        index: 0,\r\n        tokens,\r\n        position\r\n    });\r\n}\r\n\r\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\r\n    const normalizedOptions = normalizeOptions(options);\r\n    const lines = getLines(node);\r\n    if (lines.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    const first = lines[0];\r\n    const last = lines[lines.length - 1];\r\n    const firstRegex = normalizedOptions.start;\r\n    const lastRegex = normalizedOptions.end;\r\n\r\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\r\n}\r\n\r\nfunction getLines(node: CstNode | string): string[] {\r\n    let content = '';\r\n    if (typeof node === 'string') {\r\n        content = node;\r\n    } else {\r\n        content = node.text;\r\n    }\r\n    const lines = content.split(NEWLINE_REGEXP);\r\n    return lines;\r\n}\r\n\r\n// Tokenization\r\n\r\ninterface JSDocToken {\r\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\r\n    content: string\r\n    range: Range\r\n}\r\n\r\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\r\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\r\n\r\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n    let currentLine = context.position.line;\r\n    let currentCharacter = context.position.character;\r\n    for (let i = 0; i < context.lines.length; i++) {\r\n        const first = i === 0;\r\n        const last = i === context.lines.length - 1;\r\n        let line = context.lines[i];\r\n        let index = 0;\r\n\r\n        if (first && context.options.start) {\r\n            const match = context.options.start?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        } else {\r\n            const match = context.options.line?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        }\r\n        if (last) {\r\n            const match = context.options.end?.exec(line);\r\n            if (match) {\r\n                line = line.substring(0, match.index);\r\n            }\r\n        }\r\n\r\n        line = line.substring(0, lastCharacter(line));\r\n        const whitespaceEnd = skipWhitespace(line, index);\r\n\r\n        if (whitespaceEnd >= line.length) {\r\n            // Only create a break token when we already have previous tokens\r\n            if (tokens.length > 0) {\r\n                const position = Position.create(currentLine, currentCharacter);\r\n                tokens.push({\r\n                    type: 'break',\r\n                    content: '',\r\n                    range: Range.create(position, position)\r\n                });\r\n            }\r\n        } else {\r\n            tagRegex.lastIndex = index;\r\n            const tagMatch = tagRegex.exec(line);\r\n            if (tagMatch) {\r\n                const fullMatch = tagMatch[0];\r\n                const value = tagMatch[1];\r\n                const start = Position.create(currentLine, currentCharacter + index);\r\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\r\n                tokens.push({\r\n                    type: 'tag',\r\n                    content: value,\r\n                    range: Range.create(start, end)\r\n                });\r\n                index += fullMatch.length;\r\n                index = skipWhitespace(line, index);\r\n            }\r\n\r\n            if (index < line.length) {\r\n                const rest = line.substring(index);\r\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\r\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\r\n            }\r\n        }\r\n\r\n        currentLine++;\r\n        currentCharacter = 0;\r\n    }\r\n\r\n    // Remove last break token if there is one\r\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\r\n        return tokens.slice(0, -1);\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n\r\n    if (tags.length === 0) {\r\n        const start = Position.create(lineIndex, characterIndex);\r\n        const end = Position.create(lineIndex, characterIndex + line.length);\r\n        tokens.push({\r\n            type: 'text',\r\n            content: line,\r\n            range: Range.create(start, end)\r\n        });\r\n    } else {\r\n        let lastIndex = 0;\r\n        for (const match of tags) {\r\n            const matchIndex = match.index!;\r\n            const startContent = line.substring(lastIndex, matchIndex);\r\n            if (startContent.length > 0) {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: line.substring(lastIndex, matchIndex),\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + characterIndex),\r\n                        Position.create(lineIndex, matchIndex + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            let offset = startContent.length + 1;\r\n            const tagName = match[1];\r\n            tokens.push({\r\n                type: 'inline-tag',\r\n                content: tagName,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\r\n                )\r\n            });\r\n            offset += tagName.length;\r\n            if (match.length === 4) {\r\n                offset += match[2].length;\r\n                const value = match[3];\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: value,\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\r\n                    )\r\n                });\r\n            } else {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: '',\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            lastIndex = matchIndex + match[0].length;\r\n        }\r\n        const endContent = line.substring(lastIndex);\r\n        if (endContent.length > 0) {\r\n            tokens.push({\r\n                type: 'text',\r\n                content: endContent,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nconst nonWhitespaceRegex = /\\S/;\r\nconst whitespaceEndRegex = /\\s*$/;\r\n\r\nfunction skipWhitespace(line: string, index: number): number {\r\n    const match = line.substring(index).match(nonWhitespaceRegex);\r\n    if (match) {\r\n        return index + match.index!;\r\n    } else {\r\n        return line.length;\r\n    }\r\n}\r\n\r\nfunction lastCharacter(line: string): number | undefined {\r\n    const match = line.match(whitespaceEndRegex);\r\n    if (match && typeof match.index === 'number') {\r\n        return match.index;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Parsing\r\n\r\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\r\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\r\n    if (context.tokens.length === 0) {\r\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\r\n    }\r\n    const elements: JSDocElement[] = [];\r\n    while (context.index < context.tokens.length) {\r\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\r\n        if (element) {\r\n            elements.push(element);\r\n        }\r\n    }\r\n    const start = elements[0]?.range.start ?? startPosition;\r\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\r\n    return new JSDocCommentImpl(elements, Range.create(start, end));\r\n}\r\n\r\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\r\n    const next = context.tokens[context.index];\r\n    if (next.type === 'tag') {\r\n        return parseJSDocTag(context, false);\r\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\r\n        return parseJSDocText(context);\r\n    } else {\r\n        appendEmptyLine(next, last);\r\n        context.index++;\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\r\n    if (element) {\r\n        const line = new JSDocLineImpl('', token.range);\r\n        if ('inlines' in element) {\r\n            element.inlines.push(line);\r\n        } else {\r\n            element.content.inlines.push(line);\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\r\n    let token = context.tokens[context.index];\r\n    const firstToken = token;\r\n    let lastToken = token;\r\n    const lines: JSDocInline[] = [];\r\n    while (token && token.type !== 'break' && token.type !== 'tag') {\r\n        lines.push(parseJSDocInline(context));\r\n        lastToken = token;\r\n        token = context.tokens[context.index];\r\n    }\r\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\r\n}\r\n\r\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\r\n    const token = context.tokens[context.index];\r\n    if (token.type === 'inline-tag') {\r\n        return parseJSDocTag(context, true);\r\n    } else {\r\n        return parseJSDocLine(context);\r\n    }\r\n}\r\n\r\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\r\n    const tagToken = context.tokens[context.index++];\r\n    const name = tagToken.content.substring(1);\r\n    const nextToken = context.tokens[context.index];\r\n    if (nextToken?.type === 'text') {\r\n        if (inline) {\r\n            const docLine = parseJSDocLine(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                new JSDocTextImpl([docLine], docLine.range),\r\n                inline,\r\n                Range.create(tagToken.range.start, docLine.range.end)\r\n            );\r\n        } else {\r\n            const textDoc = parseJSDocText(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                textDoc,\r\n                inline,\r\n                Range.create(tagToken.range.start, textDoc.range.end)\r\n            );\r\n        }\r\n    } else {\r\n        const range = tagToken.range;\r\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\r\n    }\r\n}\r\n\r\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\r\n    const token = context.tokens[context.index++];\r\n    return new JSDocLineImpl(token.content, token.range);\r\n}\r\n\r\ninterface NormalizedOptions {\r\n    start?: RegExp\r\n    end?: RegExp\r\n    line?: RegExp\r\n}\r\n\r\ninterface TokenizationContext {\r\n    position: Position\r\n    lines: string[]\r\n    options: NormalizedOptions\r\n}\r\n\r\ninterface ParseContext {\r\n    position: Position\r\n    tokens: JSDocToken[]\r\n    index: number\r\n}\r\n\r\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\r\n    if (!options) {\r\n        return normalizeOptions({\r\n            start: '/**',\r\n            end: '*/',\r\n            line: '*'\r\n        });\r\n    }\r\n    const { start, end, line } = options;\r\n    return {\r\n        start: normalizeOption(start, true),\r\n        end: normalizeOption(end, false),\r\n        line: normalizeOption(line, true)\r\n    };\r\n}\r\n\r\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\r\n    if (typeof option === 'string' || typeof option === 'object') {\r\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\r\n        if (start) {\r\n            return new RegExp(`^\\\\s*${escaped}`);\r\n        } else {\r\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\r\n        }\r\n    } else {\r\n        return option;\r\n    }\r\n}\r\n\r\nclass JSDocCommentImpl implements JSDocComment {\r\n\r\n    readonly elements: JSDocElement[];\r\n    readonly range: Range;\r\n\r\n    constructor(elements: JSDocElement[], range: Range) {\r\n        this.elements = elements;\r\n        this.range = range;\r\n    }\r\n\r\n    getTag(name: string): JSDocTag | undefined {\r\n        return this.getAllTags().find(e => e.name === name);\r\n    }\r\n\r\n    getTags(name: string): JSDocTag[] {\r\n        return this.getAllTags().filter(e => e.name === name);\r\n    }\r\n\r\n    private getAllTags(): JSDocTag[] {\r\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\r\n    }\r\n\r\n    toString(): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toString();\r\n            } else {\r\n                const text = element.toString();\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toMarkdown(options);\r\n            } else {\r\n                const text = element.toMarkdown(options);\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n}\r\n\r\nclass JSDocTagImpl implements JSDocTag {\r\n    name: string;\r\n    content: JSDocParagraph;\r\n    range: Range;\r\n    inline: boolean;\r\n\r\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\r\n        this.name = name;\r\n        this.content = content;\r\n        this.inline = inline;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = `@${this.name}`;\r\n        const content = this.content.toString();\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\r\n    }\r\n\r\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\r\n        const content = this.content.toMarkdown(options);\r\n        if (this.inline) {\r\n            const rendered = renderInlineTag(this.name, content, options ?? {});\r\n            if (typeof rendered === 'string') {\r\n                return rendered;\r\n            }\r\n        }\r\n        let marker = '';\r\n        if (options?.tag === 'italic' || options?.tag === undefined) {\r\n            marker = '*';\r\n        } else if (options?.tag === 'bold') {\r\n            marker = '**';\r\n        } else if (options?.tag === 'bold-italic') {\r\n            marker = '***';\r\n        }\r\n        let text = `${marker}@${this.name}${marker}`;\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} — ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\r\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\r\n        const index = content.indexOf(' ');\r\n        let display = content;\r\n        if (index > 0) {\r\n            const displayStart = skipWhitespace(content, index);\r\n            display = content.substring(displayStart);\r\n            content = content.substring(0, index);\r\n        }\r\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\r\n            // Surround the display value in a markdown inline code block\r\n            display = `\\`${display}\\``;\r\n        }\r\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\r\n        return renderedLink;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction renderLinkDefault(content: string, display: string): string {\r\n    try {\r\n        URI.parse(content, true);\r\n        return `[${display}](${content})`;\r\n    } catch {\r\n        return content;\r\n    }\r\n}\r\n\r\nclass JSDocTextImpl implements JSDocParagraph {\r\n    inlines: JSDocInline[];\r\n    range: Range;\r\n\r\n    constructor(lines: JSDocInline[], range: Range) {\r\n        this.inlines = lines;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toString();\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toMarkdown(options);\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}\r\n\r\nclass JSDocLineImpl implements JSDocLine {\r\n    text: string;\r\n    range: Range;\r\n\r\n    constructor(text: string, range: Range) {\r\n        this.text = text;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.text;\r\n    }\r\n    toMarkdown(): string {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\r\nfunction fillNewlines(text: string): string {\r\n    if (text.endsWith('\\n')) {\r\n        return '\\n';\r\n    } else {\r\n        return '\\n\\n';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { CommentProvider } from './comment-provider.js';\r\nimport type { JSDocTag } from './jsdoc.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\r\n\r\n/**\r\n * Provides documentation for AST nodes.\r\n */\r\nexport interface DocumentationProvider {\r\n    /**\r\n     * Returns a markdown documentation string for the specified AST node.\r\n     *\r\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\r\n     */\r\n    getDocumentation(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class JSDocDocumentationProvider implements DocumentationProvider {\r\n\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    getDocumentation(node: AstNode): string | undefined {\r\n        const comment = this.commentProvider.getComment(node);\r\n        if (comment && isJSDoc(comment)) {\r\n            const parsedJSDoc = parseJSDoc(comment);\r\n            return parsedJSDoc.toMarkdown({\r\n                renderLink: (link, display) => {\r\n                    return this.documentationLinkRenderer(node, link, display);\r\n                },\r\n                renderTag: (tag) => {\r\n                    return this.documentationTagRenderer(node, tag);\r\n                }\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\r\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\r\n        if (description && description.nameSegment) {\r\n            const line = description.nameSegment.range.start.line + 1;\r\n            const character = description.nameSegment.range.start.character + 1;\r\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\r\n            return `[${display}](${uri.toString()})`;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\r\n        // Fall back to the default tag rendering\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const document = getDocument(node);\r\n        const precomputed = document.precomputedScopes;\r\n        if (!precomputed) {\r\n            return undefined;\r\n        }\r\n        let currentNode: AstNode | undefined = node;\r\n        do {\r\n            const allDescriptions = precomputed.get(currentNode);\r\n            const description = allDescriptions.find(e => e.name === name);\r\n            if (description) {\r\n                return description;\r\n            }\r\n            currentNode = currentNode.$container;\r\n        } while (currentNode);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const description = this.indexManager.allElements().find(e => e.name === name);\r\n        return description;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { GrammarConfig } from '../languages/grammar-config.js';\r\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport { findCommentNode } from '../utils/cst-utils.js';\r\n\r\n/**\r\n * Provides comments for AST nodes.\r\n */\r\nexport interface CommentProvider {\r\n    /**\r\n     * Returns the comment associated with the specified AST node.\r\n     * @param node The AST node to get the comment for.\r\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\r\n     */\r\n    getComment(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class DefaultCommentProvider implements CommentProvider {\r\n    protected readonly grammarConfig: () => GrammarConfig;\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammarConfig = () => services.parser.GrammarConfig;\r\n    }\r\n    getComment(node: AstNode): string | undefined {\r\n        if(isAstNodeWithComment(node)) {\r\n            return node.$comment;\r\n        }\r\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\r\nimport type { Hydrator } from '../serializer/hydrator.js';\r\nimport type { Event } from '../utils/event.js';\r\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\r\nimport { Emitter } from '../utils/event.js';\r\n\r\n/**\r\n * Async parser that allows cancellation of the current parsing process.\r\n *\r\n * @remarks\r\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\r\n * The default implementation is not actually async. It just wraps the sync parser in a promise. A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport interface AsyncParser {\r\n    /**\r\n     * Parses the given text and returns the parse result.\r\n     *\r\n     * @param text The text to parse.\r\n     * @param cancelToken A cancellation token that can be used to cancel the parsing process.\r\n     * @returns A promise that resolves to the parse result.\r\n     *\r\n     * @throws `OperationCancelled` if the parsing process is cancelled.\r\n     */\r\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\r\n}\r\n\r\n/**\r\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\r\n *\r\n * @remarks\r\n * A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport class DefaultAsyncParser implements AsyncParser {\r\n\r\n    protected readonly syncParser: LangiumParser;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.syncParser = services.parser.LangiumParser;\r\n    }\r\n\r\n    parse<T extends AstNode>(text: string, _cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        return Promise.resolve(this.syncParser.parse<T>(text));\r\n    }\r\n}\r\n\r\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\r\n\r\n    /**\r\n     * The thread count determines how many threads are used to parse files in parallel.\r\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\r\n     */\r\n    protected threadCount = 8;\r\n    /**\r\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\r\n     * The default value is 200(ms).\r\n     */\r\n    protected terminationDelay = 200;\r\n    protected workerPool: ParserWorker[] = [];\r\n    protected queue: Array<Deferred<ParserWorker>> = [];\r\n\r\n    protected readonly hydrator: Hydrator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.hydrator = services.serializer.Hydrator;\r\n    }\r\n\r\n    protected initializeWorkers(): void {\r\n        while (this.workerPool.length < this.threadCount) {\r\n            const worker = this.createWorker();\r\n            worker.onReady(() => {\r\n                if (this.queue.length > 0) {\r\n                    const deferred = this.queue.shift();\r\n                    if (deferred) {\r\n                        worker.lock();\r\n                        deferred.resolve(worker);\r\n                    }\r\n                }\r\n            });\r\n            this.workerPool.push(worker);\r\n        }\r\n    }\r\n\r\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const worker = await this.acquireParserWorker(cancelToken);\r\n        const deferred = new Deferred<ParseResult<T>>();\r\n        let timeout: NodeJS.Timeout | undefined;\r\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\r\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\r\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\r\n        const cancellation = cancelToken.onCancellationRequested(() => {\r\n            timeout = setTimeout(() => {\r\n                this.terminateWorker(worker);\r\n            }, this.terminationDelay);\r\n        });\r\n        worker.parse(text).then(result => {\r\n            const hydrated = this.hydrator.hydrate<T>(result);\r\n            deferred.resolve(hydrated);\r\n        }).catch(err => {\r\n            deferred.reject(err);\r\n        }).finally(() => {\r\n            cancellation.dispose();\r\n            clearTimeout(timeout);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected terminateWorker(worker: ParserWorker): void {\r\n        worker.terminate();\r\n        const index = this.workerPool.indexOf(worker);\r\n        if (index >= 0) {\r\n            this.workerPool.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\r\n        this.initializeWorkers();\r\n        for (const worker of this.workerPool) {\r\n            if (worker.ready) {\r\n                worker.lock();\r\n                return worker;\r\n            }\r\n        }\r\n        const deferred = new Deferred<ParserWorker>();\r\n        cancelToken.onCancellationRequested(() => {\r\n            const index = this.queue.indexOf(deferred);\r\n            if (index >= 0) {\r\n                this.queue.splice(index, 1);\r\n            }\r\n            deferred.reject(OperationCancelled);\r\n        });\r\n        this.queue.push(deferred);\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected abstract createWorker(): ParserWorker;\r\n}\r\n\r\nexport type WorkerMessagePost = (message: unknown) => void;\r\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\r\n\r\nexport class ParserWorker {\r\n\r\n    protected readonly sendMessage: WorkerMessagePost;\r\n    protected readonly _terminate: () => void;\r\n    protected readonly onReadyEmitter = new Emitter<void>();\r\n\r\n    protected deferred = new Deferred<ParseResult>();\r\n    protected _ready = true;\r\n    protected _parsing = false;\r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n\r\n    get onReady(): Event<void> {\r\n        return this.onReadyEmitter.event;\r\n    }\r\n\r\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\r\n        this.sendMessage = sendMessage;\r\n        this._terminate = terminate;\r\n        onMessage(result => {\r\n            const parseResult = result as ParseResult;\r\n            this.deferred.resolve(parseResult);\r\n            this.unlock();\r\n        });\r\n        onError(error => {\r\n            this.deferred.reject(error);\r\n            this.unlock();\r\n        });\r\n    }\r\n\r\n    terminate(): void {\r\n        this.deferred.reject(OperationCancelled);\r\n        this._terminate();\r\n    }\r\n\r\n    lock(): void {\r\n        this._ready = false;\r\n    }\r\n\r\n    unlock(): void {\r\n        this._parsing = false;\r\n        this._ready = true;\r\n        this.onReadyEmitter.fire();\r\n    }\r\n\r\n    parse(text: string): Promise<ParseResult> {\r\n        if (this._parsing) {\r\n            throw new Error('Parser worker is busy');\r\n        }\r\n        this._parsing = true;\r\n        this.deferred = new Deferred();\r\n        this.sendMessage(text);\r\n        return this.deferred.promise;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { type AbstractCancellationTokenSource, CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\r\nimport { Deferred, isOperationCancelled, startCancelableOperation, type MaybePromise } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Utility service to execute mutually exclusive actions.\r\n */\r\nexport interface WorkspaceLock {\r\n    /**\r\n     * Performs a single async action, like initializing the workspace or processing document changes.\r\n     * Only one action will be executed at a time.\r\n     *\r\n     * When another action is queued up, the token provided for the action will be cancelled.\r\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\r\n     */\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\r\n\r\n    /**\r\n     * Performs a single action, like computing completion results or providing workspace symbols.\r\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\r\n     *\r\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\r\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\r\n     *\r\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\r\n     */\r\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\r\n\r\n    /**\r\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\r\n     */\r\n    cancelWrite(): void;\r\n}\r\n\r\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\r\n\r\ninterface LockEntry {\r\n    action: LockAction<unknown>;\r\n    deferred: Deferred<unknown>;\r\n    cancellationToken: CancellationToken;\r\n}\r\n\r\nexport class DefaultWorkspaceLock implements WorkspaceLock {\r\n\r\n    private previousTokenSource: AbstractCancellationTokenSource = new CancellationTokenSource();\r\n    private writeQueue: LockEntry[] = [];\r\n    private readQueue: LockEntry[] = [];\r\n    private done = true;\r\n\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\r\n        this.cancelWrite();\r\n        const tokenSource = startCancelableOperation();\r\n        this.previousTokenSource = tokenSource;\r\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\r\n    }\r\n\r\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\r\n        return this.enqueue(this.readQueue, action);\r\n    }\r\n\r\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken = CancellationToken.None): Promise<T> {\r\n        const deferred = new Deferred<unknown>();\r\n        const entry: LockEntry = {\r\n            action,\r\n            deferred,\r\n            cancellationToken\r\n        };\r\n        queue.push(entry);\r\n        this.performNextOperation();\r\n        return deferred.promise as Promise<T>;\r\n    }\r\n\r\n    private async performNextOperation(): Promise<void> {\r\n        if (!this.done) {\r\n            return;\r\n        }\r\n        const entries: LockEntry[] = [];\r\n        if (this.writeQueue.length > 0) {\r\n            // Just perform the next write action\r\n            entries.push(this.writeQueue.shift()!);\r\n        } else if (this.readQueue.length > 0) {\r\n            // Empty the read queue and perform all actions in parallel\r\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\r\n        } else {\r\n            return;\r\n        }\r\n        this.done = false;\r\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\r\n            try {\r\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\r\n                const result = await Promise.resolve().then(() => action(cancellationToken));\r\n                deferred.resolve(result);\r\n            } catch (err) {\r\n                if (isOperationCancelled(err)) {\r\n                    // If the operation was cancelled, we don't want to reject the promise\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            }\r\n        }));\r\n        this.done = true;\r\n        this.performNextOperation();\r\n    }\r\n\r\n    cancelWrite(): void {\r\n        this.previousTokenSource.cancel();\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2024 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\r\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { Lexer } from '../parser/lexer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\r\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { BiMap } from '../utils/collections.js';\r\nimport { streamCst } from '../utils/cst-utils.js';\r\nimport type { LexingReport } from '../parser/token-builder.js';\r\n\r\n/**\r\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\r\n */\r\nexport interface Hydrator {\r\n    /**\r\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\r\n     */\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\r\n    /**\r\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\r\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\r\n     */\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\r\n}\r\n\r\nexport interface DehydrateContext {\r\n    astNodes: Map<AstNode, any>;\r\n    cstNodes: Map<CstNode, any>;\r\n}\r\n\r\nexport interface HydrateContext {\r\n    astNodes: Map<any, AstNode>;\r\n    cstNodes: Map<any, CstNode>;\r\n}\r\n\r\nexport class DefaultHydrator implements Hydrator {\r\n\r\n    protected readonly grammar: Grammar;\r\n    protected readonly lexer: Lexer;\r\n    protected readonly linker: Linker;\r\n\r\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\r\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammar = services.Grammar;\r\n        this.lexer = services.parser.Lexer;\r\n        this.linker = services.references.Linker;\r\n    }\r\n\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\r\n            // We need to create shallow copies of the errors\r\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\r\n            parserErrors: result.parserErrors.map(e => ({ ...e, message: e.message })),\r\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\r\n        };\r\n    }\r\n\r\n    protected dehydrateLexerReport(lexerReport: LexingReport): LexingReport {\r\n        // By default, lexer reports are serializable\r\n        return lexerReport;\r\n    }\r\n\r\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\r\n        const astNodes = new Map<AstNode, any>();\r\n        const cstNodes = new Map<CstNode, any>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {});\r\n        }\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                cstNodes.set(cstNode, {});\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\r\n        const obj = context.astNodes.get(node) as Record<string, any>;\r\n        obj.$type = node.$type;\r\n        obj.$containerIndex = node.$containerIndex;\r\n        obj.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode !== undefined) {\r\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: any[] = [];\r\n                obj[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.dehydrateAstNode(item, context));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.dehydrateReference(item, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                obj[name] = this.dehydrateAstNode(value, context);\r\n            } else if (isReference(value)) {\r\n                obj[name] = this.dehydrateReference(value, context);\r\n            } else if (value !== undefined) {\r\n                obj[name] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\r\n        const obj: Record<string, unknown> = {};\r\n        obj.$refText = reference.$refText;\r\n        if (reference.$refNode) {\r\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\r\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\r\n        if (isRootCstNode(node)) {\r\n            cstNode.fullText = node.fullText;\r\n        } else {\r\n            // Note: This returns undefined for hidden nodes (i.e. comments)\r\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\r\n        }\r\n        cstNode.hidden = node.hidden;\r\n        cstNode.astNode = context.astNodes.get(node.astNode);\r\n        if (isCompositeCstNode(node)) {\r\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\r\n        } else if (isLeafCstNode(node)) {\r\n            cstNode.tokenType = node.tokenType.name;\r\n            cstNode.offset = node.offset;\r\n            cstNode.length = node.length;\r\n            cstNode.startLine = node.range.start.line;\r\n            cstNode.startColumn = node.range.start.character;\r\n            cstNode.endLine = node.range.end.line;\r\n            cstNode.endColumn = node.range.end.character;\r\n        }\r\n        return cstNode;\r\n    }\r\n\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\r\n        const node = result.value;\r\n        const context = this.createHydrationContext(node);\r\n        if ('$cstNode' in node) {\r\n            this.hydrateCstNode(node.$cstNode, context);\r\n        }\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport,\r\n            parserErrors: result.parserErrors,\r\n            value: this.hydrateAstNode(node, context) as T\r\n        };\r\n    }\r\n\r\n    protected createHydrationContext(node: any): HydrateContext {\r\n        const astNodes = new Map<any, AstNode>();\r\n        const cstNodes = new Map<any, CstNode>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {} as AstNode);\r\n        }\r\n        let root: RootCstNode;\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                let cst: Mutable<CstNode> | undefined;\r\n                if ('fullText' in cstNode) {\r\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\r\n                    root = cst as RootCstNode;\r\n                } else if ('content' in cstNode) {\r\n                    cst = new CompositeCstNodeImpl();\r\n                } else if ('tokenType' in cstNode) {\r\n                    cst = this.hydrateCstLeafNode(cstNode);\r\n                }\r\n                if (cst) {\r\n                    cstNodes.set(cstNode, cst);\r\n                    cst.root = root!;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\r\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\r\n        astNode.$type = node.$type;\r\n        astNode.$containerIndex = node.$containerIndex;\r\n        astNode.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode) {\r\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: unknown[] = [];\r\n                astNode[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.hydrateReference(item, astNode, name, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\r\n            } else if (isReference(value)) {\r\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\r\n            } else if (value !== undefined) {\r\n                astNode[name] = value;\r\n            }\r\n        }\r\n        return astNode;\r\n    }\r\n\r\n    protected setParent(node: any, parent: any): any {\r\n        node.$container = parent as AstNode;\r\n        return node;\r\n    }\r\n\r\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\r\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\r\n    }\r\n\r\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\r\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\r\n        if (typeof cstNode.grammarSource === 'number') {\r\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\r\n        }\r\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\r\n        if (isCompositeCstNode(cstNodeObj)) {\r\n            for (const child of cstNode.content) {\r\n                const hydrated = this.hydrateCstNode(child, context, num++);\r\n                cstNodeObj.content.push(hydrated);\r\n            }\r\n        }\r\n        return cstNodeObj;\r\n    }\r\n\r\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\r\n        const tokenType = this.getTokenType(cstNode.tokenType);\r\n        const offset = cstNode.offset;\r\n        const length = cstNode.length;\r\n        const startLine = cstNode.startLine;\r\n        const startColumn = cstNode.startColumn;\r\n        const endLine = cstNode.endLine;\r\n        const endColumn = cstNode.endColumn;\r\n        const hidden = cstNode.hidden;\r\n        const node = new LeafCstNodeImpl(\r\n            offset,\r\n            length,\r\n            {\r\n                start: {\r\n                    line: startLine,\r\n                    character: startColumn\r\n                },\r\n                end: {\r\n                    line: endLine,\r\n                    character: endColumn\r\n                }\r\n            },\r\n            tokenType,\r\n            hidden\r\n        );\r\n        return node;\r\n    }\r\n\r\n    protected getTokenType(name: string): TokenType {\r\n        return this.lexer.definition[name];\r\n    }\r\n\r\n    protected getGrammarElementId(node: AbstractElement | undefined): number | undefined {\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        return this.grammarElementIdMap.get(node);\r\n    }\r\n\r\n    protected getGrammarElement(id: number): AbstractElement | undefined {\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        const element = this.grammarElementIdMap.getKey(id);\r\n        return element;\r\n    }\r\n\r\n    protected createGrammarElementIdMap(): void {\r\n        let id = 0;\r\n        for (const element of streamAst(this.grammar)) {\r\n            if (isAbstractElement(element)) {\r\n                this.grammarElementIdMap.set(element, id++);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n******************************************************************************/\r\n\r\nimport type { Module } from './dependency-injection.js';\r\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport { createGrammarConfig } from './languages/grammar-config.js';\r\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\r\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\r\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\r\nimport { DefaultValueConverter } from './parser/value-converter.js';\r\nimport { DefaultLinker } from './references/linker.js';\r\nimport { DefaultNameProvider } from './references/name-provider.js';\r\nimport { DefaultReferences } from './references/references.js';\r\nimport { DefaultScopeComputation } from './references/scope-computation.js';\r\nimport { DefaultScopeProvider } from './references/scope-provider.js';\r\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\r\nimport { DefaultServiceRegistry } from './service-registry.js';\r\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\r\nimport { ValidationRegistry } from './validation/validation-registry.js';\r\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\r\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\r\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\r\nimport { DefaultIndexManager } from './workspace/index-manager.js';\r\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\r\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\r\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\r\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\r\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\r\nimport { DefaultAsyncParser } from './parser/async-parser.js';\r\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\r\nimport { DefaultHydrator } from './serializer/hydrator.js';\r\n\r\n/**\r\n * Context required for creating the default language-specific dependency injection module.\r\n */\r\nexport interface DefaultCoreModuleContext {\r\n    shared: LangiumSharedCoreServices;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default core services.\r\n * This is a set of services that are dedicated to a specific language.\r\n */\r\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\r\n    return {\r\n        documentation: {\r\n            CommentProvider: (services) => new DefaultCommentProvider(services),\r\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\r\n        },\r\n        parser: {\r\n            AsyncParser: (services) => new DefaultAsyncParser(services),\r\n            GrammarConfig: (services) => createGrammarConfig(services),\r\n            LangiumParser: (services) => createLangiumParser(services),\r\n            CompletionParser: (services) => createCompletionParser(services),\r\n            ValueConverter: () => new DefaultValueConverter(),\r\n            TokenBuilder: () => new DefaultTokenBuilder(),\r\n            Lexer: (services) => new DefaultLexer(services),\r\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\r\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\r\n        },\r\n        workspace: {\r\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\r\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\r\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\r\n        },\r\n        references: {\r\n            Linker: (services) => new DefaultLinker(services),\r\n            NameProvider: () => new DefaultNameProvider(),\r\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\r\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\r\n            References: (services) => new DefaultReferences(services)\r\n        },\r\n        serializer: {\r\n            Hydrator: (services) => new DefaultHydrator(services),\r\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\r\n        },\r\n        validation: {\r\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\r\n            ValidationRegistry: (services) => new ValidationRegistry(services)\r\n        },\r\n        shared: () => context.shared\r\n    };\r\n}\r\n\r\n/**\r\n * Context required for creating the default shared dependency injection module.\r\n */\r\nexport interface DefaultSharedCoreModuleContext {\r\n    /**\r\n     * Factory function to create a {@link FileSystemProvider}.\r\n     *\r\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\r\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\r\n     * the `EmptyFileSystem` in every other use case.\r\n     */\r\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default shared core services.\r\n * This is the set of services that are shared between multiple languages.\r\n */\r\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\r\n    return {\r\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\r\n        workspace: {\r\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\r\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\r\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\r\n            IndexManager: (services) => new DefaultIndexManager(services),\r\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\r\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\r\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\r\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\r\n        }\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\r\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { isMultilineComment } from '../utils/regexp-utils.js';\r\nimport { isTerminalRule } from './generated/ast.js';\r\n\r\nexport interface GrammarConfig {\r\n    /**\r\n     * Lists all rule names which are classified as multiline comment rules\r\n     */\r\n    multilineCommentRules: string[]\r\n    /**\r\n     * A regular expression which matches characters of names\r\n     */\r\n    nameRegexp: RegExp\r\n}\r\n\r\n/**\r\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\r\n * language-specific module.\r\n */\r\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\r\n    const rules: string[] = [];\r\n    const grammar = services.Grammar;\r\n    for (const rule of grammar.rules) {\r\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\r\n            rules.push(rule.name);\r\n        }\r\n    }\r\n    return {\r\n        multilineCommentRules: rules,\r\n        nameRegexp: DefaultNameRegexp\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumCompletionParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumCompletionParser(services);\r\n    createParser(grammar, parser, lexer.definition);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\r\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\r\n\r\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\r\n\r\nconst regexpParser = new RegExpParser();\r\n\r\n/**\r\n * This class is in charge of heuristically identifying start/end tokens of terminals.\r\n *\r\n * The way this works is by doing the following:\r\n * 1. Traverse the regular expression in the \"start state\"\r\n * 2. Add any encountered sets/single characters to the \"start regexp\"\r\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\r\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\r\n * 5. If we re-encounter any variable-length content we reset the end stack\r\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\r\n *\r\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\r\n */\r\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\r\n\r\n    private isStarting = true;\r\n    startRegexp: string;\r\n    private endRegexpStack: string[] = [];\r\n    multiline = false;\r\n    regex: string;\r\n\r\n    get endRegex(): string {\r\n        return this.endRegexpStack.join('');\r\n    }\r\n\r\n    reset(regex: string): void {\r\n        this.multiline = false;\r\n        this.regex = regex;\r\n        this.startRegexp = '';\r\n        this.isStarting = true;\r\n        this.endRegexpStack = [];\r\n    }\r\n\r\n    override visitGroup(node: Group) {\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        }\r\n    }\r\n\r\n    override visitCharacter(node: Character): void {\r\n        const char = String.fromCharCode(node.value);\r\n        if (!this.multiline && char === '\\n') {\r\n            this.multiline = true;\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const escapedChar = escapeRegExp(char);\r\n            this.endRegexpStack.push(escapedChar);\r\n            if (this.isStarting) {\r\n                this.startRegexp += escapedChar;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitSet(node: Set): void {\r\n        if (!this.multiline) {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            const regex = new RegExp(set);\r\n            this.multiline = Boolean('\\n'.match(regex));\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            this.endRegexpStack.push(set);\r\n            if (this.isStarting) {\r\n                this.startRegexp += set;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitChildren(node: IRegExpAST): void {\r\n        if (node.type === 'Group') {\r\n            // Ignore children of groups with quantifier (+/*/?)\r\n            // These groups are unrelated to start/end tokens of terminals\r\n            const group = node as Group;\r\n            if (group.quantifier) {\r\n                return;\r\n            }\r\n        }\r\n        super.visitChildren(node);\r\n    }\r\n}\r\n\r\nconst visitor = new TerminalRegExpVisitor();\r\n\r\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\r\n    try {\r\n        if (typeof regexp !== 'string') {\r\n            regexp = regexp.source;\r\n        }\r\n        regexp = `/${regexp}/`;\r\n        const pattern = regexpParser.pattern(regexp);\r\n        const parts: Array<{ start: string, end: string }> = [];\r\n        for (const alternative of pattern.value.value) {\r\n            visitor.reset(regexp);\r\n            visitor.visit(alternative);\r\n            parts.push({\r\n                start: visitor.startRegexp,\r\n                end: visitor.endRegex\r\n            });\r\n        }\r\n        return parts;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport function isMultilineComment(regexp: RegExp | string): boolean {\r\n    try {\r\n        if (typeof regexp === 'string') {\r\n            regexp = new RegExp(regexp);\r\n        }\r\n        regexp = regexp.toString();\r\n        visitor.reset(regexp);\r\n        // Parsing the pattern might fail (since it's user code)\r\n        visitor.visit(regexpParser.pattern(regexp));\r\n        return visitor.multiline;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\r\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\r\n */\r\nexport const whitespaceCharacters = (\r\n    '\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\r\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\r\n\r\nexport function isWhitespace(value: RegExp | string): boolean {\r\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\r\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\r\n}\r\n\r\nexport function escapeRegExp(value: string): string {\r\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nexport function getCaseInsensitivePattern(keyword: string): string {\r\n    return Array.prototype.map.call(keyword, letter =>\r\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\r\n    ).join('');\r\n}\r\n\r\n/**\r\n * Determines whether the given input has a partial match with the specified regex.\r\n * @param regex The regex to partially match against\r\n * @param input The input string\r\n * @returns Whether any match exists.\r\n */\r\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\r\n    const partial = partialRegExp(regex);\r\n    const match = input.match(partial);\r\n    return !!match && match[0].length > 0;\r\n}\r\n\r\n/**\r\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\r\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\r\n * @param regex The input regex to be converted.\r\n * @returns A partial regex constructed from the input regex.\r\n */\r\nexport function partialRegExp(regex: RegExp | string): RegExp {\r\n    if (typeof regex === 'string') {\r\n        regex = new RegExp(regex);\r\n    }\r\n    const re = regex, source = regex.source;\r\n    let i = 0;\r\n\r\n    function process() {\r\n        let result = '',\r\n            tmp;\r\n\r\n        function appendRaw(nbChars: number) {\r\n            result += source.substr(i, nbChars);\r\n            i += nbChars;\r\n        }\r\n\r\n        function appendOptional(nbChars: number) {\r\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\r\n            i += nbChars;\r\n        }\r\n\r\n        while (i < source.length) {\r\n            switch (source[i]) {\r\n                case '\\\\':\r\n                    switch (source[i + 1]) {\r\n                        case 'c':\r\n                            appendOptional(3);\r\n                            break;\r\n                        case 'x':\r\n                            appendOptional(4);\r\n                            break;\r\n                        case 'u':\r\n                            if (re.unicode) {\r\n                                if (source[i + 2] === '{') {\r\n                                    appendOptional(source.indexOf('}', i) - i + 1);\r\n                                } else {\r\n                                    appendOptional(6);\r\n                                }\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'p':\r\n                        case 'P':\r\n                            if (re.unicode) {\r\n                                appendOptional(source.indexOf('}', i) - i + 1);\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'k':\r\n                            appendOptional(source.indexOf('>', i) - i + 1);\r\n                            break;\r\n                        default:\r\n                            appendOptional(2);\r\n                            break;\r\n                    }\r\n                    break;\r\n\r\n                case '[':\r\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source) || [];\r\n                    appendOptional(tmp[0].length);\r\n                    break;\r\n\r\n                case '|':\r\n                case '^':\r\n                case '$':\r\n                case '*':\r\n                case '+':\r\n                case '?':\r\n                    appendRaw(1);\r\n                    break;\r\n                case '{':\r\n                    tmp = /\\{\\d+,?\\d*\\}/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source);\r\n                    if (tmp) {\r\n                        appendRaw(tmp[0].length);\r\n                    } else {\r\n                        appendOptional(1);\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    if (source[i + 1] === '?') {\r\n                        switch (source[i + 2]) {\r\n                            case ':':\r\n                                result += '(?:';\r\n                                i += 3;\r\n                                result += process() + '|$)';\r\n                                break;\r\n                            case '=':\r\n                                result += '(?=';\r\n                                i += 3;\r\n                                result += process() + ')';\r\n                                break;\r\n                            case '!':\r\n                                tmp = i;\r\n                                i += 3;\r\n                                process();\r\n                                result += source.substr(tmp, i - tmp);\r\n                                break;\r\n                            case '<':\r\n                                switch (source[i + 3]) {\r\n                                    case '=':\r\n                                    case '!':\r\n                                        tmp = i;\r\n                                        i += 4;\r\n                                        process();\r\n                                        result += source.substr(tmp, i - tmp);\r\n                                        break;\r\n                                    default:\r\n                                        appendRaw(source.indexOf('>', i) - i + 1);\r\n                                        result += process() + '|$)';\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        appendRaw(1);\r\n                        result += process() + '|$)';\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    ++i;\r\n                    return result;\r\n                default:\r\n                    appendOptional(1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return new RegExp(process(), regex.flags);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken } from '@chevrotain/types';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\r\nimport { TreeStreamImpl } from './stream.js';\r\n\r\n/**\r\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\r\n    return new TreeStreamImpl(node, element => {\r\n        if (isCompositeCstNode(element)) {\r\n            return element.content;\r\n        } else {\r\n            return [];\r\n        }\r\n    }, { includeRoot: true });\r\n}\r\n\r\n/**\r\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\r\n */\r\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\r\n    return streamCst(node).filter(isLeafCstNode);\r\n}\r\n\r\n/**\r\n * Determines whether the specified cst node is a child of the specified parent node.\r\n */\r\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\r\n    while (child.container) {\r\n        child = child.container;\r\n        if (child === parent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function tokenToRange(token: IToken): Range {\r\n    // Chevrotain uses 1-based indices everywhere\r\n    // So we subtract 1 from every value to align with the LSP\r\n    return {\r\n        start: {\r\n            character: token.startColumn! - 1,\r\n            line: token.startLine! - 1\r\n        },\r\n        end: {\r\n            character: token.endColumn!, // endColumn uses the correct index\r\n            line: token.endLine! - 1\r\n        }\r\n    };\r\n}\r\n\r\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const { offset, end, range } = node;\r\n    return {\r\n        range,\r\n        offset,\r\n        end,\r\n        length: end - offset\r\n    };\r\n}\r\n\r\nexport enum RangeComparison {\r\n    Before = 0,\r\n    After = 1,\r\n    OverlapFront = 2,\r\n    OverlapBack = 3,\r\n    Inside = 4,\r\n    Outside = 5,\r\n}\r\n\r\nexport function compareRange(range: Range, to: Range): RangeComparison {\r\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\r\n        return RangeComparison.Before;\r\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\r\n        return RangeComparison.After;\r\n    }\r\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\r\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\r\n    if (startInside && endInside) {\r\n        return RangeComparison.Inside;\r\n    } else if (startInside) {\r\n        return RangeComparison.OverlapBack;\r\n    } else if (endInside) {\r\n        return RangeComparison.OverlapFront;\r\n    } else {\r\n        return RangeComparison.Outside;\r\n    }\r\n}\r\n\r\nexport function inRange(range: Range, to: Range): boolean {\r\n    const comparison = compareRange(range, to);\r\n    return comparison > RangeComparison.After;\r\n}\r\n\r\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\r\n// Together with \\w it matches any kind of character which can commonly appear in IDs\r\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\r\n\r\n/**\r\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\r\n * it will instead return the leaf node at the `offset - 1` position.\r\n *\r\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\r\n */\r\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\r\n    if (cstNode) {\r\n        if (offset > 0) {\r\n            const localOffset = offset - cstNode.offset;\r\n            const textAtOffset = cstNode.text.charAt(localOffset);\r\n            if (!nameRegexp.test(textAtOffset)) {\r\n                offset--;\r\n            }\r\n        }\r\n        return findLeafNodeAtOffset(cstNode, offset);\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\r\n    if (cstNode) {\r\n        const previous = getPreviousNode(cstNode, true);\r\n        if (previous && isCommentNode(previous, commentNames)) {\r\n            return previous;\r\n        }\r\n        if (isRootCstNode(cstNode)) {\r\n            // Go from the first non-hidden node through all nodes in reverse order\r\n            // We do this to find the comment node which directly precedes the root node\r\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\r\n            for (let i = endIndex - 1; i >= 0; i--) {\r\n                const child = cstNode.content[i];\r\n                if (isCommentNode(child, commentNames)) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\r\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * Note that the given offset will be within the range of the returned leaf node.\r\n *\r\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node at the specified offset.\r\n */\r\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, false);\r\n        if (searchResult) {\r\n            return findLeafNodeAtOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * If no CST node exists at the specified position, it will return the leaf node before it.\r\n *\r\n * If there is no leaf node before the specified offset, this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node closest to the specified offset.\r\n */\r\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, true);\r\n        if (searchResult) {\r\n            return findLeafNodeBeforeOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\r\n    let left = 0;\r\n    let right = node.content.length - 1;\r\n    let closestNode: CstNode | undefined = undefined;\r\n\r\n    while (left <= right) {\r\n        const middle = Math.floor((left + right) / 2);\r\n        const middleNode = node.content[middle];\r\n\r\n        if (middleNode.offset <= offset && middleNode.end > offset) {\r\n            // Found an exact match\r\n            return middleNode;\r\n        }\r\n\r\n        if (middleNode.end <= offset) {\r\n            // Update the closest node (less than offset) and move to the right half\r\n            closestNode = closest ? middleNode : undefined;\r\n            left = middle + 1;\r\n        } else {\r\n            // Move to the left half\r\n            right = middle - 1;\r\n        }\r\n    }\r\n\r\n    return closestNode;\r\n}\r\n\r\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        while (index > 0) {\r\n            index--;\r\n            const previous = parent.content[index];\r\n            if (hidden || !previous.hidden) {\r\n                return previous;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        const last = parent.content.length - 1;\r\n        while (index < last) {\r\n            index++;\r\n            const next = parent.content[index];\r\n            if (hidden || !next.hidden) {\r\n                return next;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getStartlineNode(node: CstNode): CstNode {\r\n    if (node.range.start.character === 0) {\r\n        return node;\r\n    }\r\n    const line = node.range.start.line;\r\n    let last = node;\r\n    let index: number | undefined;\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const selfIndex = index ?? parent.content.indexOf(node);\r\n        if (selfIndex === 0) {\r\n            node = parent;\r\n            index = undefined;\r\n        } else {\r\n            index = selfIndex - 1;\r\n            node = parent.content[index];\r\n        }\r\n        if (node.range.start.line !== line) {\r\n            break;\r\n        }\r\n        last = node;\r\n    }\r\n    return last;\r\n}\r\n\r\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\r\n    const commonParent = getCommonParent(start, end);\r\n    if (!commonParent) {\r\n        return [];\r\n    }\r\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\r\n}\r\n\r\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\r\n    const aParents = getParentChain(a);\r\n    const bParents = getParentChain(b);\r\n    let current: CommonParent | undefined;\r\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\r\n        const aParent = aParents[i];\r\n        const bParent = bParents[i];\r\n        if (aParent.parent === bParent.parent) {\r\n            current = {\r\n                parent: aParent.parent,\r\n                a: aParent.index,\r\n                b: bParent.index\r\n            };\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return current;\r\n}\r\n\r\ninterface CommonParent {\r\n    parent: CompositeCstNode\r\n    a: number\r\n    b: number\r\n}\r\n\r\nfunction getParentChain(node: CstNode): ParentLink[] {\r\n    const chain: ParentLink[] = [];\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const index = parent.content.indexOf(node);\r\n        chain.push({\r\n            parent,\r\n            index\r\n        });\r\n        node = parent;\r\n    }\r\n    return chain.reverse();\r\n}\r\n\r\ninterface ParentLink {\r\n    parent: CompositeCstNode\r\n    index: number\r\n}\r\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface FileSystemNode {\r\n    readonly isFile: boolean;\r\n    readonly isDirectory: boolean;\r\n    readonly uri: URI;\r\n}\r\n\r\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\r\n\r\n/**\r\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\r\n */\r\nexport interface FileSystemProvider {\r\n    /**\r\n     * Reads a document asynchronously from a given URI.\r\n     * @returns The string content of the file with the specified URI.\r\n     */\r\n    readFile(uri: URI): Promise<string>;\r\n    /**\r\n     * Reads the directory information for the given URI.\r\n     * @returns The list of file system entries that are contained within the specified directory.\r\n     */\r\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\r\n}\r\n\r\nexport class EmptyFileSystemProvider implements FileSystemProvider {\r\n\r\n    readFile(): Promise<string> {\r\n        throw new Error('No file system is available.');\r\n    }\r\n\r\n    async readDirectory(): Promise<FileSystemNode[]> {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport const EmptyFileSystem = {\r\n    fileSystemProvider: () => new EmptyFileSystemProvider()\r\n};\r\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\r\n * both sequentially and randomly (via index), a stream allows only sequential access.\r\n *\r\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\r\n * to store intermediate values. This can boost performance when a large sequence is\r\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\r\n * evaluation means that all processing is repeated when you access the sequence multiple\r\n * times; in such a case, it may be better to store the resulting sequence into an array.\r\n */\r\nexport interface Stream<T> extends Iterable<T> {\r\n\r\n    /**\r\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\r\n     */\r\n    iterator(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Determines whether this stream contains no elements.\r\n     */\r\n    isEmpty(): boolean;\r\n\r\n    /**\r\n     * Determines the number of elements in this stream.\r\n     */\r\n    count(): number;\r\n\r\n    /**\r\n     * Collects all elements of this stream into an array.\r\n     */\r\n    toArray(): T[];\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Set.\r\n     */\r\n    toSet(): Set<T>;\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\r\n     *\r\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\r\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\r\n     */\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\r\n\r\n    /**\r\n     * Returns a string representation of a stream.\r\n     */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\r\n     *\r\n     * @param other Stream to be concatenated with this one.\r\n     */\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\r\n\r\n    /**\r\n     * Adds all elements of the stream into a string, separated by the specified separator string.\r\n     *\r\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\r\n     *        If omitted, the steam elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\r\n     *\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\r\n     *        starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Determines whether all members of the stream satisfy the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\r\n     *        of the stream.\r\n     */\r\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Determines whether any member of the stream satisfies the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\r\n     *        of the stream.\r\n     */\r\n    some(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Performs the specified action for each element in the stream.\r\n     *\r\n     * @param callbackfn Function called once for each element in the stream.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number) => void): void;\r\n\r\n    /**\r\n     * Returns a stream that yields the results of calling the specified callback function on each element\r\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\r\n     * accessing the resulting stream multiple times means the function is also called multiple times for\r\n     * each element of the stream.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that meet the condition specified in a callback function.\r\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\r\n     * resulting stream multiple times means the function is also called multiple times for each element\r\n     * of the stream.\r\n     *\r\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\r\n     */\r\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\r\n    filter(predicate: (value: T) => unknown): Stream<T>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\r\n     * nor `null`.\r\n     */\r\n    nonNullable(): Stream<NonNullable<T>>;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream. The return value of the\r\n     * callback function is the accumulated result, and is provided as an argument in the next call to\r\n     * the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of a stream value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    findIndex(predicate: (value: T) => unknown): number;\r\n\r\n    /**\r\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\r\n     *\r\n     * @param searchElement The element to search for.\r\n     */\r\n    includes(searchElement: T): boolean;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of the stream and then flattens the result into\r\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\r\n\r\n    /**\r\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\r\n     * to the specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth. Defaults to 1.\r\n     */\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\r\n\r\n    /**\r\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\r\n     */\r\n    head(): T | undefined;\r\n\r\n    /**\r\n     * Returns a stream that skips the first `skipCount` elements from this stream.\r\n     *\r\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\r\n     *        the stream, an empty stream is returned. Defaults to 1.\r\n     */\r\n    tail(skipCount?: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\r\n     * in length.\r\n     *\r\n     * @param maxSize The number of elements the stream should be limited to\r\n     */\r\n    limit(maxSize: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream containing only the distinct elements from this stream.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     *\r\n     * @param by A function returning the key used to check equality with a previous stream element.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     * @param other The elements that should be exluded from this stream.\r\n     * @param key A function returning the key used to check quality.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\r\n\r\n}\r\n\r\nexport type FlatStream<T, Depth extends number> = {\r\n    'done': Stream<T>,\r\n    'recur': T extends Iterable<infer Content>\r\n        ? FlatStream<Content, MinusOne<Depth>>\r\n        : Stream<T>\r\n}[Depth extends 0 ? 'done' : 'recur'];\r\n\r\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\r\n\r\n/**\r\n * The default implementation of `Stream` works with two input functions:\r\n *  - The first function creates the initial state of an iteration.\r\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\r\n */\r\nexport class StreamImpl<S, T> implements Stream<T> {\r\n    protected readonly startFn: () => S;\r\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\r\n\r\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\r\n        this.startFn = startFn;\r\n        this.nextFn = nextFn;\r\n    }\r\n\r\n    iterator(): IterableIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<T> {\r\n        return this.iterator();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        const iterator = this.iterator();\r\n        return Boolean(iterator.next().done);\r\n    }\r\n\r\n    count(): number {\r\n        const iterator = this.iterator();\r\n        let count = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            count++;\r\n            next = iterator.next();\r\n        }\r\n        return count;\r\n    }\r\n\r\n    toArray(): T[] {\r\n        const result: T[] = [];\r\n        const iterator = this.iterator();\r\n        let next: IteratorResult<T>;\r\n        do {\r\n            next = iterator.next();\r\n            if (next.value !== undefined) {\r\n                result.push(next.value);\r\n            }\r\n        } while (!next.done);\r\n        return result;\r\n    }\r\n\r\n    toSet(): Set<T> {\r\n        return new Set(this);\r\n    }\r\n\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\r\n        const entryStream = this.map(element => <[K, V]>[\r\n            keyFn ? keyFn(element) : element,\r\n            valueFn ? valueFn(element) : element\r\n        ]);\r\n        return new Map(entryStream);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join();\r\n    }\r\n\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\r\n        return new StreamImpl<{ first: S, firstDone: boolean, iterator: Iterator<T2, unknown, undefined> }, T | T2>(\r\n            () => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }),\r\n            state => {\r\n                let result: IteratorResult<T | T2>;\r\n                if (!state.firstDone) {\r\n                    do {\r\n                        result = this.nextFn(state.first);\r\n                        if (!result.done) {\r\n                            return result;\r\n                        }\r\n                    } while (!result.done);\r\n                    state.firstDone = true;\r\n                }\r\n                do {\r\n                    result = state.iterator.next();\r\n                    if (!result.done) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    join(separator = ','): string {\r\n        const iterator = this.iterator();\r\n        let value = '';\r\n        let result: IteratorResult<T>;\r\n        let addSeparator = false;\r\n        do {\r\n            result = iterator.next();\r\n            if (!result.done) {\r\n                if (addSeparator) {\r\n                    value += separator;\r\n                }\r\n                value += toString(result.value);\r\n            }\r\n            addSeparator = true;\r\n        } while (!result.done);\r\n        return value;\r\n    }\r\n\r\n    indexOf(searchElement: T, fromIndex = 0): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (index >= fromIndex && next.value === searchElement) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // In the following definition the '& this' part in the return type is important\r\n    // _and_ the order within 'Stream<U> & this' is crucial!\r\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\r\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\r\n    // ```\r\n    //  const stream = new StreamImpl(...);\r\n    //  ... stream.every(<typeGuard>) & stream....\r\n    // ```\r\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\r\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\r\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\r\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n    every(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (!predicate(next.value)) {\r\n                return false;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    some(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, index: number) => void): void {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            callbackfn(next.value, index);\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n    }\r\n\r\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\r\n        return new StreamImpl<S, U>(\r\n            this.startFn,\r\n            (state) => {\r\n                const { done, value } = this.nextFn(state);\r\n                if (done) {\r\n                    return DONE_RESULT;\r\n                } else {\r\n                    return { done: false, value: callbackfn(value) };\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\r\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            this.startFn,\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state);\r\n                    if (!result.done && predicate(result.value)) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    nonNullable(): Stream<NonNullable<T>> {\r\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\r\n    }\r\n\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const iterator = this.iterator();\r\n        let previousValue: U | T | undefined = initialValue;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (previousValue === undefined) {\r\n                previousValue = next.value;\r\n            } else {\r\n                previousValue = callbackfn(previousValue, next.value);\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return previousValue;\r\n    }\r\n\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\r\n    }\r\n\r\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const next = iterator.next();\r\n        if (next.done) {\r\n            return initialValue;\r\n        }\r\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\r\n        if (previousValue === undefined) {\r\n            return next.value;\r\n        }\r\n        return callbackfn(previousValue, next.value);\r\n    }\r\n\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return next.value;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findIndex(predicate: (value: T) => unknown): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    includes(searchElement: T): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (next.value === searchElement) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\r\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\r\n        return new StreamImpl<FlatMapState, U>(\r\n            () => ({ this: this.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = this.nextFn(state.this);\r\n                    if (!done) {\r\n                        const mapped = callbackfn(value);\r\n                        if (isIterable(mapped)) {\r\n                            state.iterator = mapped[Symbol.iterator]();\r\n                        } else {\r\n                            return { done: false, value: mapped };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\r\n        if (depth === undefined) {\r\n            depth = 1 as D;\r\n        }\r\n        if (depth <= 0) {\r\n            return this as unknown as FlatStream<T, D>;\r\n        }\r\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\r\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\r\n        return new StreamImpl<FlatMapState, T>(\r\n            () => ({ this: stream.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = stream.nextFn(state.this);\r\n                    if (!done) {\r\n                        if (isIterable(value)) {\r\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\r\n                        } else {\r\n                            return { done: false, value: value };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        ) as unknown as FlatStream<T, D>;\r\n    }\r\n\r\n    head(): T | undefined {\r\n        const iterator = this.iterator();\r\n        const result = iterator.next();\r\n        if (result.done) {\r\n            return undefined;\r\n        }\r\n        return result.value;\r\n    }\r\n\r\n    tail(skipCount = 1): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            () => {\r\n                const state = this.startFn();\r\n                for (let i = 0; i < skipCount; i++) {\r\n                    const next = this.nextFn(state);\r\n                    if (next.done) {\r\n                        return state;\r\n                    }\r\n                }\r\n                return state;\r\n            },\r\n            this.nextFn\r\n        );\r\n    }\r\n\r\n    limit(maxSize: number): Stream<T> {\r\n        return new StreamImpl<{ size: number, state: S }, T>(\r\n            () => ({ size: 0, state: this.startFn() }),\r\n            state => {\r\n                state.size++;\r\n                if (state.size > maxSize) {\r\n                    return DONE_RESULT;\r\n                }\r\n                return this.nextFn(state.state);\r\n            }\r\n        );\r\n    }\r\n\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\r\n        return new StreamImpl<{ set: Set<Key | T>, internalState: S }, T>(\r\n            () => ({ set: new Set<Key | T>(), internalState: this.startFn() }),\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state.internalState);\r\n                    if (!result.done) {\r\n                        const value = by ? by(result.value) : result.value;\r\n                        if (!state.set.has(value)) {\r\n                            state.set.add(value);\r\n                            return result;\r\n                        }\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\r\n        const otherKeySet = new Set<Key | T>();\r\n        for (const item of other) {\r\n            const value = key ? key(item) : item;\r\n            otherKeySet.add(value);\r\n        }\r\n        return this.filter(e => {\r\n            const ownKey = key ? key(e) : e;\r\n            return !otherKeySet.has(ownKey);\r\n        });\r\n    }\r\n}\r\n\r\nfunction toString(item: unknown): string {\r\n    if (typeof item === 'string') {\r\n        return item as string;\r\n    }\r\n    if (typeof item === 'undefined') {\r\n        return 'undefined';\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof (item as any).toString === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return (item as any).toString();\r\n    }\r\n    return Object.prototype.toString.call(item);\r\n}\r\n\r\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\r\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * An empty stream of any type.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\r\n\r\n/**\r\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\r\n */\r\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\r\n\r\n/**\r\n * Create a stream from one or more iterables or array-likes.\r\n */\r\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\r\n    if (collections.length === 1) {\r\n        const collection = collections[0];\r\n        if (collection instanceof StreamImpl) {\r\n            return collection as Stream<T>;\r\n        }\r\n        if (isIterable(collection)) {\r\n            return new StreamImpl<Iterator<T, undefined>, T>(\r\n                () => collection[Symbol.iterator](),\r\n                (iterator) => iterator.next()\r\n            );\r\n        }\r\n        if (typeof collection.length === 'number') {\r\n            return new StreamImpl<{ index: number }, T>(\r\n                () => ({ index: 0 }),\r\n                (state) => {\r\n                    if (state.index < collection.length) {\r\n                        return { done: false, value: collection[state.index++] };\r\n                    } else {\r\n                        return DONE_RESULT;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    if (collections.length > 1) {\r\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\r\n        return new StreamImpl<State, T>(\r\n            () => ({ collIndex: 0, arrIndex: 0 }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (!next.done) {\r\n                            return next;\r\n                        }\r\n                        state.iterator = undefined;\r\n                    }\r\n                    if (state.array) {\r\n                        if (state.arrIndex < state.array.length) {\r\n                            return { done: false, value: state.array[state.arrIndex++] };\r\n                        }\r\n                        state.array = undefined;\r\n                        state.arrIndex = 0;\r\n                    }\r\n                    if (state.collIndex < collections.length) {\r\n                        const collection = collections[state.collIndex++];\r\n                        if (isIterable(collection)) {\r\n                            state.iterator = collection[Symbol.iterator]();\r\n                        } else if (collection && typeof collection.length === 'number') {\r\n                            state.array = collection;\r\n                        }\r\n                    }\r\n                } while (state.iterator || state.array || state.collIndex < collections.length);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n    return EMPTY_STREAM;\r\n}\r\n\r\n/**\r\n * A tree iterator adds the ability to prune the current iteration.\r\n */\r\nexport interface TreeIterator<T> extends IterableIterator<T> {\r\n    /**\r\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\r\n     * element had no children.\r\n     */\r\n    prune(): void\r\n}\r\n\r\n/**\r\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\r\n */\r\nexport interface TreeStream<T> extends Stream<T> {\r\n    iterator(): TreeIterator<T>\r\n}\r\n\r\n/**\r\n * The default implementation of `TreeStream` takes a root element and a function that computes the\r\n * children of its argument. Whether the root node included in the stream is controlled with the\r\n * `includeRoot` option, which defaults to `false`.\r\n */\r\nexport class TreeStreamImpl<T>\r\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\r\n    implements TreeStream<T> {\r\n\r\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\r\n        super(\r\n            () => ({\r\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\r\n                pruned: false\r\n            }),\r\n            state => {\r\n                if (state.pruned) {\r\n                    state.iterators.pop();\r\n                    state.pruned = false;\r\n                }\r\n                while (state.iterators.length > 0) {\r\n                    const iterator = state.iterators[state.iterators.length - 1];\r\n                    const next = iterator.next();\r\n                    if (next.done) {\r\n                        state.iterators.pop();\r\n                    } else {\r\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\r\n                        return next;\r\n                    }\r\n                }\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    override iterator(): TreeIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            prune: () => {\r\n                iterator.state.pruned = true;\r\n            },\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of utility functions that reduce a stream to a single value.\r\n */\r\nexport namespace Reduction {\r\n\r\n    /**\r\n     * Compute the sum of a number stream.\r\n     */\r\n    export function sum(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a + b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the product of a number stream.\r\n     */\r\n    export function product(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a * b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function min(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.min(a, b));\r\n    }\r\n\r\n    /**\r\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function max(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.max(a, b));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\r\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\r\n\r\n/**\r\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\r\n */\r\nexport interface ValueConverter {\r\n    /**\r\n     * Converts a string value from the source text format into a value to be held in the AST.\r\n     */\r\n    convert(input: string, cstNode: CstNode): ValueType;\r\n}\r\n\r\nexport type ValueType = string | number | boolean | bigint | Date;\r\n\r\nexport class DefaultValueConverter implements ValueConverter {\r\n\r\n    convert(input: string, cstNode: CstNode): ValueType {\r\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\r\n        if (isCrossReference(feature)) {\r\n            feature = getCrossReferenceTerminal(feature);\r\n        }\r\n        if (isRuleCall(feature)) {\r\n            const rule = feature.rule.ref;\r\n            if (!rule) {\r\n                throw new Error('This cst node was not parsed by a rule.');\r\n            }\r\n            return this.runConverter(rule, input, cstNode);\r\n        }\r\n        return input;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\r\n        switch (rule.name.toUpperCase()) {\r\n            case 'INT': return ValueConverter.convertInt(input);\r\n            case 'STRING': return ValueConverter.convertString(input);\r\n            case 'ID': return ValueConverter.convertID(input);\r\n        }\r\n        switch (getRuleType(rule)?.toLowerCase()) {\r\n            case 'number': return ValueConverter.convertNumber(input);\r\n            case 'boolean': return ValueConverter.convertBoolean(input);\r\n            case 'bigint': return ValueConverter.convertBigint(input);\r\n            case 'date': return ValueConverter.convertDate(input);\r\n            default: return input;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace ValueConverter {\r\n\r\n    export function convertString(input: string): string {\r\n        let result = '';\r\n        for (let i = 1; i < input.length - 1; i++) {\r\n            const c = input.charAt(i);\r\n            if (c === '\\\\') {\r\n                const c1 = input.charAt(++i);\r\n                result += convertEscapeCharacter(c1);\r\n            } else {\r\n                result += c;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertEscapeCharacter(char: string): string {\r\n        switch (char) {\r\n            case 'b': return '\\b';\r\n            case 'f': return '\\f';\r\n            case 'n': return '\\n';\r\n            case 'r': return '\\r';\r\n            case 't': return '\\t';\r\n            case 'v': return '\\v';\r\n            case '0': return '\\0';\r\n            default: return char;\r\n        }\r\n    }\r\n\r\n    export function convertID(input: string): string {\r\n        if (input.charAt(0) === '^') {\r\n            return input.substring(1);\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n\r\n    export function convertInt(input: string): number {\r\n        return parseInt(input);\r\n    }\r\n\r\n    export function convertBigint(input: string): bigint {\r\n        return BigInt(input);\r\n    }\r\n\r\n    export function convertDate(input: string): Date {\r\n        return new Date(input);\r\n    }\r\n\r\n    export function convertNumber(input: string): number {\r\n        return Number(input);\r\n    }\r\n\r\n    export function convertBoolean(input: string): boolean {\r\n        return input.toLowerCase() === 'true';\r\n    }\r\n\r\n}\r\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport type { URI } from './utils/uri-utils.js';\r\nimport type { AbstractElement } from './languages/generated/ast.js';\r\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\r\n\r\n/**\r\n * A node in the Abstract Syntax Tree (AST).\r\n */\r\nexport interface AstNode {\r\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\r\n    readonly $type: string;\r\n    /** The container node in the AST; every node except the root node has a container. */\r\n    readonly $container?: AstNode;\r\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\r\n    readonly $containerProperty?: string;\r\n    /** In case `$containerProperty` is an array, the array index is stored here. */\r\n    readonly $containerIndex?: number;\r\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\r\n    readonly $cstNode?: CstNode;\r\n    /** The document containing the AST; only the root node has a direct reference to the document. */\r\n    readonly $document?: LangiumDocument;\r\n}\r\n\r\nexport function isAstNode(obj: unknown): obj is AstNode {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\r\n}\r\n\r\nexport interface GenericAstNode extends AstNode {\r\n    [key: string]: unknown\r\n}\r\n\r\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\r\n\r\n/**\r\n * The property names of a given AST node type.\r\n */\r\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\r\n\r\n/**\r\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\r\n */\r\nexport interface Reference<T extends AstNode = AstNode> {\r\n    /**\r\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\r\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\r\n     * the value is `undefined`.\r\n     */\r\n    readonly ref?: T;\r\n\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    readonly error?: LinkingError;\r\n    /** The CST node from which the reference was parsed */\r\n    readonly $refNode?: CstNode;\r\n    /** The actual text used to look up in the surrounding scope */\r\n    readonly $refText: string;\r\n    /** The node description for the AstNode returned by `ref`  */\r\n    readonly $nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isReference(obj: unknown): obj is Reference {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\r\n}\r\n\r\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\r\n    readonly ref: T;\r\n}\r\n\r\n/**\r\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\r\n */\r\nexport interface AstNodeDescription {\r\n    /** The target node; should be present only for local references (linking to the same document). */\r\n    node?: AstNode;\r\n    /**\r\n     * The document segment that represents the range of the name of the AST node.\r\n     */\r\n    nameSegment?: DocumentSegment;\r\n    /**\r\n     * The document segment that represents the full range of the AST node.\r\n     */\r\n    selectionSegment?: DocumentSegment;\r\n    /** `$type` property value of the AST node */\r\n    type: string;\r\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\r\n    name: string;\r\n    /** URI to the document containing the AST node */\r\n    documentUri: URI;\r\n    /** Navigation path inside the document */\r\n    path: string;\r\n}\r\n\r\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\r\n    return typeof obj === 'object' && obj !== null\r\n        && typeof (obj as AstNodeDescription).name === 'string'\r\n        && typeof (obj as AstNodeDescription).type === 'string'\r\n        && typeof (obj as AstNodeDescription).path === 'string';\r\n}\r\n\r\n/**\r\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\r\n * unresolved references.\r\n */\r\nexport interface ReferenceInfo {\r\n    reference: Reference\r\n    container: AstNode\r\n    property: string\r\n    index?: number\r\n}\r\n\r\n/**\r\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\r\n */\r\nexport interface LinkingError extends ReferenceInfo {\r\n    message: string;\r\n    targetDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isLinkingError(obj: unknown): obj is LinkingError {\r\n    return typeof obj === 'object' && obj !== null\r\n        && isAstNode((obj as LinkingError).container)\r\n        && isReference((obj as LinkingError).reference)\r\n        && typeof (obj as LinkingError).message === 'string';\r\n}\r\n\r\n/**\r\n * Service used for generic access to the structure of the AST. This service is shared between\r\n * all involved languages, so it operates on the superset of types of these languages.\r\n */\r\nexport interface AstReflection {\r\n    getAllTypes(): string[]\r\n    getAllSubTypes(type: string): string[]\r\n    getReferenceType(refInfo: ReferenceInfo): string\r\n    getTypeMetaData(type: string): TypeMetaData\r\n    isInstance(node: unknown, type: string): boolean\r\n    isSubtype(subtype: string, supertype: string): boolean\r\n}\r\n\r\n/**\r\n * An abstract implementation of the {@link AstReflection} interface.\r\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\r\n */\r\nexport abstract class AbstractAstReflection implements AstReflection {\r\n\r\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\r\n    protected allSubtypes: Record<string, string[] | undefined> = {};\r\n\r\n    abstract getAllTypes(): string[];\r\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\r\n    abstract getTypeMetaData(type: string): TypeMetaData;\r\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\r\n\r\n    isInstance(node: unknown, type: string): boolean {\r\n        return isAstNode(node) && this.isSubtype(node.$type, type);\r\n    }\r\n\r\n    isSubtype(subtype: string, supertype: string): boolean {\r\n        if (subtype === supertype) {\r\n            return true;\r\n        }\r\n        let nested = this.subtypes[subtype];\r\n        if (!nested) {\r\n            nested = this.subtypes[subtype] = {};\r\n        }\r\n        const existing = nested[supertype];\r\n        if (existing !== undefined) {\r\n            return existing;\r\n        } else {\r\n            const result = this.computeIsSubtype(subtype, supertype);\r\n            nested[supertype] = result;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    getAllSubTypes(type: string): string[] {\r\n        const existing = this.allSubtypes[type];\r\n        if (existing) {\r\n            return existing;\r\n        } else {\r\n            const allTypes = this.getAllTypes();\r\n            const types: string[] = [];\r\n            for (const possibleSubType of allTypes) {\r\n                if (this.isSubtype(possibleSubType, type)) {\r\n                    types.push(possibleSubType);\r\n                }\r\n            }\r\n            this.allSubtypes[type] = types;\r\n            return types;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents runtime meta data about a meta model type.\r\n */\r\nexport interface TypeMetaData {\r\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\r\n    name: string\r\n    /** A list of properties. They can contain default values for their respective property in the AST. */\r\n    properties: TypeProperty[]\r\n}\r\n\r\n/**\r\n * Describes the meta data of a property of an AST node.\r\n *\r\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\r\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\r\n */\r\nexport interface TypeProperty {\r\n    name: string\r\n    defaultValue?: PropertyType\r\n}\r\n\r\n/**\r\n * Represents a default value for an AST property.\r\n */\r\nexport type PropertyType = number | string | boolean | PropertyType[];\r\n\r\n/**\r\n * A node in the Concrete Syntax Tree (CST).\r\n */\r\nexport interface CstNode extends DocumentSegment {\r\n    /** The container node in the CST */\r\n    readonly container?: CompositeCstNode;\r\n    /** @deprecated use `container` instead. */\r\n    readonly parent?: CompositeCstNode;\r\n    /** The actual text */\r\n    readonly text: string;\r\n    /** The root CST node */\r\n    readonly root: RootCstNode;\r\n    /** The grammar element from which this node was parsed */\r\n    readonly grammarSource?: AbstractElement;\r\n    /** @deprecated use `grammarSource` instead. */\r\n    readonly feature?: AbstractElement;\r\n    /** The AST node created from this CST node */\r\n    readonly astNode: AstNode;\r\n    /** @deprecated use `astNode` instead. */\r\n    readonly element: AstNode;\r\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\r\n    readonly hidden: boolean;\r\n}\r\n\r\n/**\r\n * A composite CST node contains other nodes, but no directly associated token.\r\n */\r\nexport interface CompositeCstNode extends CstNode {\r\n    readonly content: CstNode[];\r\n    /** @deprecated use `content` instead. */\r\n    readonly children: CstNode[];\r\n}\r\n\r\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\r\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\r\n}\r\n\r\n/**\r\n * A leaf CST node corresponds to a token in the input token stream.\r\n */\r\nexport interface LeafCstNode extends CstNode {\r\n    readonly tokenType: TokenType;\r\n}\r\n\r\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\r\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\r\n}\r\n\r\nexport interface RootCstNode extends CompositeCstNode {\r\n    readonly fullText: string\r\n}\r\n\r\nexport function isRootCstNode(node: unknown): node is RootCstNode {\r\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\r\n}\r\n\r\n/**\r\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\r\n */\r\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\r\n\r\n/**\r\n * Returns the property names (!) of an AstNode that are cross-references.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\r\n */\r\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\r\n    ExtractKeysOfValueType<N, Reference|undefined>\r\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\n) & {};\r\n\r\n/**\r\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\r\n */\r\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\r\n\r\n/**\r\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\r\n */\r\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\r\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\r\n}[keyof A];\r\n\r\nexport type Mutable<T> = {\r\n    -readonly [P in keyof T]: T[P]\r\n};\r\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-2NYFTIL2.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-EXZZNE6F.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-V4Q32G6S.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-ROXG7S4E.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-C4OEIS7N.mjs\";\nimport {\n  RadarModule,\n  createRadarServices\n} from \"./chunks/mermaid-parser.core/chunk-2O5ZK7RR.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  Statement,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection\n} from \"./chunks/mermaid-parser.core/chunk-7PKI6E2E.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-4N47QTOZ.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-KVYON367.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-R6RNRRYF.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-4AB2E3PP.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-O2Q2CXLX.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\"),\n  radar: /* @__PURE__ */ __name(async () => {\n    const { createRadarServices: createRadarServices2 } = await import(\"./chunks/mermaid-parser.core/radar-MK3ICKWK.mjs\");\n    const parser = createRadarServices2().Radar.parser.LangiumParser;\n    parsers.radar = parser;\n  }, \"radar\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  RadarModule,\n  Statement,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createRadarServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  parse\n};\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * A `Module<I>` is a description of possibly grouped service factories.\r\n *\r\n * Given a type I = { group: { service: A } },\r\n * Module<I> := { group: { service: (injector: I) => A } }\r\n *\r\n * Making `I` available during the creation of `I` allows us to create cyclic\r\n * dependencies.\r\n */\r\nexport type Module<I, T = I> = {\r\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\r\n}\r\n\r\nexport namespace Module {\r\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\r\n}\r\n\r\n/**\r\n * Given a set of modules, the inject function returns a lazily evaluated injector\r\n * that injects dependencies into the requested service when it is requested the\r\n * first time. Subsequent requests will return the same service.\r\n *\r\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\r\n * by injecting a provider `() => T` instead of a `T`.\r\n *\r\n * Please note that the arguments may be objects or arrays. However, the result will\r\n * be an object. Using it with for..of will have no effect.\r\n *\r\n * @param module1 first Module\r\n * @param module2 (optional) second Module\r\n * @param module3 (optional) third Module\r\n * @param module4 (optional) fourth Module\r\n * @param module5 (optional) fifth Module\r\n * @param module6 (optional) sixth Module\r\n * @param module7 (optional) seventh Module\r\n * @param module8 (optional) eighth Module\r\n * @param module9 (optional) ninth Module\r\n * @returns a new object of type I\r\n */\r\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\r\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\r\n): I {\r\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\r\n    return _inject(module);\r\n}\r\n\r\nconst isProxy = Symbol('isProxy');\r\n\r\n/**\r\n * Eagerly load all services in the given dependency injection container. This is sometimes\r\n * necessary because services can register event listeners in their constructors.\r\n */\r\nexport function eagerLoad<T>(item: T): T {\r\n    if (item && (item as any)[isProxy]) {\r\n        for (const value of Object.values(item)) {\r\n            eagerLoad(value);\r\n        }\r\n    }\r\n    return item;\r\n}\r\n\r\n/**\r\n * Helper function that returns an injector by creating a proxy.\r\n * Invariant: injector is of type I. If injector is undefined, then T = I.\r\n */\r\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\r\n    const proxy: any = new Proxy({} as any, {\r\n        deleteProperty: () => false,\r\n        set: () => {\r\n            throw new Error('Cannot set property on injected service container');\r\n        },\r\n        get: (obj, prop) => {\r\n            if (prop === isProxy) {\r\n                return true;\r\n            } else {\r\n                return _resolve(obj, prop, module, injector || proxy);\r\n            }\r\n        },\r\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\r\n        has: (_, prop) => prop in module, // used by ..in..\r\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\r\n    });\r\n    return proxy;\r\n}\r\n\r\n/**\r\n * Internally used to tag a requested dependency, directly before calling the factory.\r\n * This allows us to find cycles during instance creation.\r\n */\r\nconst __requested__ = Symbol();\r\n\r\n/**\r\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\r\n * the module description. The result of service factories is cached. Groups are\r\n * recursively proxied.\r\n *\r\n * @param obj an object holding all group proxies and services\r\n * @param prop the key of a value within obj\r\n * @param module an object containing groups and service factories\r\n * @param injector the first level proxy that provides access to all values\r\n * @returns the requested value `obj[prop]`\r\n * @throws Error if a dependency cycle is detected\r\n */\r\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\r\n    if (prop in obj) {\r\n        if (obj[prop] instanceof Error) {\r\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\r\n        }\r\n        if (obj[prop] === __requested__) {\r\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\r\n        }\r\n        return obj[prop];\r\n    } else if (prop in module) {\r\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\r\n        obj[prop] = __requested__;\r\n        try {\r\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\r\n        } catch (error) {\r\n            obj[prop] = error instanceof Error ? error : undefined;\r\n            throw error;\r\n        }\r\n        return obj[prop];\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a deep-merge of two modules by writing source entries into the target module.\r\n *\r\n * @param target the module which is written\r\n * @param source the module which is read\r\n * @returns the target module\r\n */\r\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\r\n    if (source) {\r\n        for (const [key, value2] of Object.entries(source)) {\r\n            if (value2 !== undefined) {\r\n                const value1 = target[key];\r\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\r\n                    target[key] = _merge(value1, value2);\r\n                } else {\r\n                    target[key] = value2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CstNode } from '../syntax-tree.js';\r\n\r\nexport class ErrorWithLocation extends Error {\r\n    constructor(node: CstNode | undefined, message: string) {\r\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\r\n    }\r\n}\r\n\r\nexport function assertUnreachable(_: never): never {\r\n    throw new Error('Error! The input value was not handled.');\r\n}\r\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\r\nimport { inRange } from './cst-utils.js';\r\n\r\n/**\r\n * Link the `$container` and other related properties of every AST node that is directly contained\r\n * in the given `node`.\r\n */\r\nexport function linkContentToContainer(node: AstNode): void {\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach((item, index) => {\r\n                    if (isAstNode(item)) {\r\n                        (item as Mutable<AstNode>).$container = node;\r\n                        (item as Mutable<AstNode>).$containerProperty = name;\r\n                        (item as Mutable<AstNode>).$containerIndex = index;\r\n                    }\r\n                });\r\n            } else if (isAstNode(value)) {\r\n                (value as Mutable<AstNode>).$container = node;\r\n                (value as Mutable<AstNode>).$containerProperty = name;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\r\n * node that matches the type predicate. If the start node itself matches, it is returned.\r\n * If no container matches, `undefined` is returned.\r\n */\r\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\r\n    let item = node;\r\n    while (item) {\r\n        if (typePredicate(item)) {\r\n            return item;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\r\n * of a container that matches the given predicate. The start node is included in the checks.\r\n */\r\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\r\n    let item = node;\r\n    while (item) {\r\n        if (predicate(item)) {\r\n            return true;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Retrieve the document in which the given AST node is contained. A reference to the document is\r\n * usually held by the root node of the AST.\r\n *\r\n * @throws an error if the node is not contained in a document.\r\n */\r\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\r\n    const rootNode = findRootNode(node);\r\n    const result = rootNode.$document;\r\n    if (!result) {\r\n        throw new Error('AST node has no document.');\r\n    }\r\n    return result as LangiumDocument<T>;\r\n}\r\n\r\n/**\r\n * Returns the root node of the given AST node by following the `$container` references.\r\n */\r\nexport function findRootNode(node: AstNode): AstNode {\r\n    while (node.$container) {\r\n        node = node.$container;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport interface AstStreamOptions {\r\n    /**\r\n     * Optional target range that the nodes in the stream need to intersect\r\n     */\r\n    range?: Range\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\r\n    if (!node) {\r\n        throw new Error('Node must be an AstNode.');\r\n    }\r\n    const range = options?.range;\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, AstNode>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isAstNode(value)) {\r\n                    state.keyIndex++;\r\n                    if (isAstNodeInRange(value, range)) {\r\n                        return { done: false, value };\r\n                    }\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\r\n                            return { done: false, value: element };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\r\n * This does not include the root node itself.\r\n */\r\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options));\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\r\n        // Return an empty stream if the root node isn't in range\r\n        return new TreeStreamImpl(root, () => []);\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\r\n}\r\n\r\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\r\n    if (!range) {\r\n        return true;\r\n    }\r\n    const nodeRange = astNode.$cstNode?.range;\r\n    if (!nodeRange) {\r\n        return false;\r\n    }\r\n    return inRange(nodeRange, range);\r\n}\r\n\r\n/**\r\n * Create a stream of all cross-references that are held by the given AST node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, ReferenceInfo>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isReference(value)) {\r\n                    state.keyIndex++;\r\n                    return { done: false, value: { reference: value, container: node, property } };\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isReference(element)) {\r\n                            return { done: false, value: { reference: element, container: node, property, index } };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a Stream of references to the target node from the AstNode tree\r\n *\r\n * @param targetNode AstNode we are looking for\r\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\r\n */\r\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\r\n    const refs: Reference[] = [];\r\n    streamAst(lookup).forEach(node => {\r\n        streamReferences(node).forEach(refInfo => {\r\n            if (refInfo.reference.ref === targetNode) {\r\n                refs.push(refInfo.reference);\r\n            }\r\n        });\r\n    });\r\n    return stream(refs);\r\n}\r\n\r\n/**\r\n * Assigns all mandatory AST properties to the specified node.\r\n *\r\n * @param reflection Reflection object used to gather mandatory properties for the node.\r\n * @param node Specified node is modified in place and properties are directly assigned.\r\n */\r\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\r\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\r\n    const genericNode = node as GenericAstNode;\r\n    for (const property of typeMetaData.properties) {\r\n        // Only set the value if the property is not already set and if it has a default value\r\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\r\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\r\n    if (Array.isArray(propertyType)) {\r\n        return [...propertyType.map(copyDefaultValue)];\r\n    } else {\r\n        return propertyType;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deep copy of the specified AST node.\r\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\r\n *\r\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\r\n */\r\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\r\n    const copy: GenericAstNode = { $type: node.$type };\r\n\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (isAstNode(value)) {\r\n                copy[name] = copyAstNode(value, buildReference);\r\n            } else if (isReference(value)) {\r\n                copy[name] = buildReference(\r\n                    copy,\r\n                    name,\r\n                    value.$refNode,\r\n                    value.$refText\r\n                );\r\n            } else if (Array.isArray(value)) {\r\n                const copiedArray: unknown[] = [];\r\n                for (const element of value) {\r\n                    if (isAstNode(element)) {\r\n                        copiedArray.push(copyAstNode(element, buildReference));\r\n                    } else if (isReference(element)) {\r\n                        copiedArray.push(\r\n                            buildReference(\r\n                                copy,\r\n                                name,\r\n                                element.$refNode,\r\n                                element.$refText\r\n                            )\r\n                        );\r\n                    } else {\r\n                        copiedArray.push(element);\r\n                    }\r\n                }\r\n                copy[name] = copiedArray;\r\n            } else {\r\n                copy[name] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    linkContentToContainer(copy);\r\n    return copy as unknown as T;\r\n}\r\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CustomPatternMatcherFunc, ILexingError, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { Lexer } from 'chevrotain';\r\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\r\nimport { streamAllContents } from '../utils/ast-utils.js';\r\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\n\r\nexport interface TokenBuilderOptions {\r\n    caseInsensitive?: boolean\r\n}\r\n\r\nexport interface TokenBuilder {\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\r\n    /**\r\n     * Produces a lexing report for the given text that was just tokenized using the tokens provided by this builder.\r\n     *\r\n     * @param text The text that was tokenized.\r\n     */\r\n    flushLexingReport?(text: string): LexingReport;\r\n}\r\n\r\n/**\r\n * A custom lexing report that can be produced by the token builder during the lexing process.\r\n * Adopters need to ensure that the any custom fields are serializable so they can be sent across worker threads.\r\n */\r\nexport interface LexingReport {\r\n    diagnostics: LexingDiagnostic[];\r\n}\r\n\r\nexport type LexingDiagnosticSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport interface LexingDiagnostic extends ILexingError {\r\n    severity?: LexingDiagnosticSeverity;\r\n}\r\n\r\nexport class DefaultTokenBuilder implements TokenBuilder {\r\n    /**\r\n     * The list of diagnostics stored during the lexing process of a single text.\r\n     */\r\n    protected diagnostics: LexingDiagnostic[] = [];\r\n\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\r\n        const reachableRules = stream(getAllReachableRules(grammar, false));\r\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\r\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\r\n\r\n        terminalTokens.forEach(terminalToken => {\r\n            const pattern = terminalToken.PATTERN;\r\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\r\n                tokens.unshift(terminalToken);\r\n            } else {\r\n                tokens.push(terminalToken);\r\n            }\r\n        });\r\n        // We don't need to add the EOF token explicitly.\r\n        // It is automatically available at the end of the token stream.\r\n        return tokens;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    flushLexingReport(text: string): LexingReport {\r\n        return { diagnostics: this.popDiagnostics() };\r\n    }\r\n\r\n    protected popDiagnostics(): LexingDiagnostic[] {\r\n        const diagnostics = [...this.diagnostics];\r\n        this.diagnostics = [];\r\n        return diagnostics;\r\n    }\r\n\r\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\r\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\r\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\r\n    }\r\n\r\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\r\n        const regex = terminalRegex(terminal);\r\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\r\n        const tokenType: TokenType = {\r\n            name: terminal.name,\r\n            PATTERN: pattern,\r\n        };\r\n        if (typeof pattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n        if (terminal.hidden) {\r\n            // Only skip tokens that are able to accept whitespace\r\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\r\n        }\r\n        return tokenType;\r\n    }\r\n\r\n    protected requiresCustomPattern(regex: RegExp): boolean {\r\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\r\n            // Unicode and dotall regexes are not supported by Chevrotain.\r\n            return true;\r\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\r\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\r\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\r\n        return (text, offset) => {\r\n            stickyRegex.lastIndex = offset;\r\n            const execResult = stickyRegex.exec(text);\r\n            return execResult;\r\n        };\r\n    }\r\n\r\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\r\n        return rules\r\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\r\n            .filter(isParserRule)\r\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\r\n            .distinct(e => e.value).toArray()\r\n            // Sort keywords by descending length\r\n            .sort((a, b) => b.value.length - a.value.length)\r\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\r\n    }\r\n\r\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\r\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\r\n        const tokenType: TokenType = {\r\n            name: keyword.value,\r\n            PATTERN: keywordPattern,\r\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\r\n        };\r\n\r\n        if (typeof keywordPattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n\r\n        return tokenType;\r\n    }\r\n\r\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\r\n        return caseInsensitive ?\r\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\r\n            keyword.value;\r\n    }\r\n\r\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\r\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\r\n            const pattern = token?.PATTERN as RegExp;\r\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\r\n                longerAlts.push(token);\r\n            }\r\n            return longerAlts;\r\n        }, []);\r\n    }\r\n}\r\n"],"names":["cc","char","charCodeAt","insertToSet","item","set","Array","isArray","forEach","subItem","push","addFlag","flagObj","flagKey","ASSERT_EXISTS","obj","undefined","Error","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","i","wordCharCodes","concat","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","constructor","idx","input","groupIdx","saveState","this","restoreState","newState","pattern","consumeChar","value","disjunction","flags","type","loc","begin","end","length","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","range","isBacktracking","arguments","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","to","classEscape","capturing","groupAst","number","parseInt","nextChar","howMuch","isAtom","prevState","e","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","node","key","child","hasOwnProperty","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","Object","prototype","object","call","path","hasPath","baseHas","findIndexFunc","collection","predicate","fromIndex","iterable","isArrayLike","iteratee","baseIteratee","keys","index","nativeMax","Math","max","createFind","array","toInteger","baseFindIndex","customizer","isObject","castPath","lastIndex","nested","toKey","newValue","objValue","isIndex","assignValue","paths","result","baseGet","baseSet","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","isAbstractElement","reflection","isInstance","ArrayLiteral","ArrayType","BooleanLiteral","isBooleanLiteral","Conjunction","isConjunction","Disjunction","isDisjunction","Grammar","GrammarImport","InferredType","isInferredType","Interface","isInterface","NamedArgument","Negation","isNegation","NumberLiteral","Parameter","ParameterReference","isParameterReference","ParserRule","isParserRule","ReferenceType","ReturnType","isReturnType","SimpleType","isSimpleType","StringLiteral","TerminalRule","isTerminalRule","Type","isType","TypeAttribute","UnionType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","isCharacterRange","CrossReference","isCrossReference","EndOfFile","isEndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","isNegatedToken","RegexToken","isRegexToken","RuleCall","isRuleCall","TerminalAlternatives","isTerminalAlternatives","TerminalGroup","isTerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","isUntilToken","Wildcard","isWildcard","LangiumGrammarAstReflection","AbstractAstReflection","getAllTypes","computeIsSubtype","subtype","supertype","isSubtype","getReferenceType","refInfo","referenceId","container","$type","property","getTypeMetaData","name","properties","defaultValue","getAllReachableRules","grammar","allTerminals","ruleNames","Set","entryRule","rules","find","ast","entry","getEntryRule","topMostRules","filter","hidden","getHiddenRules","rule","ruleDfs","has","add","visitedSet","streamAllContents","refRule","ref","getCrossReferenceTerminal","crossRef","terminal","nameAssigment","findNameAssignment","isCommentTerminal","terminalRule","isWhitespace","terminalRegex","findNodesForProperty","findNodesForPropertyInternal","astNode","findNodeForProperty","nodes","min","element","first","nodeFeature","getContainerOfType","grammarSource","feature","isCompositeCstNode","content","flatMap","findNodeForKeyword","keyword","findNodesForKeywordInternal","treeIterator","streamCst","iterator","keywordNodes","next","done","childNode","prune","findAssignment","cstNode","_a","assignment","startNode","$container","assertUnreachable","findNameAssignmentInternal","Map","cache","go","refType","childAssignment","get","toLowerCase","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","Boolean","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","actionType","action","getActionType","getRuleType","_b","_c","s","u","source","abstractElementToRegex","flagText","entries","_ref","map","_ref2","join","RegExp","WILDCARD","withCardinality","alternatives","elements","cardinality","lookahead","right","keywordToRegex","left","wrap","characterRangeToRegex","negate","until","lastSlash","regex","lastIndexOf","regexFlags","includes","escapeRegExp","options","ArchitectureTokenBuilder","AbstractMermaidTokenBuilder","__name","super","ArchitectureValueConverter","AbstractMermaidValueConverter","runCustomConverter","_cstNode","replace","trim","ArchitectureModule","parser","TokenBuilder","ValueConverter","createArchitectureServices","context","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","Architecture","createDefaultCoreModule","ArchitectureGeneratedModule","ServiceRegistry","register","minimalGrammarModule","LanguageMetaData","caseInsensitive","fileExtensions","languageId","minimalSharedGrammarModule","AstReflection","loadGrammarFromJson","json","services","createMinimalGrammarServices","serializer","JsonSerializer","deserialize","workspace","LangiumDocumentFactory","fromModel","URI","parse","__defProp","defineProperty","target","configurable","Statement","Axis","Branch","Checkout","CherryPicking","Commit","Common","Curve","Edge","Entry","GitGraph","Info","Junction","Merge","Option","Packet","PacketBlock","Pie","PieSection","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","loadedRadarGrammar","Radar","Service","Direction","MermaidAstReflection","InfoGrammar","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","RadarGrammar","InfoLanguageMetaData","mode","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","RadarLanguageMetaData","InfoGeneratedModule","PacketGeneratedModule","PieGeneratedModule","GitGraphGeneratedModule","RadarGeneratedModule","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","DefaultValueConverter","runConverter","runCommonConverter","match","exec","CommonValueConverter","_rule","_input","DefaultTokenBuilder","keywords","buildKeywordTokens","terminalTokens","tokenTypes","tokenType","PATTERN","toString","_ral","RAL","exports","install","ral","buildATNKey","occurrence","AbstractTransition","isEpsilon","AtomTransition","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","start","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","production","Terminal","tokenRef","terminalType","NonTerminal","currentRule","nonTerminal","referencedRule","addTransition","ruleRef","Alternation","alternation","defineDecisionState","handle","makeAlts","option","optional","epsilon","Repetition","repetition","starState","star","RepetitionWithSeparator","sep","separator","repetitionSep","RepetitionMandatory","plusState","plus","repetitionMandatory","RepetitionMandatoryWithSeparator","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","removeState","last","makeBlock","blkStart","blkEnd","loop","loopback","loopEnd","state","decision","_len","_key","alt","getProdType","a","b","partial","t","assign","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","splice","indexOf","DFA_ERROR","ATNConfigSet","configs","size","finalize","config","getATNConfigKey","k","stack","baseUniq","createDFACache","startState","predicateSet","existing","atnStartState","PredicateSet","predicates","is","EMPTY_PREDICATES","LLStarLookaheadStrategy","LLkLookaheadStrategy","logging","message","console","log","initialize","dfas","decisionLength","decisionToDFA","initATNSimulator","validateAmbiguousAlternationAlternatives","validateEmptyOrAlternatives","buildLookaheadForAlternation","prodOccurrence","hasPredicates","dynamicTokensEnabled","decisionIndex","partialAlts","getLookaheadPaths","maxLookahead","prodType","currAlt","isLL1Sequence","choiceToAlt","reduce","currTokType","tokenTypeIdx","categoryMatches","currExtendingType","orAlts","nextToken","LA","prediction","gate","GATE","adaptivePredict","buildLookaheadForOptional","g","singleTokensTypes","flatten","isEmpty","expectedTokenUniqueKey","sequences","allowEmpty","fullSet","altSet","tokType","indices","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","apply","s0","previousD","d","token","edges","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","reach","intermediate","skippedStopStates","c","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","values","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","reportLookaheadAmbiguity","ambiguityIndices","prefixPath","atnState","pathMsg","currtok","tokenLabel","currMessage","prod","getProductionDslName","topLevelRule","buildAmbiguityError","previous","current","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","tokenMatcher","mapKey","numberOfTransitions","p","atnStack","pop","getEpsilonTarget","DocumentUri","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","create","line","character","Number","candidate","Is","objectLiteral","one","two","three","four","uri","string","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","label","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startLine","endLine","startCharacter","endCharacter","kind","collapsedText","defined","location","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","code","relatedInformation","codeDescription","title","command","args","newText","insert","position","del","needsConfirmation","description","boolean","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","every","change","version","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Module","Property","Unit","Value","Enum","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","_len2","parameters","_key2","Read","Write","Namespace","Package","String","Key","Null","containerName","selectionRange","children","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","slice","leftIdx","rightIdx","ret","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","startOffset","endOffset","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","low","high","mid","floor","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","rootNode","buildRootNode","RootCstNodeImpl","root","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","image","tokenToRange","removeNode","addHiddenNodes","tokens","added","unshift","construct","$cstNode","AbstractCstNode","_astNode","fullText","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","setPrototypeOf","addParents","count","_len3","_key3","_text","DatatypeSymbol","Symbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","_unorderedGroups","allRules","lexer","Lexer","wrapper","ChevrotainWrapper","ParserConfig","skipValidations","errorMessageProvider","ParserErrorMessageProvider","choices","wrapOr","callback","wrapOption","many","wrapMany","atLeastOne","wrapAtLeastOne","getRule","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","RULE_STACK","wrapSelfAnalysis","LangiumParser","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","impl","computeRuleType","ruleMethod","DEFINE_RULE","startImplementation","bind","mainRule","fragment","explicit","lexerResult","tokenize","clear","lexerErrors","errors","lexerReport","report","parserErrors","implementation","createNode","err","extractHiddenTokens","hiddenTokens","consume","wrapConsume","isValidToken","isCrossRef","getAssignment","convertedValue","convert","operator","isInsertedInRecovery","isNaN","subrule","subruleResult","wrapSubrule","performSubruleAssignment","newItem","assignWithoutOverride","linkContentToContainer","assignMandatoryProperties","buildReference","existingValue","targetCstNode","definitionErrors","AbstractParserErrorMessageProvider","buildMismatchTokenMessage","defaultParserErrorProvider","buildNotAllInputParsedMessage","buildNoViableAltMessage","buildEarlyExitMessage","LangiumParserErrorMessageProvider","expected","actual","LABEL","firstRedundant","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","currIdx","before","after","defaultConfig","recoveryEnabled","nodeLocationTracking","EmbeddedActionsParser","useDefaultLookahead","lookaheadStrategy","RECORDING_PHASE","RULE","performSelfAnalysis","ARGS","or","createParser","parserContext","reachable","parserRules","stream","ctx","buildElement","buildRules","method","ignoreGuard","buildKeyword","buildAction","buildCrossReference","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","getToken","ErrorWithLocation","$refText","buildRuleCall","methods","predicatedMethod","ALT","guard","getGuardCondition","buildAlternatives","orIdx","idFunc","lParser","groupState","trackedAlternatives","wrapped","delete","buildUnorderedGroup","buildGroup","EOF","condition","parameter","true","guardCondition","assignTerminal","EMPTY_ALT","DEF","ruleName","getRuleName","createLangiumParser","prepareLangiumParser","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","async","interruptAndCheck","CancellationToken","None","performance","now","Promise","resolve","setImmediate","setTimeout","isCancellationRequested","Deferred","promise","reject","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","len","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","substr","DocumentState","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","$document","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","all","addDocument","uriString","getDocument","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","unlink","Changed","precomputedScopes","deleteDocument","ref_resolving","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","streamAst","streamReferences","doLink","reference","getCandidate","isLinkingError","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","error","errorMessage","getScope","getElement","refNode","refText","$refNode","isAstNode","isAstNodeDescription","findRootNode","refData","getLinkedNode","ComputedScopes","descr","getAstNodePath","$nodeDescription","nodeDescription","doc","getAstNode","targetDescription","warn","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","UriUtils","basename","Utils","dirname","extname","joinPath","resolvePath","equals","relative","fromPath","toPath","fromParts","split","toParts","repeat","normalize","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","nodeElem","isReference","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","sourceUri","sourcePath","targetPath","segment","toDocumentSegment","local","MultiMap","Reduction","sum","addAll","callbackfn","flat","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","streamContents","exportNode","createDescription","computeLocalScopes","scopes","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","dispose","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onBuildPhase","onUpdate","_changed","deleted","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","nonNullable","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","serializeOptions","specificReplacer","replacer","defaultReplacer","currentDocument","JSON","stringify","space","deserializeOptions","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","startsWith","propertyAssignments","containerProperty","containerIndex","propertyName","reviveReference","mutable","$containerProperty","$containerIndex","getRefNode","fragmentIndex","DefaultServiceRegistry","fileExtensionMap","languageIdMap","ext","singleton","hasServices","diagnosticData","ValidationCategory","DocumentValidator","ValidationRegistry","entriesBefore","entriesAfter","checksRecord","thisObj","category","callbacks","wrapValidationException","addEntry","accept","handleException","functionality","messageContext","getAllSubTypes","getChecks","categories","checks","registerBeforeDocument","checkBefore","wrapPreparationException","registerAfterDocument","checkAfter","checksBefore","checksAfter","DefaultDocumentValidator","validationRegistry","validation","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","some","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","_options","lexerDiagnostics","lexerDiagnostic","diagnostic","toDiagnosticSeverity","column","toDiagnosticData","getSource","parserError","previousToken","endColumn","linkingError","info","containerType","toDiagnostic","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","getDiagnosticRange","LexingWarning","LexingInfo","LexingHint","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","previousValue","currentValue","propertyIndex","arrayIndex","Disposable","DefaultConfigurationProvider","_ready","settings","workspaceConfig","onConfigurationSectionUpdateEmitter","Emitter","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","fire","getConfiguration","sectionName","onConfigurationSectionUpdate","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","documentPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deletedUri","remove","changedUri","newDocument","allChangedUris","toSet","shouldRelink","rebuildDocuments","sortDocuments","Linked","toArray","listener","hasTextDocument","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","validate","targetState","filtered","notifyDocumentPhase","targetStateDocs","notifyBuildPhase","onDocumentPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","onCancellationRequested","listenersCopy","getBuildOptions","validator","validationSetting","newCategories","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","workspaceFolders","folders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexerErrorMessageProvider","buildUnexpectedCharactersMessage","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","DefaultLexer","LexerErrorMessageProvider","tokenBuilder","buildTokens","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","positionTracking","chevrotainResult","groups","flushLexingReport","isIMultiModeLexerDefinition","modes","res","tokenVocabulary","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","lastCharacter","skipWhitespace","tagRegex","tagMatch","fullMatch","rest","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","NEWLINE_REGEXP","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","getTag","getAllTags","getTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","with","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","findCommentNode","multilineCommentRules","DefaultAsyncParser","syncParser","_cancelToken","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","cancel","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateLexerReport","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","isRootCstNode","getGrammarElementId","isLeafCstNode","startColumn","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","cst","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","DocumentationProvider","isMultilineComment","nameRegexp","DefaultNameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","References","Hydrator","WorkspaceManager","ConfigurationProvider","baseFlatten","RadarTokenBuilder","RadarModule","createRadarServices","comparator","computed","isSymbol","regexpParser","TerminalRegExpVisitor","isStarting","endRegexpStack","multiline","endRegex","reset","startRegexp","fromCharCode","escapedChar","visitor","regexp","whitespaceCharacters","ws","getCaseInsensitivePattern","partialMatches","re","process","tmp","appendRaw","nbChars","appendOptional","partialRegExp","RangeComparison","TreeStreamImpl","includeRoot","inRange","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","Outside","compareRange","commentNames","getPreviousNode","isCommentNode","findIndex","baseClone","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","other","valueOf","baseTrim","isBinary","INFINITY","toNumber","GitGraphTokenBuilder","GitGraphModule","createGitGraphServices","isObjectLike","baseGetTag","ral_1","require","events_1","freeze","Cancelled","shortcutEvent","default","timer","MutableToken","_isCancelled","_emitter","_token","EmptyFileSystemProvider","StreamImpl","startFn","nextFn","toMap","keyFn","valueFn","entryStream","firstDone","DONE_RESULT","addSeparator","searchElement","initialValue","reduceRight","recursiveReduce","mapped","isIterable","depth","head","tail","skipCount","limit","maxSize","distinct","by","internalState","exclude","otherKeySet","ownKey","EMPTY_STREAM","collections","collIndex","arrIndex","iterators","pruned","product","convertInt","convertString","convertID","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","Date","baseEach","objectProto","baseRest","sources","isIterateeCall","props","keysIn","propsIndex","propsLength","eq","subtypes","allSubtypes","allTypes","types","possibleSubType","parsers","initializers","createInfoServices","createInfoServices2","packet","createPacketServices","createPacketServices2","pie","createPieServices","createPieServices2","architecture","createArchitectureServices2","gitGraph","createGitGraphServices2","radar","createRadarServices2","diagramType","initializer","MermaidParseError","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","prop","_resolve","getOwnPropertyDescriptor","_","ownKeys","getOwnPropertyNames","__requested__","cause","value2","value1","toFinite","remainder","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","n","baseSlice","createAssigner","isPrototype","copyObject","arrayMap","getAllKeysIn","basePickBy","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","isString","AbstractProduction","_definition","pickBy","v","Rule","orgText","Alternative","ignoreAmbiguities","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","serializedTerminal","terminalLabel","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","arraySome","baseSome","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","subProd","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","prodWrapper","repSepProd","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","arrayFilter","baseFilter","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","valuesIndex","isArrayLikeObject","baseDifference","resIndex","PRINT_ERROR","msg","PRINT_WARNING","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","upperChar","lowerChar","handleIgnoreCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","tracer","defaults","useSticky","debug","safeMode","lineTerminatorCharacters","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","currType","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","clazz","groupName","GROUP","SKIPPED","isUndefined","longerAltType","LONGER_ALT","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","canBeOptimized","charCodeToPatternIdxToConfig","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","missingResult","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","charsOrCodes","numOrString","charCode","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","searching","CATEGORIES","expandCategories","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","traceInitPerf","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","indent","traceInitMaxIdent","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","initialMode","tokenizeInternal","j","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","matchedTokens","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","currTok","buildAlternationAmbiguityError","buildEmptyRepetitionError","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","newDef","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","numOfAlts","areAllOneTokenLookahead","currNumOfPaths","currPredicate","currPathLength","singleTokenAlts","buildSingleAlternativeLookaheadFunction","numOfPaths","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","className","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","manySep","atLeastOneSep","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","captureStackTrace","MismatchedTokenException","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","DEFAULT_PARSER_CONFIG","leftRecursionErrors","emptyAltErrors","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","laFuncBuilder","buildLookaheadFuncForOr","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","setNodeLocationFull","defineNameProp","nameValue","enumerable","writable","defaultVisit","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","Parser","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","fullRuleName","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","noTokenCategoriesUsed","tokenConstructor","defineRule","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","invokeRuleCatch","ruleFinallyStateUpdate","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","propName","basePropDescriptor","configClone","r","o","h","cwd","isAbsolute","f","l","_makeLong","format","dir","base","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P","typePredicate","keyIndex","isAstNodeInRange","nodeRange","typeMetaData","genericNode","copyDefaultValue","propertyType","PieTokenBuilder","PieValueConverter","PieModule","PacketTokenBuilder","PacketModule","baseMap","_disposable","CallbackList","bucket","_callbacks","_contexts","foundCallbackWithDifferentContext","invoke","contexts","_event","thisArgs","disposables","onFirstListenerAdd","_noop","onLastListenerRemove","stringArray","elem","baseExtremum","baseLt","InfoTokenBuilder","InfoModule","reachableRules","buildTerminalTokens","terminalToken","popDiagnostics","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","sort","buildKeywordToken","keywordPattern","buildKeywordPattern","findLongerAlt","longerAlts"],"sourceRoot":""}